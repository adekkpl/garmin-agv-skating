class methods:
Module: Toybox
Overview
Modules Under Namespace
Modules: Toybox.Activity, Toybox.ActivityMonitor, Toybox.ActivityRecording, Toybox.Ant, Toybox.AntPlus, Toybox.Application, Toybox.Attention, Toybox.Authentication, Toybox.Background, Toybox.BluetoothLowEnergy, Toybox.Communications, Toybox.Complications, Toybox.Cryptography, Toybox.FitContributor, Toybox.Graphics, Toybox.Lang, Toybox.Math, Toybox.Media, Toybox.Notifications, Toybox.PersistedContent, Toybox.PersistedLocations, Toybox.Position, Toybox.Sensor, Toybox.SensorHistory, Toybox.SensorLogging, Toybox.StringUtil, Toybox.System, Toybox.Test, Toybox.Time, Toybox.Timer, Toybox.UserProfile, Toybox.WatchUi, Toybox.Weather


=======================================================
Module: Toybox.Activity
Overview
The Activity module provides a way to retrieve available info for the current activity.

Activity Info is automatically provided by the compute() method in Data Fields. The getActivityInfo() method is available for use within apps or in other cases, such as data field initialization.

This module also provides two sets of constants:

SWIM_STROKE: Indicates the swimStrokeType(), such as freestyle, backstroke, or butterfly.

TIMER_STATE: Indicates the activity recording timerState(), such as stopped, started, paused, etc.

Since:

API Level 1.0.0

Classes Under Namespace
Classes: Info, ProfileInfo, WorkoutIntervalStep, WorkoutStep, WorkoutStepInfo

Constant Summary
SwimStrokeType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
SWIM_STROKE_FREESTYLE	0	
API Level 1.2.2

Freestyle stroke

SWIM_STROKE_BACKSTROKE	1	
API Level 1.2.2

Backstroke

SWIM_STROKE_BREASTSTROKE	2	
API Level 1.2.2

Breaststroke

SWIM_STROKE_BUTTERFLY	3	
API Level 1.2.2

Butterfly stroke

SWIM_STROKE_DRILL	4	
API Level 1.2.2

Drill mode

SWIM_STROKE_MIXED	5	
API Level 1.2.2

Mixed stroke mode

SWIM_STROKE_IM	6	
API Level 1.2.2

Mixed interval with equal number of butterfly, backstroke, breaststroke, and freestyle, in that order.

TimerState
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
TIMER_STATE_OFF	0	
API Level 2.1.0

The timer is off. There is not an active recording

TIMER_STATE_STOPPED	1	
API Level 2.1.0

The timer is stopped. The recording is active, with the timer stopped.

TIMER_STATE_PAUSED	2	
API Level 2.1.0

The timer is paused. The recording is active with the timer paused. This state occurs when the timer is active, but has been stopped with the Auto-Pause feature.

TIMER_STATE_ON	3	
API Level 2.1.0

The timer is on. The recording is active and the timer is running.

Sport
Since:

API Level 3.2.0

Name	Value	Since	Description	See Also
SPORT_GENERIC	0	
API Level 3.2.0

SPORT_RUNNING	1	
API Level 3.2.0

SPORT_CYCLING	2	
API Level 3.2.0

SPORT_TRANSITION	3	
API Level 3.2.0

SPORT_FITNESS_EQUIPMENT	4	
API Level 3.2.0

SPORT_SWIMMING	5	
API Level 3.2.0

SPORT_BASKETBALL	6	
API Level 3.2.0

SPORT_SOCCER	7	
API Level 3.2.0

SPORT_TENNIS	8	
API Level 3.2.0

SPORT_AMERICAN_FOOTBALL	9	
API Level 3.2.0

SPORT_TRAINING	10	
API Level 3.2.0

SPORT_WALKING	11	
API Level 3.2.0

SPORT_CROSS_COUNTRY_SKIING	12	
API Level 3.2.0

SPORT_ALPINE_SKIING	13	
API Level 3.2.0

SPORT_SNOWBOARDING	14	
API Level 3.2.0

SPORT_ROWING	15	
API Level 3.2.0

SPORT_MOUNTAINEERING	16	
API Level 3.2.0

SPORT_HIKING	17	
API Level 3.2.0

SPORT_MULTISPORT	18	
API Level 3.2.0

SPORT_PADDLING	19	
API Level 3.2.0

SPORT_FLYING	20	
API Level 3.2.0

SPORT_E_BIKING	21	
API Level 3.2.0

SPORT_MOTORCYCLING	22	
API Level 3.2.0

SPORT_BOATING	23	
API Level 3.2.0

SPORT_DRIVING	24	
API Level 3.2.0

SPORT_GOLF	25	
API Level 3.2.0

SPORT_HANG_GLIDING	26	
API Level 3.2.0

SPORT_HORSEBACK_RIDING	27	
API Level 3.2.0

SPORT_HUNTING	28	
API Level 3.2.0

SPORT_FISHING	29	
API Level 3.2.0

SPORT_INLINE_SKATING	30	
API Level 3.2.0

SPORT_ROCK_CLIMBING	31	
API Level 3.2.0

SPORT_SAILING	32	
API Level 3.2.0

SPORT_ICE_SKATING	33	
API Level 3.2.0

SPORT_SKY_DIVING	34	
API Level 3.2.0

SPORT_SNOWSHOEING	35	
API Level 3.2.0

SPORT_SNOWMOBILING	36	
API Level 3.2.0

SPORT_STAND_UP_PADDLEBOARDING	37	
API Level 3.2.0

SPORT_SURFING	38	
API Level 3.2.0

SPORT_WAKEBOARDING	39	
API Level 3.2.0

SPORT_WATER_SKIING	40	
API Level 3.2.0

SPORT_KAYAKING	41	
API Level 3.2.0

SPORT_RAFTING	42	
API Level 3.2.0

SPORT_WINDSURFING	43	
API Level 3.2.0

SPORT_KITESURFING	44	
API Level 3.2.0

SPORT_TACTICAL	45	
API Level 3.2.0

SPORT_JUMPMASTER	46	
API Level 3.2.0

SPORT_BOXING	47	
API Level 3.2.0

SPORT_FLOOR_CLIMBING	48	
API Level 3.2.0

SPORT_BASEBALL	49	
API Level 3.2.0

SPORT_SOFTBALL_FAST_PITCH	50	
API Level 3.2.0

SPORT_SOFTBALL_SLOW_PITCH	51	
API Level 3.2.0

SPORT_SHOOTING	56	
API Level 3.2.0

SPORT_AUTO_RACING	57	
API Level 3.2.0

SPORT_WINTER_SPORT	58	
API Level 4.1.6

SPORT_GRINDING	59	
API Level 4.1.6

SPORT_HEALTH_MONITORING	60	
API Level 4.1.6

SPORT_MARINE	61	
API Level 4.1.6

SPORT_HIIT	62	
API Level 4.1.6

SPORT_VIDEO_GAMING	63	
API Level 4.1.6

SPORT_RACKET	64	
API Level 4.1.6

SPORT_WHEELCHAIR_PUSH_WALK	65	
API Level 4.1.6

SPORT_WHEELCHAIR_PUSH_RUN	66	
API Level 4.1.6

SPORT_MEDITATION	67	
API Level 4.1.6

SPORT_PARA_SPORT	68	
API Level 4.1.6

SPORT_DISC_GOLF	69	
API Level 4.1.6

SPORT_TEAM_SPORT	70	
API Level 4.1.6

SPORT_CRICKET	71	
API Level 4.1.6

SPORT_RUGBY	72	
API Level 4.1.6

SPORT_HOCKEY	73	
API Level 4.1.6

SPORT_LACROSSE	74	
API Level 4.1.6

SPORT_VOLLEYBALL	75	
API Level 4.1.6

SPORT_WATER_TUBING	76	
API Level 4.1.6

SPORT_WAKESURFING	77	
API Level 4.1.6

SPORT_INVALID	255	
API Level 3.2.0

SubSport
Since:

API Level 3.2.0

Name	Value	Since	Description	See Also
SUB_SPORT_GENERIC	0	
API Level 3.2.0

SUB_SPORT_TREADMILL	1	
API Level 3.2.0

SUB_SPORT_STREET	2	
API Level 3.2.0

SUB_SPORT_TRAIL	3	
API Level 3.2.0

SUB_SPORT_TRACK	4	
API Level 3.2.0

SUB_SPORT_SPIN	5	
API Level 3.2.0

SUB_SPORT_INDOOR_CYCLING	6	
API Level 3.2.0

SUB_SPORT_ROAD	7	
API Level 3.2.0

SUB_SPORT_MOUNTAIN	8	
API Level 3.2.0

SUB_SPORT_DOWNHILL	9	
API Level 3.2.0

SUB_SPORT_RECUMBENT	10	
API Level 3.2.0

SUB_SPORT_CYCLOCROSS	11	
API Level 3.2.0

SUB_SPORT_HAND_CYCLING	12	
API Level 3.2.0

SUB_SPORT_TRACK_CYCLING	13	
API Level 3.2.0

SUB_SPORT_INDOOR_ROWING	14	
API Level 3.2.0

SUB_SPORT_ELLIPTICAL	15	
API Level 3.2.0

SUB_SPORT_STAIR_CLIMBING	16	
API Level 3.2.0

SUB_SPORT_LAP_SWIMMING	17	
API Level 3.2.0

SUB_SPORT_OPEN_WATER	18	
API Level 3.2.0

SUB_SPORT_FLEXIBILITY_TRAINING	19	
API Level 3.2.0

SUB_SPORT_STRENGTH_TRAINING	20	
API Level 3.2.0

SUB_SPORT_WARM_UP	21	
API Level 3.2.0

SUB_SPORT_MATCH	22	
API Level 3.2.0

SUB_SPORT_EXERCISE	23	
API Level 3.2.0

SUB_SPORT_CHALLENGE	24	
API Level 3.2.0

SUB_SPORT_INDOOR_SKIING	25	
API Level 3.2.0

SUB_SPORT_CARDIO_TRAINING	26	
API Level 3.2.0

SUB_SPORT_INDOOR_WALKING	27	
API Level 4.1.6

SUB_SPORT_E_BIKE_FITNESS	28	
API Level 4.1.6

SUB_SPORT_BMX	29	
API Level 4.1.6

SUB_SPORT_CASUAL_WALKING	30	
API Level 4.1.6

SUB_SPORT_SPEED_WALKING	31	
API Level 4.1.6

SUB_SPORT_BIKE_TO_RUN_TRANSITION	32	
API Level 4.1.6

SUB_SPORT_RUN_TO_BIKE_TRANSITION	33	
API Level 4.1.6

SUB_SPORT_SWIM_TO_BIKE_TRANSITION	34	
API Level 4.1.6

SUB_SPORT_ATV	35	
API Level 4.1.6

SUB_SPORT_MOTOCROSS	36	
API Level 4.1.6

SUB_SPORT_BACKCOUNTRY	37	
API Level 4.1.6

SUB_SPORT_RESORT	38	
API Level 4.1.6

SUB_SPORT_RC_DRONE	39	
API Level 4.1.6

SUB_SPORT_WINGSUIT	40	
API Level 4.1.6

SUB_SPORT_WHITEWATER	41	
API Level 4.1.6

SUB_SPORT_SKATE_SKIING	42	
API Level 4.1.6

SUB_SPORT_YOGA	43	
API Level 4.1.6

SUB_SPORT_PILATES	44	
API Level 4.1.6

SUB_SPORT_INDOOR_RUNNING	45	
API Level 4.1.6

SUB_SPORT_GRAVEL_CYCLING	46	
API Level 4.1.6

SUB_SPORT_E_BIKE_MOUNTAIN	47	
API Level 4.1.6

SUB_SPORT_COMMUTING	48	
API Level 4.1.6

SUB_SPORT_MIXED_SURFACE	49	
API Level 4.1.6

SUB_SPORT_NAVIGATE	50	
API Level 4.1.6

SUB_SPORT_TRACK_ME	51	
API Level 4.1.6

SUB_SPORT_MAP	52	
API Level 4.1.6

SUB_SPORT_SINGLE_GAS_DIVING	53	
API Level 4.1.6

SUB_SPORT_MULTI_GAS_DIVING	54	
API Level 4.1.6

SUB_SPORT_GAUGE_DIVING	55	
API Level 4.1.6

SUB_SPORT_APNEA_DIVING	56	
API Level 4.1.6

SUB_SPORT_APNEA_HUNTING	57	
API Level 4.1.6

SUB_SPORT_VIRTUAL_ACTIVITY	58	
API Level 4.1.6

SUB_SPORT_OBSTACLE	59	
API Level 4.1.6

SUB_SPORT_ASSISTANCE	60	
API Level 4.1.6

SUB_SPORT_INCIDENT_DETECTED	61	
API Level 4.1.6

SUB_SPORT_BREATHING	62	
API Level 4.1.6

SUB_SPORT_CCR_DIVING	63	
API Level 4.1.6

SUB_SPORT_AREA_CALC	64	
API Level 4.1.6

SUB_SPORT_SAIL_RACE	65	
API Level 4.1.6

SUB_SPORT_EXPEDITION	66	
API Level 4.1.6

SUB_SPORT_ULTRA	67	
API Level 4.1.6

SUB_SPORT_INDOOR_CLIMBING	68	
API Level 4.1.6

SUB_SPORT_BOULDERING	69	
API Level 4.1.6

SUB_SPORT_HIIT	70	
API Level 4.1.6

SUB_SPORT_INDOOR_GRINDING	71	
API Level 4.1.6

SUB_SPORT_HUNTING_WITH_DOGS	72	
API Level 4.1.6

SUB_SPORT_AMRAP	73	
API Level 4.1.6

SUB_SPORT_EMOM	74	
API Level 4.1.6

SUB_SPORT_TABATA	75	
API Level 4.1.6

SUB_SPORT_FALL_DETECTED	76	
API Level 4.1.6

SUB_SPORT_ESPORT	77	
API Level 4.1.6

SUB_SPORT_TRIATHLON	78	
API Level 4.1.6

SUB_SPORT_DUATHLON	79	
API Level 4.1.6

SUB_SPORT_BRICK	80	
API Level 4.1.6

SUB_SPORT_SWIM_RUN	81	
API Level 4.1.6

SUB_SPORT_ADVENTURE_RACE	82	
API Level 4.1.6

SUB_SPORT_TRUCKER_WORKOUT	83	
API Level 4.1.6

SUB_SPORT_PICKLEBALL	84	
API Level 4.1.6

SUB_SPORT_PADEL	85	
API Level 4.1.6

SUB_SPORT_INDOOR_WHEELCHAIR_WALK	86	
API Level 4.1.6

SUB_SPORT_INDOOR_WHEELCHAIR_RUN	87	
API Level 4.1.6

SUB_SPORT_INDOOR_HAND_CYCLING	88	
API Level 4.1.6

SUB_SPORT_ANCHOR	89	
API Level 4.1.6

SUB_SPORT_FIELD	90	
API Level 4.1.6

SUB_SPORT_ICE	91	
API Level 4.1.6

SUB_SPORT_ULTIMATE	92	
API Level 4.1.6

SUB_SPORT_PLATFORM	93	
API Level 4.1.6

SUB_SPORT_SQUASH	94	
API Level 4.1.6

SUB_SPORT_BADMINTON	95	
API Level 4.1.6

SUB_SPORT_RACQUETBALL	96	
API Level 4.1.6

SUB_SPORT_TABLE_TENNIS	97	
API Level 4.1.6

SUB_SPORT_INVALID	255	
API Level 3.2.0

WorkoutIntensity
Since:

API Level 3.2.0

Name	Value	Since	Description	See Also
WORKOUT_INTENSITY_ACTIVE	0	
API Level 3.2.0

WORKOUT_INTENSITY_REST	1	
API Level 3.2.0

WORKOUT_INTENSITY_WARMUP	2	
API Level 3.2.0

WORKOUT_INTENSITY_COOLDOWN	3	
API Level 3.2.0

WORKOUT_INTENSITY_RECOVERY	4	
API Level 3.2.0

WORKOUT_INTENSITY_INTERVAL	5	
API Level 3.2.0

WORKOUT_INTENSITY_INVALID	255	
API Level 3.2.0

WorkoutStepDurationType
Since:

API Level 3.2.0

Name	Value	Since	Description	See Also
WORKOUT_STEP_DURATION_TIME	0	
API Level 3.2.0

WORKOUT_STEP_DURATION_DISTANCE	1	
API Level 3.2.0

WORKOUT_STEP_DURATION_HR_LESS_THAN	2	
API Level 3.2.0

WORKOUT_STEP_DURATION_HR_GREATER_THAN	3	
API Level 3.2.0

WORKOUT_STEP_DURATION_CALORIES	4	
API Level 3.2.0

WORKOUT_STEP_DURATION_OPEN	5	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_STEPS_COMPLETE	6	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_TIME	7	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_DISTANCE	8	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_CALORIES	9	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_HR_LESS_THAN	10	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_HR_GREATER_THAN	11	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_POWER_LESS_THAN	12	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_POWER_GREATER_THAN	13	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_LESS_THAN	14	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_GREATER_THAN	15	
API Level 3.2.0

WORKOUT_STEP_DURATION_TRAINING_PEAKS_TRAINING_STRESS_SCORE	16	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_POWER_LAST_LAP_LESS_THAN	17	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_MAX_POWER_LAST_LAP_LESS_THAN	18	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_3S_LESS_THAN	19	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_10S_LESS_THAN	20	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_30S_LESS_THAN	21	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_3S_GREATER_THAN	22	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_10S_GREATER_THAN	23	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_30S_GREATER_THAN	24	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_LAP_LESS_THAN	25	
API Level 3.2.0

WORKOUT_STEP_DURATION_POWER_LAP_GREATER_THAN	26	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPEAT_UNTIL_TRAINING_PEAKS_TRAINING_STRESS_SCORE	27	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPETITION_TIME	28	
API Level 3.2.0

WORKOUT_STEP_DURATION_REPS	29	
API Level 3.2.0

WORKOUT_STEP_DURATION_INVALID	255	
API Level 3.2.0

WorkoutStepTargetType
Since:

API Level 3.2.0

Name	Value	Since	Description	See Also
WORKOUT_STEP_TARGET_SPEED	0	
API Level 3.2.0

WORKOUT_STEP_TARGET_HEART_RATE	1	
API Level 3.2.0

WORKOUT_STEP_TARGET_OPEN	2	
API Level 3.2.0

WORKOUT_STEP_TARGET_CADENCE	3	
API Level 3.2.0

WORKOUT_STEP_TARGET_POWER	4	
API Level 3.2.0

WORKOUT_STEP_TARGET_GRADE	5	
API Level 3.2.0

WORKOUT_STEP_TARGET_RESISTANCE	6	
API Level 3.2.0

WORKOUT_STEP_TARGET_POWER_3S	7	
API Level 3.2.0

WORKOUT_STEP_TARGET_POWER_10S	8	
API Level 3.2.0

WORKOUT_STEP_TARGET_POWER_30S	9	
API Level 3.2.0

WORKOUT_STEP_TARGET_POWER_LAP	10	
API Level 3.2.0

WORKOUT_STEP_TARGET_SWIM_STROKE	11	
API Level 3.2.0

WORKOUT_STEP_TARGET_SPEED_LAP	12	
API Level 3.2.0

WORKOUT_STEP_TARGET_HEART_RATE_LAP	13	
API Level 3.2.0

WORKOUT_STEP_TARGET_INHALE_DURATION	14	
API Level 3.2.0

WORKOUT_STEP_TARGET_INHALE_HOLD_DURATION	15	
API Level 3.2.0

WORKOUT_STEP_TARGET_EXHALE_DURATION	16	
API Level 3.2.0

WORKOUT_STEP_TARGET_EXHALE_HOLD_DURATION	17	
API Level 3.2.0

WORKOUT_STEP_TARGET_POWER_CURVE	18	
API Level 3.2.0

WORKOUT_STEP_TARGET_INVALID	255	
API Level 3.2.0

Instance Method Summary
collapse
getActivityInfo() as Activity.Info or Null
Get the current Activity Info.
getCurrentWorkoutStep() as Activity.WorkoutStepInfo or Null
Get information about the current workout step.
getNextWorkoutStep() as Activity.WorkoutStepInfo or Null
Get information about the next workout step.
getProfileInfo() as Activity.ProfileInfo
Get information about the current profile.
Instance Method Details
getActivityInfo() as Activity.Info or Null
Get the current Activity Info.

Returns:

Activity.Info — The current Activity Info or null if there is no current activity.
Since:

API Level 1.0.0

getCurrentWorkoutStep() as Activity.WorkoutStepInfo or Null
Get information about the current workout step.

Supported Devices:

[View devices]
Returns:

Activity.WorkoutStepInfo — if a workout is active, null otherwise
Since:

API Level 3.2.0

Throws:

(Lang.OperationNotAllowedException) — Thrown if called from a data field app
getNextWorkoutStep() as Activity.WorkoutStepInfo or Null
Get information about the next workout step.

Supported Devices:

[View devices]
Returns:

Activity.WorkoutStepInfo — if a workout is active and there is a next step, null otherwise
Since:

API Level 3.2.0

Throws:

(Lang.OperationNotAllowedException) — Thrown if called from a data field app
getProfileInfo() as Activity.ProfileInfo
Get information about the current profile.

Returns:

Activity.ProfileInfo — the current profile
Since:

API Level 3.2.0


Class: Toybox.Activity.Info
Inherits:
Toybox.Lang.Objectshow all
Overview
The Info class contains information about the current activity.

This information can be retrieved with the getActivityInfo() method. Fields in this class may return null so should be checked for null values prior to use.

Since:

API Level 1.0.0

Instance Member Summary
collapse
altitude as Lang.Float or Null
The altitude above mean sea level in meters (m).
ambientPressure as Lang.Float or Null
The ambient pressure in Pascals (Pa).
averageCadence as Lang.Number or Null
The average cadence during the current activity in revolutions per minute (rpm).
averageDistance as Lang.Float or Null
The average swim stroke distance from the previous interval in meters (m).
averageHeartRate as Lang.Number or Null
The average heart rate during the current activity in beats per minute (bpm).
averagePower as Lang.Number or Null
The average power during the current activity in Watts (W).
averageSpeed as Lang.Float or Null
The average speed during the current activity in meters per second (mps).
bearing as Lang.Float or Null
The current bearing in radians.
bearingFromStart as Lang.Float or Null
The bearing from the starting location to the destination in radians.
calories as Lang.Number or Null
The calories burned throughout the current activity in kilocalories (kcal).
currentCadence as Lang.Number or Null
The current cadence in revolutions per minute (rpm).
currentHeading as Lang.Float or Null
The true north referenced heading in radians.
currentHeartRate as Lang.Number or Null
The current heart rate in beats per minute (bpm).
currentLocation as Position.Location or Null
The current location.
currentLocationAccuracy as Position.Quality or Null
The current GPS accuracy.
currentOxygenSaturation as Lang.Number or Null
The current oxygen saturation in percent (%).
currentPower as Lang.Number or Null
The current power in Watts (W).
currentSpeed as Lang.Float or Null
The current speed in meters per second (mps).
distanceToDestination as Lang.Float or Null
The distance to the destination in meters (m).
distanceToNextPoint as Lang.Float or Null
The distance to the next point in meters (m).
elapsedDistance as Lang.Float or Null
The elapsed distance of the current activity in meters (m).
elapsedTime as Lang.Number or Null
Elapsed time of the current activity in milliseconds (ms).
elevationAtDestination as Lang.Number or Null
The elevation at the destination in meters (m).
elevationAtNextPoint as Lang.Float or Null
The elevation at the next point in meters (m).
energyExpenditure as Lang.Float or Null
The current energy expenditure in kilocalories per minute (kcals/min).
frontDerailleurIndex as Lang.Number or Null
The current front bicycle derailleur index.
frontDerailleurMax as Lang.Number or Null
The front bicycle derailleur maximum index.
frontDerailleurSize as Lang.Number or Null
The front bicycle derailleur gear size in number of teeth.
maxCadence as Lang.Number or Null
The maximum cadence recorded during the current activity in revolutions per minute (rpm).
maxHeartRate as Lang.Number or Null
The maximum heart rate recorded during the current activity in beats per minute (bpm).
maxPower as Lang.Number or Null
The maximum power recorded during the current activity in Watts (W).
maxSpeed as Lang.Float or Null
The maximum speed recorded during the current activity in meters per second (mps).
meanSeaLevelPressure as Lang.Float or Null
The mean sea level barometric pressure in Pascals (Pa).
nameOfDestination as Lang.String or Null
The name of the destination.
nameOfNextPoint as Lang.String or Null
The name of the next point.
offCourseDistance as Lang.Float or Null
The distance to the nearest point on the current course in meters (m).
rawAmbientPressure as Lang.Float or Null
The raw ambient pressure in Pascals (Pa).
rearDerailleurIndex as Lang.Number or Null
The current rear bicycle derailleur index.
rearDerailleurMax as Lang.Number or Null
The rear bicycle derailleur maximum index.
rearDerailleurSize as Lang.Number or Null
The rear bicycle derailleur gear size in number of teeth.
startLocation as Position.Location or Null
The starting location of the current activity.
startTime as Time.Moment or Null
The starting time of the current activity.
swimStrokeType as Activity.SwimStrokeType or Null
The swim stroke type from the previous length.
swimSwolf as Lang.Number or Null
The SWOLF score from the previous length.
timerState as Activity.TimerState or Null
The recording timer state.
timerTime as Lang.Number or Null
The current Timer value in milliseconds (ms).
totalAscent as Lang.Number or Null
The total ascent during the current activity in meters (m).
totalDescent as Lang.Number or Null
The total descent during the current activity in meters (m).
track as Lang.Float or Null
The current track in radians.
trainingEffect as Lang.Float or Null
The Training Effect score of the current activity.
Instance Attribute Details
var altitude as Lang.Float or Null
The altitude above mean sea level in meters (m).

Elevation is derived from the most accurate source: Barometer or GPS

Since:

API Level 1.0.0

Returns:

Lang.Float
var ambientPressure as Lang.Float or Null
The ambient pressure in Pascals (Pa).

This returns ambient (local) barometric pressure as measured by the pressure sensor. The data is smoothed by a two-stage filter to reduce noise and instantaneous variation.

Since:

API Level 2.4.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var averageCadence as Lang.Number or Null
The average cadence during the current activity in revolutions per minute (rpm).

Since:

API Level 1.0.0

Returns:

Lang.Number
var averageDistance as Lang.Float or Null
The average swim stroke distance from the previous interval in meters (m).

Since:

API Level 1.2.2

Supported Devices:

[View devices]
Returns:

Lang.Float
var averageHeartRate as Lang.Number or Null
The average heart rate during the current activity in beats per minute (bpm).

Since:

API Level 1.0.0

Returns:

Lang.Number
var averagePower as Lang.Number or Null
The average power during the current activity in Watts (W).

Since:

API Level 1.0.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var averageSpeed as Lang.Float or Null
The average speed during the current activity in meters per second (mps).

The average is computed as the elapsed 3-D accumulated distance divided by the elapsed time.

Since:

API Level 1.0.0

Returns:

Lang.Float
var bearing as Lang.Float or Null
The current bearing in radians.

Bearing is the direction from your current location or position to the destination of navigation, dependent on your current location.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var bearingFromStart as Lang.Float or Null
The bearing from the starting location to the destination in radians.

Bearing from start is the direction of desired track from the start of navigation to the destination in radians. This is only dependent on your location when a course is set, and it is not dependent on where you may have moved to during an activity

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var calories as Lang.Number or Null
The calories burned throughout the current activity in kilocalories (kcal).

Since:

API Level 1.0.0

Returns:

Lang.Number
var currentCadence as Lang.Number or Null
The current cadence in revolutions per minute (rpm).

Since:

API Level 1.0.0

Returns:

Lang.Number — (rpm)
var currentHeading as Lang.Float or Null
The true north referenced heading in radians.

This provides compass orientation if it is supported by the device.

Since:

API Level 1.0.0

Returns:

Lang.Float
var currentHeartRate as Lang.Number or Null
The current heart rate in beats per minute (bpm).

Since:

API Level 1.0.0

Returns:

Lang.Number
var currentLocation as Position.Location or Null
The current location.

This member will always provide a null value unless the Positioning Permission is enabled.

Since:

API Level 1.0.0

Returns:

Position.Location
var currentLocationAccuracy as Position.Quality or Null
The current GPS accuracy.

GPS accuracy values range from 0-4. A value of 0 indicates an accuracy value is not available, while a value of 4 indicates a good GPS fix.

Since:

API Level 1.0.0

See Also:

Positional Accuracy
Returns:

Position.Quality — A Position.QUALITY_* value
var currentOxygenSaturation as Lang.Number or Null
The current oxygen saturation in percent (%)

Since:

API Level 3.2.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var currentPower as Lang.Number or Null
The current power in Watts (W).

Since:

API Level 1.0.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var currentSpeed as Lang.Float or Null
The current speed in meters per second (mps).

Since:

API Level 1.0.0

See Also:

Positional Speed
Returns:

Lang.Float
var distanceToDestination as Lang.Float or Null
The distance to the destination in meters (m).

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var distanceToNextPoint as Lang.Float or Null
The distance to the next point in meters (m).

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var elapsedDistance as Lang.Float or Null
The elapsed distance of the current activity in meters (m).

Since:

API Level 1.0.0

Returns:

Lang.Float
var elapsedTime as Lang.Number or Null
Elapsed time of the current activity in milliseconds (ms).

Since:

API Level 1.0.0

Returns:

Lang.Number
var elevationAtDestination as Lang.Number or Null
The elevation at the destination in meters (m).

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var elevationAtNextPoint as Lang.Float or Null
The elevation at the next point in meters (m).

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var energyExpenditure as Lang.Float or Null
The current energy expenditure in kilocalories per minute (kcals/min).

Energy expenditure is a metric developed by FirstBeat that provides an estimation of the calorie burn rate calculated from heart rate data.

Since:

API Level 1.2.0

See Also:

Energy Expenditure
Supported Devices:

[View devices]
Returns:

Lang.Float
var frontDerailleurIndex as Lang.Number or Null
The current front bicycle derailleur index.

Index values range from from 1 to the frontDerailleurMax.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var frontDerailleurMax as Lang.Number or Null
The front bicycle derailleur maximum index.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var frontDerailleurSize as Lang.Number or Null
The front bicycle derailleur gear size in number of teeth.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var maxCadence as Lang.Number or Null
The maximum cadence recorded during the current activity in revolutions per minute (rpm).

Since:

API Level 1.0.0

Returns:

Lang.Number
var maxHeartRate as Lang.Number or Null
The maximum heart rate recorded during the current activity in beats per minute (bpm).

Since:

API Level 1.0.0

Returns:

Lang.Number
var maxPower as Lang.Number or Null
The maximum power recorded during the current activity in Watts (W).

Since:

API Level 1.0.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var maxSpeed as Lang.Float or Null
The maximum speed recorded during the current activity in meters per second (mps).

Since:

API Level 1.0.0

Returns:

Lang.Float — (mps)
var meanSeaLevelPressure as Lang.Float or Null
The mean sea level barometric pressure in Pascals (Pa).

This returns barometric pressure calibrated to sea level. Since pressure varies dues to several factors, a GPS-based altitude must first be obtained, then the ambient (local) pressure is measured by the pressure sensor before conversion to a calibrated barometric pressure value.

Since:

API Level 2.4.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var nameOfDestination as Lang.String or Null
The name of the destination.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.String
var nameOfNextPoint as Lang.String or Null
The name of the next point.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.String
var offCourseDistance as Lang.Float or Null
The distance to the nearest point on the current course in meters (m).

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var rawAmbientPressure as Lang.Float or Null
The raw ambient pressure in Pascals (Pa).

This returns ambient (local) barometric pressure as measured by the internal pressure sensor. The data is the temperature compensated information read directly from the internal sensor.

Since:

API Level 2.4.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var rearDerailleurIndex as Lang.Number or Null
The current rear bicycle derailleur index.

Index values range from from 1 to the rearDerailleurMax.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var rearDerailleurMax as Lang.Number or Null
The rear bicycle derailleur maximum index.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var rearDerailleurSize as Lang.Number or Null
The rear bicycle derailleur gear size in number of teeth.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var startLocation as Position.Location or Null
The starting location of the current activity.

This member will always provide a null value unless the Positioning Permission is enabled.

Since:

API Level 1.0.0

Returns:

Position.Location
var startTime as Time.Moment or Null
The starting time of the current activity.

Since:

API Level 1.0.0

Returns:

Time.Moment
var swimStrokeType as Activity.SwimStrokeType or Null
The swim stroke type from the previous length.

Swim stroke type values range from 0-6. Each Number value represents a different swim stroke type (e.g. freestyle, backstroke, etc.).

Since:

API Level 1.2.2

Supported Devices:

[View devices]
Returns:

Activity.SwimStrokeType — A SWIM_STROKE_* value
var swimSwolf as Lang.Number or Null
The SWOLF score from the previous length.

SWOLF is an abbreviation for Swim-Golf, a measure of swimming efficiency. The score is obtained by adding the strokes per length to the total time of the length. For example, if it takes ten strokes and thirty seconds to swim a pool length, the SWOLF score is 40. Just like golf, a lower SWOLF score is better.

Since:

API Level 1.2.2

Supported Devices:

[View devices]
Returns:

Lang.Number
var timerState as Activity.TimerState or Null
The recording timer state.

The timer state ranges from 0-3. A value of 0 indicates that the timer is off and there is no active recording, while a value of 3 indicates timer is on and there is an active recording.

Since:

API Level 2.1.0

Returns:

Activity.TimerState — A TIMER_STATE_* value
var timerTime as Lang.Number or Null
The current Timer value in milliseconds (ms).

Since:

API Level 1.0.0

Returns:

Lang.Number
var totalAscent as Lang.Number or Null
The total ascent during the current activity in meters (m).

Since:

API Level 1.0.0

Returns:

Lang.Float
var totalDescent as Lang.Number or Null
The total descent during the current activity in meters (m).

Since:

API Level 1.0.0

Returns:

Lang.Float
var track as Lang.Float or Null
The current track in radians.

Track is the direction of travel in radians based on GPS movement. If supported by the device, this provides compass orientation when stopped.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var trainingEffect as Lang.Float or Null
The Training Effect score of the current activity.

Training Effect is a score developed by FirstBeat, which indicates an activity's level of effect on aerobic fitness. Scores range from 1.0 (easy) to 5.0 (overreaching).

Since:

API Level 1.2.0

See Also:

Training Effect
Supported Devices:

[View devices]
Returns:

Lang.Float




Module: Toybox.ActivityMonitor
Overview
The ActivityMonitor module contains the interface for Activity Monitoring data.

Example:

Shows the use of HeartRateIterator, HeartRateSample, and Info
using Toybox.ActivityMonitor;
using Toybox.System;

// get a HeartRateIterator object; oldest sample first
var hrIterator = ActivityMonitor.getHeartRateHistory(null, false);
var previous = hrIterator.next();                                   // get the previous HR
var lastSampleTime = null;                                          // get the last

while (true) {
    var sample = hrIterator.next();
    if (null != sample) {                                           // null check
        if (sample.heartRate != ActivityMonitor.INVALID_HR_SAMPLE   // check for invalid samples
            && previous.heartRate
            != ActivityMonitor.INVALID_HR_SAMPLE) {
                lastSampleTime = sample.when;
                System.println("Previous: " + previous.heartRate);  // print the previous sample
                System.println("Sample: " + sample.heartRate);      // print the current sample
        }
    }
}

// get ActivityMonitor info
var info = ActivityMonitor.getInfo();

var steps = info.steps;
var calories = info.calories;

System.println("You have taken: " + steps +
               " steps and burned: " + calories + " calories!");
Since:

API Level 1.0.0

Supported Devices:

[View devices]
Classes Under Namespace
Classes: ActiveMinutes, HeartRateIterator, HeartRateSample, History, Info

Constant Summary
Constant Variables
Type	Name	Value	Since	Description
Type	INVALID_HR_SAMPLE	255	
API Level 1.2.2

Indicates that the given heart rate sample is invalid.

Type	MOVE_BAR_LEVEL_MAX	5	
API Level 1.0.0

The maximum level of the move bar

Type	MOVE_BAR_LEVEL_MIN	0	
API Level 1.0.0

The minimum level of the move bar

Instance Method Summary
collapse
getHeartRateHistory(period as Time.Duration or Lang.Number or Null, newestFirst as Lang.Boolean) as ActivityMonitor.HeartRateIterator
Get the heart rate history for the given period, up to the last power cycle.
getHistory() as Lang.Array<ActivityMonitor.History>
Get an Array of ActivityMonitor.History objects.
getInfo() as ActivityMonitor.Info
Get the current ActivityMonitor.Info.
Instance Method Details
getHeartRateHistory(period as Time.Duration or Lang.Number or Null, newestFirst as Lang.Boolean) as ActivityMonitor.HeartRateIterator
Get the heart rate history for the given period, up to the last power cycle.

This function always returns the most recent heart rate samples. The time between each HeartRateSample in the iterator may be device dependent.

Parameters:

period — (Time.Duration, Lang.Number) — The period of time from which to retrieve heart rate samples
If period is null, the entire available history is retrieved
If period is a Duration, then the history for the given Duration is retrieved
If period is a Number, then the last Number entries are retrieved
newestFirst — (Lang.Boolean) — The order in which to retrieve heart rate samples
true to get the samples newest first
false to get the samples oldest first
Supported Devices:

[View devices]
Returns:

ActivityMonitor.HeartRateIterator — An iterator for the heart rate history for the given period
Since:

API Level 1.2.1

getHistory() as Lang.Array<ActivityMonitor.History>
Get an Array of ActivityMonitor.History objects

Returns:

Lang.Array — An Array of ActivityMonitor.History objects.
The Array will be a maximum of 7 objects
The objects will be inserted most recent first
Since:

API Level 1.0.0

getInfo() as ActivityMonitor.Info
Get the current ActivityMonitor.Info

Returns:

ActivityMonitor.Info — An Info object with the current information.
Since:

API Level 1.0.0


Class: Toybox.ActivityMonitor.ActiveMinutes
Inherits:
Toybox.Lang.Objectshow all
Overview
A class representing the active minutes recorded by the device.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Instance Member Summary
collapse
moderate as Lang.Number
The total number of moderate activity minutes recorded by the device.
total as Lang.Number
The total number of active minutes recorded by the device.
vigorous as Lang.Number
The total number of vigorous activity minutes recorded by the device.
Instance Attribute Details
var moderate as Lang.Number
The total number of moderate activity minutes recorded by the device.

Since:

API Level 2.1.0

Returns:

Lang.Number
var total as Lang.Number
The total number of active minutes recorded by the device.

This value is equal to the total number of moderate minutes plus twice the total number of vigorous minutes.

Since:

API Level 2.1.0

Returns:

Lang.Number
var vigorous as Lang.Number
The total number of vigorous activity minutes recorded by the device.

Since:

API Level 2.1.0

Returns:

Lang.Number


Class: Toybox.ActivityMonitor.HeartRateIterator
Inherits:
Toybox.Lang.Objectshow all
Overview
A class containing heart rate data for a given period of time.

Since:

API Level 1.2.2

Supported Devices:

[View devices]
Instance Method Summary
collapse
getMax() as Lang.Number or Null
Get the maximum heart rate contained in this iterator.
getMin() as Lang.Number or Null
Get the minimum heart rate contained in this iterator.
next() as ActivityMonitor.HeartRateSample or Null
Get the next entry in the iterator.
Instance Method Details
getMax() as Lang.Number or Null
Get the maximum heart rate contained in this iterator.

Returns:

Lang.Number — The maximum heart rate in beats per minute (bpm)
Since:

API Level 1.2.2

getMin() as Lang.Number or Null
Get the minimum heart rate contained in this iterator.

Returns:

Lang.Number — The minimum heart rate (bpm)
Since:

API Level 1.2.2

next() as ActivityMonitor.HeartRateSample or Null
Get the next entry in the iterator.

This must be called to get the initial data from the iterator.

Returns:

ActivityMonitor.HeartRateSample — The next HeartRateSample, or null if there are no more samples
Since:

API Level 1.2.2

Class: Toybox.ActivityMonitor.HeartRateSample
Inherits:
Toybox.Lang.Objectshow all
Overview
A class containing heart rate data at a given time.

Since:

API Level 1.2.2

Supported Devices:

[View devices]
Instance Member Summary
collapse
heartRate as Lang.Number or Null
Heart rate in beats per minute (bpm).
when as Time.Moment or Null
The time of the heart rate sample.
Instance Attribute Details
var heartRate as Lang.Number or Null
Heart rate in beats per minute (bpm).

Before using heart rate information, check for INVALID_HR_SAMPLE to be sure data is available.

Since:

API Level 1.2.2

Returns:

Lang.Number
var when as Time.Moment or Null
The time of the heart rate sample

Since:

API Level 1.2.2

Returns:

Time.Moment


Class: Toybox.ActivityMonitor.History
Inherits:
Toybox.Lang.Objectshow all
Overview
A class containing information about the user's activity history.

The fields in this class may return null. It is recommended to null check a value before using it. If the value is not available, an error indicating that the symbol was not found will be thrown.

Since:

API Level 1.0.0

Instance Member Summary
collapse
activeMinutes as ActivityMonitor.ActiveMinutes or Null
Number of active minutes.
calories as Lang.Number or Null
The calories for the day in kilocalories (kCal).
distance as Lang.Number or Null
The distance for the day in centimeters (cm).
floorsClimbed as Lang.Number or Null
The number of floors climbed for the day.
floorsClimbedGoal as Lang.Number or Null
Floors climbed goal for the day.
floorsDescended as Lang.Number or Null
The number of floors descended for the day.
pushDistance as Lang.Number or Null
The wheelchair push distance for the day in centimeters (cm).
pushGoal as Lang.Number or Null
The wheelchair push goal for the day in number of pushes.
pushes as Lang.Number or Null
Wheelchair push count for the day in number of pushes.
startOfDay as Time.Moment or Null
A Moment object representing the start time of the day recorded by this History object.
stepGoal as Lang.Number or Null
The step goal for the day in number of steps.
steps as Lang.Number or Null
The step count for the day in number of steps.
Instance Attribute Details
var activeMinutes as ActivityMonitor.ActiveMinutes or Null
Number of active minutes.

Contains the moderate, vigorous, and total accumulated minutes for the day.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

ActivityMonitor.ActiveMinutes
var calories as Lang.Number or Null
The calories for the day in kilocalories (kCal).

Since:

API Level 1.0.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var distance as Lang.Number or Null
The distance for the day in centimeters (cm).

Since:

API Level 1.0.0

Returns:

Lang.Number
var floorsClimbed as Lang.Number or Null
The number of floors climbed for the day.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var floorsClimbedGoal as Lang.Number or Null
Floors climbed goal for the day.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var floorsDescended as Lang.Number or Null
The number of floors descended for the day.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var pushDistance as Lang.Number or Null
The wheelchair push distance for the day in centimeters (cm).

Since:

API Level 4.2.3

Supported Devices:

[View devices]
Returns:

Lang.Number
var pushGoal as Lang.Number or Null
The wheelchair push goal for the day in number of pushes.

Since:

API Level 4.2.3

Supported Devices:

[View devices]
Returns:

Lang.Number
var pushes as Lang.Number or Null
Wheelchair push count for the day in number of pushes.

Since:

API Level 4.2.3

Supported Devices:

[View devices]
Returns:

Lang.Number
var startOfDay as Time.Moment or Null
A Moment object representing the start time of the day recorded by this History object

Since:

API Level 1.0.0

Returns:

Time.Moment
var stepGoal as Lang.Number or Null
The step goal for the day in number of steps.

Since:

API Level 1.0.0

Returns:

Lang.Number
var steps as Lang.Number or Null
The step count for the day in number of steps.

Since:

API Level 1.0.0

Returns:

Lang.Number


Class: Toybox.ActivityMonitor.Info
Inherits:
Toybox.Lang.Objectshow all
Overview
The ActivityMonitor.Info contains information about the user's current activity status.

The fields in this class may return null. It is recommended to null check a value before using it. If the value is not available, an error indicating that the symbol was not found will be thrown.

Note:
Unless otherwise indicated, Info data is calculated for the current day starting at midnight as provided by the device.

Since:

API Level 1.0.0

Instance Member Summary
collapse
activeMinutesDay as ActivityMonitor.ActiveMinutes or Null
The number of active minutes for the current day.
activeMinutesWeek as ActivityMonitor.ActiveMinutes or Null
The number of active minutes for the current week.
activeMinutesWeekGoal as Lang.Number or Null
The value of the active minutes goal for the current week.
calories as Lang.Number or Null
The calories burned so far for the current day in kilocalories (kCal).
distance as Lang.Number or Null
The distance since midnight for the current day in centimeters (cm).
floorsClimbed as Lang.Number or Null
The number of floors climbed for the current day.
floorsClimbedGoal as Lang.Number or Null
The current floor climb goal.
floorsDescended as Lang.Number or Null
The number of floors descended for the current day.
isSleepMode as Lang.Boolean or Null
deprecated
Determine whether the device is in sleep mode.
metersClimbed as Lang.Float or Null
The vertical distance of floors climbed in meters (m).
metersDescended as Lang.Float or Null
The vertical distance of floors descended in meters (m).
moveBarLevel as Lang.Number or Null
The current level of the move bar between MOVE_BAR_LEVEL_MIN and MOVE_BAR_LEVEL_MAX.
pushDistance as Lang.Number or Null
The wheelchair push distance for the day in centimeters (cm).
pushGoal as Lang.Number or Null
The wheelchair push goal for the day in number of pushes.
pushes as Lang.Number or Null
Wheelchair push count for the day in number of pushes.
respirationRate as Lang.Number or Null
Current respiration rate for the user, in breaths per minute Value may be null.
stepGoal as Lang.Number or Null
The step goal for the current day in number of steps.
steps as Lang.Number or Null
The step count since midnight for the current day in number of steps.
stressScore as Lang.Number or Null
The current stress score The stress score calculated using a rolling average of the last 30 seconds of stress level readings.
timeToRecovery as Lang.Number or Null
Time to recovery from the last activity, in hours Value may be null.
Instance Attribute Details
var activeMinutesDay as ActivityMonitor.ActiveMinutes or Null
The number of active minutes for the current day.

Contains the moderate, vigorous, and total accumulated minutes for the day. Value may be null.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

ActivityMonitor.ActiveMinutes
var activeMinutesWeek as ActivityMonitor.ActiveMinutes or Null
The number of active minutes for the current week.

Contains the moderate, vigorous, and total accumulated minutes for the week. Value may be null.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

ActivityMonitor.ActiveMinutes
var activeMinutesWeekGoal as Lang.Number or Null
The value of the active minutes goal for the current week. Value may be null.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var calories as Lang.Number or Null
The calories burned so far for the current day in kilocalories (kCal). Value may be null.

Since:

API Level 1.0.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var distance as Lang.Number or Null
The distance since midnight for the current day in centimeters (cm). Value may be null.

Since:

API Level 1.0.0

Returns:

Lang.Number
var floorsClimbed as Lang.Number or Null
The number of floors climbed for the current day. Value may be null.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var floorsClimbedGoal as Lang.Number or Null
The current floor climb goal. Value may be null.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var floorsDescended as Lang.Number or Null
The number of floors descended for the current day. Value may be null.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var isSleepMode as Lang.Boolean or Null
This has been deprecated This value may be removed after System 4.
Determine whether the device is in sleep mode. Value may be null.

Since:

API Level 1.0.0

Supported Devices:

[View devices]
Returns:

Lang.Boolean
var metersClimbed as Lang.Float or Null
The vertical distance of floors climbed in meters (m).

This only counts the vertical distance associated with the floors climbed metric recorded by the device. Value may be null.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var metersDescended as Lang.Float or Null
The vertical distance of floors descended in meters (m).

This only counts the vertical distance associated with the floors descended metric recorded by the device. Value may be null.

Since:

API Level 2.1.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var moveBarLevel as Lang.Number or Null
The current level of the move bar between MOVE_BAR_LEVEL_MIN and MOVE_BAR_LEVEL_MAX. Value may be null.

Since:

API Level 1.0.0

Returns:

Lang.Number
var pushDistance as Lang.Number or Null
The wheelchair push distance for the day in centimeters (cm).

Since:

API Level 4.2.3

Supported Devices:

[View devices]
Returns:

Lang.Number
var pushGoal as Lang.Number or Null
The wheelchair push goal for the day in number of pushes.

Since:

API Level 4.2.3

Supported Devices:

[View devices]
Returns:

Lang.Number
var pushes as Lang.Number or Null
Wheelchair push count for the day in number of pushes.

Since:

API Level 4.2.3

Supported Devices:

[View devices]
Returns:

Lang.Number
var respirationRate as Lang.Number or Null
Current respiration rate for the user, in breaths per minute Value may be null.

Since:

API Level 3.3.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var stepGoal as Lang.Number or Null
The step goal for the current day in number of steps. Value may be null.

Since:

API Level 1.0.0

Returns:

Lang.Number
var steps as Lang.Number or Null
The step count since midnight for the current day in number of steps. Value may be null.

Since:

API Level 1.0.0

Returns:

Lang.Number
var stressScore as Lang.Number or Null
The current stress score

The stress score calculated using a rolling average of the last 30 seconds of stress level readings. Value may be null.

Since:

API Level 5.0.0

Supported Devices:

[View devices]
Returns:

Lang.Number — Values correspond to the following scale
0–25: Resting state
26–50: Low stress
51–75: Medium stress
76–100: High stress
var timeToRecovery as Lang.Number or Null
Time to recovery from the last activity, in hours Value may be null.

Since:

API Level 3.3.0

Supported Devices:

[View devices]
Returns:

Lang.Number


Module: Toybox.ActivityRecording
Overview
The Activity Recording module will allow Apps to access the FIT file recording capabilities of the device.

Apps can use this module to allow the user to start and stop recordings, create laps, and save recorded data. SPORT_* and SUB_SPORT_* constants are provided as enums.

The SPORT_* defines the type of activity, but is not guaranteed to change device behavior. This may cause different algorithms to be applied to the sensor data. For example, a device that does not natively support SPORT_MULTISPORT recording will not gain SPORT_MULTISPORT transition features. However, the FIT file can be defined as SPORT_MULTISPORT and MULTI_SPORT algorithms may be applied to the sensor data.

SUB_SPORT_* allows for clarification of sport when recording.

See Also:
Toybox.FitContributor
Example:

using Toybox.ActivityRecording;
using Toybox.WatchUi
var session = null;                                             // set up session variable

// use the select Start/Stop or touch for recording
function onSelect() {
   if (Toybox has :ActivityRecording) {                         // check device for activity recording
       if ((session == null) || (session.isRecording() == false)) {
           session = ActivityRecording.createSession({          // set up recording session
                 :name=>"Generic",                              // set session name
                 :sport=>Activity.SPORT_GENERIC,                // set sport type
                 :subSport=>Activity.SUB_SPORT_GENERIC          // set sub sport type
           });
           session.start();                                     // call start session
       }
       else if ((session != null) && session.isRecording()) {
           session.stop();                                      // stop the session
           session.save();                                      // save the session
           session = null;                                      // set session control variable to null
       }
   }
   return true;                                                 // return true for onSelect function
}
Since:

API Level 1.0.0

App Types:

Background
Glance
Watch App
Supported Devices:

[View devices]
Requires Permission:

Fit
Classes Under Namespace
Classes: Session

Constant Summary
Sport1
This has been deprecated This enum may be removed after System 8.
Since:

API Level 1.0.0

See Also:

Activity::SPORT_*
Name	Value	Since	Description	See Also
SPORT_GENERIC	0	
API Level 1.0.0

Sport used for sports not on the list

SPORT_RUNNING	1	
API Level 1.0.0

Sport used for running

SPORT_CYCLING	2	
API Level 1.0.0

Sport used for multi-sport transitions

SPORT_TRANSITION	3	
API Level 1.0.0

SPORT_FITNESS_EQUIPMENT	4	
API Level 1.0.0

Sport used for ANT enabled exercise equipment

SPORT_SWIMMING	5	
API Level 1.0.0

Sport used for swimming

SPORT_BASKETBALL	6	
API Level 1.0.0

Sport used for basketball

SPORT_SOCCER	7	
API Level 1.0.0

Sport used for soccer

SPORT_TENNIS	8	
API Level 1.0.0

Sport used for Tennis

SPORT_AMERICAN_FOOTBALL	9	
API Level 1.0.0

Sport used for American football

SPORT_TRAINING	10	
API Level 1.0.0

Sport used for activities such as strength training, cardio, etc

SPORT_WALKING	11	
API Level 1.0.0

Sport used for walking

SPORT_CROSS_COUNTRY_SKIING	12	
API Level 1.0.0

Sport used for cross-country skiing

SPORT_ALPINE_SKIING	13	
API Level 1.0.0

Sport used for alpine skiing

SPORT_SNOWBOARDING	14	
API Level 1.0.0

Sport used for snowboarding

SPORT_ROWING	15	
API Level 1.0.0

Sport used for rowing

SPORT_MOUNTAINEERING	16	
API Level 1.0.0

Sport used for mountaineering

SPORT_HIKING	17	
API Level 1.0.0

Sport used for hiking

SPORT_MULTISPORT	18	
API Level 1.0.0

Sport used for multi-sport events

SPORT_PADDLING	19	
API Level 1.0.0

Sport used for paddling

Sport2
This has been deprecated This enum may be removed after System 8.
Since:

API Level 1.0.0

See Also:

Activity::SPORT_*
Name	Value	Since	Description	See Also
SPORT_FLYING	20	
API Level 3.0.10

Sport used for flying

SPORT_E_BIKING	21	
API Level 3.0.10

Sport used for riding an e-bike

SPORT_MOTORCYCLING	22	
API Level 3.0.10

Sport used for motorcycling

SPORT_BOATING	23	
API Level 3.0.10

Sport used for boating

SPORT_DRIVING	24	
API Level 3.0.10

Sport used for driving

SPORT_GOLF	25	
API Level 3.0.10

Sport used for golfing

SPORT_HANG_GLIDING	26	
API Level 3.0.10

Sport used for hang gliding

SPORT_HORSEBACK_RIDING	27	
API Level 3.0.10

Sport used for horseback riding

SPORT_HUNTING	28	
API Level 3.0.10

Sport used for hunting

SPORT_FISHING	29	
API Level 3.0.10

Sport used for fishing

SPORT_INLINE_SKATING	30	
API Level 3.0.10

Sport used for inline skating

SPORT_ROCK_CLIMBING	31	
API Level 3.0.10

Sport used for rock climbing

SPORT_SAILING	32	
API Level 3.0.10

Sport used for sailing

SPORT_ICE_SKATING	33	
API Level 3.0.10

Sport used for ice skating

SPORT_SKY_DIVING	34	
API Level 3.0.10

Sport used for sky diving

SPORT_SNOWSHOEING	35	
API Level 3.0.10

Sport used for showshoeing

SPORT_SNOWMOBILING	36	
API Level 3.0.10

Sport used for snowmobiling

SPORT_STAND_UP_PADDLEBOARDING	37	
API Level 3.0.10

Sport used for paddle boarding

SPORT_SURFING	38	
API Level 3.0.10

Sport used for surfing

SPORT_WAKEBOARDING	39	
API Level 3.0.10

Sport used for wakeboarding

SPORT_WATER_SKIING	40	
API Level 3.0.10

Sport used for water skiing

SPORT_KAYAKING	41	
API Level 3.0.10

Sport used for kayaking

SPORT_RAFTING	42	
API Level 3.0.10

Sport used for rafting

SPORT_WINDSURFING	43	
API Level 3.0.10

Sport used for windsurfing

SPORT_KITESURFING	44	
API Level 3.0.10

Sport used for kite surfing

SPORT_TACTICAL	45	
API Level 3.0.10

Sport used for tactical

SPORT_JUMPMASTER	46	
API Level 3.0.10

Sport used for jumpmaster

SPORT_BOXING	47	
API Level 3.0.10

Sport used for boxing

SPORT_FLOOR_CLIMBING	48	
API Level 3.0.10

Sport used for climbing

SPORT_BASEBALL	49	
API Level 3.0.10

Sport used for baseball

SPORT_SOFTBALL_FAST_PITCH	50	
API Level 3.0.10

Sport used for fast pitch softball

SPORT_SOFTBALL_SLOW_PITCH	51	
API Level 3.0.10

Sport used for slow pitch softball

SPORT_SHOOTING	56	
API Level 3.0.10

Sport used for shooting

SPORT_AUTO_RACING	57	
API Level 3.0.10

Sport used for auto racing

SubSport
This has been deprecated This enum may be removed after System 8.
Since:

API Level 1.0.0

See Also:

Activity::SUB_SPORT_*
Name	Value	Since	Description	See Also
SUB_SPORT_GENERIC	0	
API Level 1.0.0

Sub-sport used if no other sub-sport is applicable

SUB_SPORT_TREADMILL	1	
API Level 1.0.0

Sub-sport for Running and Fitness Equipment

SUB_SPORT_STREET	2	
API Level 1.0.0

Sub-sport for Running

SUB_SPORT_TRAIL	3	
API Level 1.0.0

Sub-sport for Running

SUB_SPORT_TRACK	4	
API Level 1.0.0

Sub-sport for Running

SUB_SPORT_SPIN	5	
API Level 1.0.0

Sub-sport for Cycling

SUB_SPORT_INDOOR_CYCLING	6	
API Level 1.0.0

Sub-sport for Cycling and Fitness Equipment

SUB_SPORT_ROAD	7	
API Level 1.0.0

Sub-sport for Cycling

SUB_SPORT_MOUNTAIN	8	
API Level 1.0.0

Sub-sport for Cycling

SUB_SPORT_DOWNHILL	9	
API Level 1.0.0

Sub-sport for Cycling

SUB_SPORT_RECUMBENT	10	
API Level 1.0.0

Sub-sport for Cycling

SUB_SPORT_CYCLOCROSS	11	
API Level 1.0.0

Sub-sport for Cycling

SUB_SPORT_HAND_CYCLING	12	
API Level 1.0.0

Sub-sport for Cycling

SUB_SPORT_TRACK_CYCLING	13	
API Level 1.0.0

Sub-sport for Cycling

SUB_SPORT_INDOOR_ROWING	14	
API Level 1.0.0

Sub-sport for Rowing and Fitness Equipment

SUB_SPORT_ELLIPTICAL	15	
API Level 1.0.0

Sub-sport for Fitness Equipment

SUB_SPORT_STAIR_CLIMBING	16	
API Level 1.0.0

Sub-sport for Fitness Equipment

SUB_SPORT_LAP_SWIMMING	17	
API Level 1.0.0

Sub-sport for Swimming

SUB_SPORT_OPEN_WATER	18	
API Level 1.0.0

Sub-sport for Swimming

SUB_SPORT_FLEXIBILITY_TRAINING	19	
API Level 1.0.0

Sub-sport for Training

SUB_SPORT_STRENGTH_TRAINING	20	
API Level 1.0.0

Sub-sport for Training

SUB_SPORT_WARM_UP	21	
API Level 1.0.0

Sub-sport for Activity Warm-up

SUB_SPORT_MATCH	22	
API Level 1.0.0

Sub-sport for Sports with Matches (e.g. Tennis)

SUB_SPORT_EXERCISE	23	
API Level 1.0.0

Sub-sport for Exercise

SUB_SPORT_CHALLENGE	24	
API Level 1.0.0

Sub-sport for a Sport Challenge

SUB_SPORT_INDOOR_SKIING	25	
API Level 1.0.0

Sub-sport for Fitness Equipment

SUB_SPORT_CARDIO_TRAINING	26	
API Level 1.0.0

Sub-sport for Training

TimerEventType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
TIMER_EVENT_START	0	
API Level 3.0.10

Timer start event

TIMER_EVENT_STOP	1	
API Level 3.0.10

Timer stop event

TIMER_EVENT_PAUSE	2	
API Level 3.0.10

Timer pause event

TIMER_EVENT_RESUME	3	
API Level 3.0.10

Timer resume event

TIMER_EVENT_LAP	4	
API Level 3.0.10

Timer lap event

TIMER_EVENT_RESET	5	
API Level 3.0.10

Timer reset

TIMER_EVENT_WORKOUT_STEP_COMPLETE	6	
API Level 3.0.10

Workout step complete

TIMER_EVENT_NEXT_MULTISPORT_LEG	7	
API Level 3.0.10

Multisport leg started

Typedef Summary
collapse
Sport as ActivityRecording.Sport1 or ActivityRecording.Sport2
Instance Method Summary
collapse
createSession(options as { :sport as ActivityRecording.Sport or Activity.Sport, :subSport as ActivityRecording.SubSport or Activity.SubSport, :name as Lang.String, :poolLength as Lang.Float, :sensorLogger as SensorLogging.SensorLogger, :autoLap as { :type as Lang.Symbol, :entry as [ Position.Location, Position.Location ], :exit as [ Position.Location, Position.Location ] } }) as ActivityRecording.Session
Create a Session object with options determined by the caller.
Typedef Details
Sport as ActivityRecording.Sport1 or ActivityRecording.Sport2
Since:

API Level 1.0.0

Instance Method Details
createSession(options as { :sport as ActivityRecording.Sport or Activity.Sport, :subSport as ActivityRecording.SubSport or Activity.SubSport, :name as Lang.String, :poolLength as Lang.Float, :sensorLogger as SensorLogging.SensorLogger, :autoLap as { :type as Lang.Symbol, :entry as [ Position.Location, Position.Location ], :exit as [ Position.Location, Position.Location ] } }) as ActivityRecording.Session
Create a Session object with options determined by the caller.

Only one Session object is allowed to exist at a time. If there is an existing object that has not been closed using the save() or discard() methods, this method will return that object instead of creating a new one. On some products running the 1.x virtual machine, creating a Session object requires a large memory allocation. To free this memory, the Session must first be successfully saved or discarded, and then app references to the Session object should be set to null.

Parameters:

options — (Lang.Dictionary) — A Dictionary containing session creation options.
:sport — (ActivityRecording.Sport, Activity.Sport) — The primary sport being recorded (SPORT_GENERIC by default).
:subSport — (ActivityRecording.SubSport, Activity.SubSport) — The sport subcategory being recorded (SUB_SPORT_GENERIC by default).
:name — (Lang.String) — Required. This is the name that will be associated with the sport being recorded. The suggested maximum length of the name is 15 characters (some devices support longer names).
:poolLength — (Lang.Float) — This is the length of the pool in meters for this activity. If this session object is configured with :sport=>SPORT_SWIMMING and :subSport=>SUB_SPORT_LAP_SWIMMING, this option is required to configure the system in this mode. If it is not provided, activity data may have undefined behavior. For all other sport modes, this option is ignored.
:autoLap — (Lang.Dictionary) — A dictionary containing auto-lap detection options. If present, this dictionary must have a :type key; If the value of :type is :lines, the :entry and :exit keys are required. The values associated with :entry and :exit describe the endpoints of the auto lap entry and exit line segments, each being defined as an Array of two Location objects. (added in 3.0.10)
:sensorLogger — (SensorLogging.SensorLogger) — The SensorLogger to use to record this session.
Example:

Create a Session with auto lap detection using entry/exit lines
using Toybox.ActivityRecording;
function createSession() {
    var session = ActivityRecording.createSession({  // set up recording session
        :name=>"Race",                               // set session name
        :sport=>Activity.SPORT_GENERIC,              // set sport type
        :subSport=>Activity.SUB_SPORT_GENERIC,       // set sub sport type
        :autoLap=>{                                  // auto lap configuration
            :type=>:lines,                           // auto lap using entry/exit lines
            :exit=>[loc1, loc2],                     // set exit of auto lap staging box (typically the finish line)
            :entry=>[loc3, loc4],                    // set entrance of auto lap staging box (typically before the finish line)
            :autoStart=>true                         // auto start using the entry/exit lines
        }
    });
    return session;
}
Returns:

ActivityRecording.Session — A new Session object, or the existing Session object if a Session is active and has not been saved or discarded.
Since:

API Level 1.0.0

Throws:

(Lang.InvalidOptionsException) — Thrown if required options are missing or provided options are invalid in :autoLap options dictionary


Class: Toybox.ActivityRecording.Session
Inherits:
Toybox.Lang.Objectshow all
Overview
Session objects control the FIT recording state machine.

Example:

Format for setting up a Session object
using Toybox.ActivityRecording;
var session = ActivityRecording.createSession({  // set up recording session
    :name=>"Generic",                            // set session name
    :sport=>Activity.SPORT_GENERIC,              // set sport type
    :subSport=>Activity.SUB_SPORT_GENERIC        // set sub sport type
});
Since:

API Level 1.0.0

Instance Method Summary
collapse
addLap() as Lang.Boolean
Add a lap to the current recording.
createField(name as Lang.String, fieldId as Lang.Number, type as FitContributor.DataType, options as { :count as Lang.Number, :mesgType as Lang.Number, :units as Lang.String, :nativeNum as Lang.Number }) as FitContributor.Field
Create a new Field.
discard() as Lang.Boolean
Complete the Session by discarding the recorded data.
isRecording() as Lang.Boolean
Check if recording is active for this Session.
save() as Lang.Boolean
Complete the session by storing the FIT file on the file system.
setTimerEventListener(listener as Lang.Method(eventType as ActivityRecording.TimerEventType, eventData as Lang.Dictionary) as Void) as Void
Set the listener for Session timer events The listener method is called whenever a new timer event occurs.
start() as Lang.Boolean
Begin recording a FIT file on the system.
stop() as Lang.Boolean
Stop recording a FIT file on the system.
Instance Method Details
addLap() as Lang.Boolean
Add a lap to the current recording.

Returns:

Lang.Boolean — true if a lap was successfully created, otherwise false
Since:

API Level 1.0.0

createField(name as Lang.String, fieldId as Lang.Number, type as FitContributor.DataType, options as { :count as Lang.Number, :mesgType as Lang.Number, :units as Lang.String, :nativeNum as Lang.Number }) as FitContributor.Field
Create a new Field.

Field objects allow developers to store information in FIT developer fields. This information can be displayed in Garmin Connect as a per-second graph, as lap information, or as workout summary information.

Parameters:

name — (Lang.String) — The name of the Field as a String
The maximum length may vary between products
At least 64 bytes are available
fieldId — (Lang.Number) — The unique Field Identifier for the Field
type — (FitContributor.DataType) — The type definition for the Field from the DATA_TYPE_* enumerator in the FitContributor module
options — (Lang.Dictionary) — Optional parameters that can be specified for Field creation
:count — (Lang.Number) — The number of elements to add to the Field if it is an Array
This is also the maximum combined size of strings plus null terminators if the type is DATA_TYPE_STRING (Default 1)
Apps are limited to 256 total bytes per message
Data fields are limited to 32 bytes per message
Messages larger than the limit will result in a "New Field out of memory for FIT data" error.
:mesgType — (Lang.Number) — The message type that this Field should be added to
Defaults to MESG_TYPE_RECORD if not provided
If mesgType == MESG_TYPE_RECORD, DATA_TYPE_STRING cannot be used as the Field type.
:units — (Lang.String) — The display units as a String
This should use the current device language
The maximum length may vary between products
At least 16 bytes are available
:nativeNum — (Lang.Number) — If this Field can be treated equivalently to a Field that is included in the FIT SDK use this to indicate the Field Number that is specified by the FIT Profile.
Returns:

FitContributor.Field — The resulting Field object
See Also:

The Message type descriptions can be found in Profile.xlsx included in the FIT SDK
FitContributor.Field
Core Topics - Activity Recording
Since:

API Level 1.3.0

discard() as Lang.Boolean
Complete the Session by discarding the recorded data.

Returns:

Lang.Boolean — true if the Session was successfully discarded, otherwise false
Since:

API Level 1.0.0

isRecording() as Lang.Boolean
Check if recording is active for this Session.

Returns:

Lang.Boolean — true if recording is active, otherwise false
Since:

API Level 1.0.0

save() as Lang.Boolean
Complete the session by storing the FIT file on the file system.

Returns:

Lang.Boolean — true if the session was successfully saved, otherwise false
Since:

API Level 1.0.0

setTimerEventListener(listener as Lang.Method(eventType as ActivityRecording.TimerEventType, eventData as Lang.Dictionary) as Void) as Void
Set the listener for Session timer events

The listener method is called whenever a new timer event occurs.

The keys in the Dictionary passed to the listener callback depend on the the value of the eventType parameter.

Parameters:

listener — (Lang.Method) — A reference to a callback which must accept two arguments.
eventType: A TIMER_EVENT_* enum that describes the event that occurred.
eventData: A Dictionary containing data relevant to the timer event or null. If eventType is TIMER_EVENT_LAP, the following are provided if available:
:elapsedDistance Float (meters)
:averageSpeed Float (meters/second)
:maxSpeed Float (meters/second)
:startTime Moment (Moment)
:elapsedTime Number (milliseconds)
:timerTime Number (milliseconds)
Supported Devices:

[View devices]
Since:

API Level 3.0.10

start() as Lang.Boolean
Begin recording a FIT file on the system.

Returns:

Lang.Boolean — true if recording was successfully started, otherwise false
Since:

API Level 1.0.0

stop() as Lang.Boolean
Stop recording a FIT file on the system.

Returns:

Lang.Boolean — true if recording was successfully stopped, otherwise false
Since:

API Level 1.0.0


Module: Toybox.Application
Overview
The Application module contains the base class for every Connect IQ app.

The Application Module includes the AppBase class which is responsible for controlling the app life cycle. This module also includes set and get methods to control the settings and properties values held in the Object Store and a GOAL_TYPE enum that defines the different goal types that can be triggered.

See Also:
Core Topics - Persisting Data
Since:

API Level 1.0.0

Modules Under Namespace
Modules: Application.Properties, Application.Storage, Application.WatchFaceConfig

Classes Under Namespace
Classes: AppBase, AudioContentProviderApp, ObjectStoreAccessException

Constant Summary
GoalType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
GOAL_TYPE_STEPS	0	
API Level 1.3.0

GOAL_TYPE_FLOORS_CLIMBED	1	
API Level 1.3.0

GOAL_TYPE_ACTIVE_MINUTES	2	
API Level 1.3.0

Typedef Summary
collapse
PersistableType as Application.PropertyValueType
PropertyKeyType as Lang.Number or Lang.Float or Lang.Long or Lang.Double or Lang.String or Lang.Boolean or Lang.Char
PropertyValueType as Application.PropertyKeyType or Lang.Array<Application.PropertyValueType> or Lang.Dictionary<Application.PropertyKeyType, Application.PropertyValueType> or WatchUi.BitmapResource or Null
ResourceReferenceType as Graphics.BitmapReference or Graphics.FontReference
ResourceType as Lang.Array or Lang.Dictionary or Lang.String or WatchUi.AnimationResource or WatchUi.BitmapResource or WatchUi.FontResource
Instance Method Summary
collapse
getApp() as Application.AppBase
Retrieve the AppBase Object that is currently running.
loadResource(resource as Lang.ResourceId) as Application.ResourceType or Application.ResourceReferenceType
Load a resource from the executable.
Typedef Details
PersistableType as Application.PropertyValueType
Since:

API Level 1.0.0

PropertyKeyType as Lang.Number or Lang.Float or Lang.Long or Lang.Double or Lang.String or Lang.Boolean or Lang.Char
Since:

API Level 1.0.0

PropertyValueType as Application.PropertyKeyType or Lang.Array<Application.PropertyValueType> or Lang.Dictionary<Application.PropertyKeyType, Application.PropertyValueType> or WatchUi.BitmapResource or Null
Since:

API Level 1.0.0

ResourceReferenceType as Graphics.BitmapReference or Graphics.FontReference
Since:

API Level 1.0.0

ResourceType as Lang.Array or Lang.Dictionary or Lang.String or WatchUi.AnimationResource or WatchUi.BitmapResource or WatchUi.FontResource
Since:

API Level 1.0.0

Instance Method Details
getApp() as Application.AppBase
Retrieve the AppBase Object that is currently running.

Returns:

Application.AppBase — The currently running AppBase object
Since:

API Level 1.0.0

loadResource(resource as Lang.ResourceId) as Application.ResourceType or Application.ResourceReferenceType
Load a resource from the executable.

Note:
Toybox::Graphics::BitmapReference and Toybox::Graphics::FontReference are returned for Toybox::WatchUi::BitmapResource and Toybox::WatchUi::FontResource in CIQ 4.0.0 and later.

Parameters:

resource — (Lang.ResourceId) — An identifier for a resource defined in the project's resources.xml file
Example:

Loading a String resource
// The resources.xml file contents:
// <resources>
//     <string id="AppName">APEELingApp</string>
// </resources>
using Toybox.Application;

var banana = Application.loadResource(Rez.Strings.AppName);
Returns:

Lang.Array, Lang.Dictionary, Lang.String, WatchUi.AnimationResource, WatchUi.BitmapResource, WatchUi.FontResource, Graphics.BitmapReference, Graphics.FontReference
Since:

API Level 3.1.0




Class: Toybox.Application.AppBase
Inherits:
Toybox.Lang.Objectshow all
Overview
AppBase is the base class for an app.

All apps inherit from this class and use it's methods to manage the life cycle of an app.

Your app overrides the class to provide entry points with the following methods:

onStart()

getInitialView()

getGoalView()

getServiceDelegate()

onSettingsChanged()

onStop()


These functions are called in the following order:

onStart()

getInitialView()

onStop()

Every AppBase object has access to an object store to persist data.

Example:

Shows basic app life cycle
using Toybox.Application;
class AppLifeCycle extends Application.AppBase {
    // initialize the AppBase class
    function initialize() {
        AppBase.initialize();
    }
    // onStart() is called on application start up
    function onStart(state) {
    }
    // onStop() is called when your application is exiting
    function onStop(state) {
    }
    // Return the initial view of your application here
    function getInitialView() {
        return [new AppLifeCycleView()];
    }
}
Since:

API Level 1.0.0

Direct Known Subclasses
Application.AudioContentProviderApp

Constant Summary
GlanceTheme
Glance color themes for supported devices

Since:

API Level 4.0.0

Name	Value	Since	Description	See Also
GLANCE_THEME_DEFAULT	0	
API Level 4.0.0

GLANCE_THEME_BLUE	1	
API Level 4.0.0

GLANCE_THEME_GOLD	2	
API Level 4.0.0

GLANCE_THEME_GREEN	3	
API Level 4.0.0

GLANCE_THEME_LIGHT_BLUE	4	
API Level 4.0.0

GLANCE_THEME_RED	5	
API Level 4.0.0

GLANCE_THEME_WHITE	6	
API Level 4.0.0

GLANCE_THEME_PURPLE	7	
API Level 4.0.0

Instance Method Summary
collapse
allowTrialMessage() as Lang.Boolean
Check if application trial messages are allowed.
clearProperties() as Void
deprecated
Clear the object store for the application.
deleteProperty(key as Application.PropertyKeyType) as Void
deprecated
Delete the given key from the object store.
getGlanceTheme() as AppBase.GlanceTheme
Method to get the glance theme.
getGlanceView() as [ WatchUi.GlanceView ] or [ WatchUi.GlanceView, WatchUi.GlanceViewDelegate ] or Null
Override to provide the WatchUi.GlanceView and WatchUi.GlanceViewDelegate for the glance preview.
getGoalView(goalType as Application.GoalType) as [ WatchUi.View ] or Null
Override to provide a WatchUi.View for a goal that has triggered within a watch face.
getInitialView() as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ]
Override to provide the initial View and Input Delegate of the application.
getProperty(key as Application.PropertyKeyType) as Application.PropertyValueType
deprecated
Get the data associated with a given key from the object store.
getSensorConfigurationView(sensor as Sensor.SensorInfo) as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ]
Override to provide the pairing config View and Input Delegate of the application.
getSensorDelegate() as Sensor.SensorDelegate or Null
Override to provide the Sensor Delegate object.
getServiceDelegate() as [ System.ServiceDelegate ]
Get a ServiceDelegate to run background tasks for this app.
getSettingsView() as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ] or Null
Override to provide the settings View and Input Delegate of the application.
getSyncDelegate() as Communications.SyncDelegate or Null
Get a SyncDelegate object that communicates sync status to the system for syncing content to the device.
getTrialDaysRemaining() as Lang.Number or Null
Override to return the number of days remaining in the trial If a developer wishes to implement time-based app trials, they will need to override this function to return the number of days remaining in the trial.
isActive() as Lang.Boolean
return true if app is currently in active state, otherwise false.
isTrial() as Lang.Boolean
Check if the application is in trial mode.
loadProperties() as Void
deprecated
Load the properties for the application.
onActive(state as Lang.Dictionary or Null) as Void
Invoked when app enters active mode, i.e.
onAppInstall() as Void
The callback method that is triggered in the background when the app is installed.
onAppUpdate() as Void
The callback method that is triggered in the background when the app is updated Requires the Background permission to be enabled and your application class to carry the :background annotation.
onAuthenticationRequest() as Void
Called when an Application requests to run code on demand, during an authentication process.
onBackgroundData(data as Application.PersistableType) as Void
Handle data passed from a ServiceDelegate to the application.
onDeviceSettingChanged(aSymbol as Lang.Symbol, aValue as Lang.Object) as Void
A device setting has changed This method is called when a device setting value is changed.
onDisplayModeChanged() as Void
The display mode has changed, only available in AMOLED or LCD screen products.
onEnhancedReadabilityModeChanged() as Void
The font mode has changed This method is called when the system changes to or from Enhanced Readability Mode.
onInactive(state as Lang.Dictionary or Null) as Void
Invoked when app enters inactive mode, i.e.
onNightModeChanged() as Void
The display mode has changed This method is called when the system changes to or from night mode.
onSettingsChanged() as Void
Called when the application settings have been changed by Garmin Connect Mobile (GCM) while while the app is running.
onStart(state as Lang.Dictionary or Null) as Void
Method called at startup to allow handling of app initialization.
onStop(state as Lang.Dictionary or Null) as Void
Override to handle application cleanup upon termination.
onStorageChanged() as Void
Called when Application storage is changed by the other running instance, of the app i.e Background Process while the CIQ app is running or vice-versa.
onValidateProperty(key as Lang.String, value as Application.PropertyValueType) as Lang.Boolean or Lang.String
Called when a property needs to be validated by the application.
openAppSettingsEditor() as Void
Function to open application settings editor.
saveProperties() as Void
deprecated
Save the properties for the application.
setProperty(key as Application.PropertyKeyType, value as Application.PropertyValueType) as Void
deprecated
Store the given data in the object.
validateProperty(key as Application.PropertyKeyType, value as Application.PropertyValueType) as Void
Validate a property being stored.
Instance Method Details
allowTrialMessage() as Lang.Boolean
Check if application trial messages are allowed.

Returns true if the application should allow the product to push unlock instruction pages for locked apps. Returns true by default.

Returns:

Lang.Boolean — Returns true if trial messages should be shown, otherwise false.
Since:

API Level 2.3.0

clearProperties() as Void
This has been deprecated This method may be removed after System 4.
Clear the object store for the application.

Note:
Background processes cannot clear properties.

Supported Devices:

[View devices]
See Also:

Toybox.Application.Storage
Toybox.Application.Properties
Toybox.Application.Storage
Since:

API Level 1.0.0

Throws:

(Application.ObjectStoreAccessException) — Thrown if called from a background process
deleteProperty(key as Application.PropertyKeyType) as Void
This has been deprecated This method may be removed after System 4.
Delete the given key from the object store.

Note:
Background processes cannot delete properties.

Parameters:

key — (Lang.Object) — The key to delete
Supported Devices:

[View devices]
See Also:

Toybox.Application.Storage
Toybox.Application.Properties
Toybox.Application.Storage
Since:

API Level 1.0.0

Throws:

(Application.ObjectStoreAccessException) — Thrown if called from a background process
getGlanceTheme() as AppBase.GlanceTheme
Method to get the glance theme.

Supported Devices:

[View devices]
Since:

API Level 4.0.0

getGlanceView() as [ WatchUi.GlanceView ] or [ WatchUi.GlanceView, WatchUi.GlanceViewDelegate ] or Null
Override to provide the WatchUi.GlanceView and WatchUi.GlanceViewDelegate for the glance preview.

Supported Devices:

[View devices]
Returns:

Lang.Array — An Array containing a WatchUi.GlanceView and an optional WatchUi.GlanceViewDelegate. If this function returns null the app name will be used as preview content.
Since:

API Level 3.1.0

getGoalView(goalType as Application.GoalType) as [ WatchUi.View ] or Null
Override to provide a WatchUi.View for a goal that has triggered within a watch face.


If a goal is reached when a watch face is running, this function will be triggered.

The type of goal that was met will be provided, and the AppBase should return a View that displays a goal reached message and/or animations for that goal.

If a View is returned from this function, the main watch face view will be shutdown, and then new View will pushed.

If this method is not overridden in the AppBase, or if it returns null, the native goal screens will be shown.

Parameters:

goalType — (Application.GoalType) — The goal type that has triggered. The goalType will be from the GOAL_TYPE_* enumeration.
Returns:

Lang.Array — An Array containing a WatchUi.View
Since:

API Level 1.3.0

getInitialView() as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ]
Override to provide the initial View and Input Delegate of the application.

Note:
This method must be overridden in derived classes. If called, this function will cause the application to crash.

Returns:

Lang.Array — An Array containing a WatchUi.View and an optional WatchUi.BehaviorDelegate, WatchUi.ConfirmationDelegate, WatchUi.InputDelegate, WatchUi.MenuInputDelegate, WatchUi.NumberPickerDelegate, WatchUi.PickerDelegate, WatchUi.TextPickerDelegate, or WatchUi.WatchFaceDelegate
Since:

API Level 1.0.0

getProperty(key as Application.PropertyKeyType) as Application.PropertyValueType
This has been deprecated This method may be removed after System 4.
Get the data associated with a given key from the object store.

Properties must first be set with setProperty() before they are can be obtained with getProperty.

Note:
Symbols can change from build to build and are not to be used for for Keys or Values.

Parameters:

key — The key of the value to retrieve from the object store (cannot be a Symbol)
Supported Devices:

[View devices]
Returns:

Lang.Object — The content associated with the key, or null if the key is not in the object store
See Also:

setProperty()
Toybox.Background
Toybox.Application.Properties
Toybox.Application.Storage
Since:

API Level 1.0.0

getSensorConfigurationView(sensor as Sensor.SensorInfo) as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ]
Override to provide the pairing config View and Input Delegate of the application.

Parameters:

sensor — Toybox::Sensor::SensorInfo The sensor object that needs additional configuration
Supported Devices:

[View devices]
Returns:

Lang.Array — An Array containing a WatchUi.View and an optional WatchUi.BehaviorDelegate, WatchUi.ConfirmationDelegate, WatchUi.InputDelegate, WatchUi.MenuInputDelegate, WatchUi.NumberPickerDelegate, WatchUi.PickerDelegate, WatchUi.TextPickerDelegate, or WatchUi.WatchFaceDelegate
Since:

API Level 5.1.0

getSensorDelegate() as Sensor.SensorDelegate or Null
Override to provide the Sensor Delegate object.

The sensor delegate object will be used to get information about the sensors during the native pairing process.

Supported Devices:

[View devices]
Returns:

Sensor.SensorDelegate — The Sensor Delegate object
Since:

API Level 5.1.0

getServiceDelegate() as [ System.ServiceDelegate ]
Get a ServiceDelegate to run background tasks for this app.

When a ServiceDelegate is retrieved, the following will occur:

The method triggered within the ServiceDelegate will be run

The background task will exit using Background.exit() or System.exit()

The background task will be automatically terminated after 30 seconds if it is not exited by these methods

Returns:

Lang.Array — An Array containing a System.ServiceDelegate
See Also:

Toybox.Background
Since:

API Level 2.3.0

getSettingsView() as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ] or Null
Override to provide the settings View and Input Delegate of the application.


This function is only applicable to watch faces and data fields.

Supported Devices:

[View devices]
Returns:

Lang.Array — An Array containing a WatchUi.View and an optional WatchUi.BehaviorDelegate, WatchUi.ConfirmationDelegate, WatchUi.InputDelegate, WatchUi.MenuInputDelegate, WatchUi.NumberPickerDelegate, WatchUi.PickerDelegate, WatchUi.TextPickerDelegate, or WatchUi.WatchFaceDelegate
Since:

API Level 3.2.0

getSyncDelegate() as Communications.SyncDelegate or Null
Get a SyncDelegate object that communicates sync status to the system for syncing content to the device.

Supported Devices:

[View devices]
Returns:

Communications.SyncDelegate
Since:

API Level 3.1.0

Class: Toybox.Communications.SyncDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
A delegate object that the user implements to respond to sync requests from the system.

Since:

API Level 3.1.0

Supported Devices:

[View devices]
Instance Method Summary
collapse
isSyncNeeded() as Lang.Boolean
Check if a sync is needed.
onStartSync() as Void
Called when a sync is started by the system.
onStopSync() as Void
Called when an active sync is cancelled.
Instance Method Details
isSyncNeeded() as Lang.Boolean
Check if a sync is needed.

Returns:

Lang.Boolean —
When true, a sync is needed
When false a sync is not needed and onStartSync will not be called if a sync is triggered for this application
Since:

API Level 3.1.0

onStartSync() as Void
Called when a sync is started by the system.

This method should be used to kick-off the application sync process. This includes any setup required to fetch the data needed to prepare the sync, as well as the initial call to makeWebRequest() to download the first piece of content. Note that, when using this method, you must chain your makeWebRequest() calls together manually. Additionally, you must call notifySyncProgress() intermittently to enable sync progress updates to be displayed in the native user interface for the device. Finally, notifySyncComplete() must be called either when the sync has successfully completed, or if an error occurs, so that the device can be properly notified that the sync process is finished.

Since:

API Level 3.1.0

onStopSync() as Void
Called when an active sync is cancelled.

This method will be called when an active sync is being cancelled by the user. The app is responsible for calling the cancelAllRequests() to cancel any requests made for a sync process. The app is also responsible to let the system know that sync has successfully been cancelled by calling notifySyncComplete().

Since:

API Level 3.1.0

getTrialDaysRemaining() as Lang.Number or Null
Override to return the number of days remaining in the trial

If a developer wishes to implement time-based app trials, they will need to override this function to return the number of days remaining in the trial. This function will be called on app startup to determine if a trial is active and push a notice to the user of how many days remain in the trial. Note that if allowTrialMessage() is overridden to return false, no notifications will be displayed.

Returns:

Lang.Number — A Number object indicating the number of days remaining in the trial, or null if no timed trial is active.
Since:

API Level 2.3.0

isActive() as Lang.Boolean
return true if app is currently in active state, otherwise false.

Supported Devices:

[View devices]
Since:

API Level 4.2.3

isTrial() as Lang.Boolean
Check if the application is in trial mode.

This will always return true for development build apps. If the app has been signed by the store it will return the current unlock state of the app. This method should not be overridden or your trial mode functionality could cease to function correctly.

Returns:

Lang.Boolean — Return true if the app is "locked" and considered to be in trial mode, otherwise false if the app has been unlocked.
Since:

API Level 2.3.0

loadProperties() as Void
This has been deprecated This method may be removed after System 4.
Load the properties for the application

Supported Devices:

[View devices]
Since:

API Level 1.0.0

onActive(state as Lang.Dictionary or Null) as Void
Invoked when app enters active mode, i.e. occupying screen in the foreground.

Parameters:

state — (Lang.Dictionary) — for future expansion, null for now.
Supported Devices:

[View devices]
Since:

API Level 4.2.3

onAppInstall() as Void
The callback method that is triggered in the background when the app is installed. Requires the Background permission to be enabled and your application class to carry the :background annotation.

Since:

API Level 3.0.0

onAppUpdate() as Void
The callback method that is triggered in the background when the app is updated Requires the Background permission to be enabled and your application class to carry the :background annotation.

Since:

API Level 3.0.0

onAuthenticationRequest() as Void
Called when an Application requests to run code on demand, during an authentication process.

Since:

API Level 3.3.0

onBackgroundData(data as Application.PersistableType) as Void
Handle data passed from a ServiceDelegate to the application.

When the Background process terminates, a data payload may be available. If the main application is active when this occurs, the data will be passed directly to the application's onBackgroundData() method. If the main application is not active, the data will be saved until the next time the application is launched and will be passed to the application after the onStart() method completes.

Parameters:

data — (Lang.Object) — The data passed from the background process.
See Also:

Toybox.Background
Since:

API Level 2.3.0

onDeviceSettingChanged(aSymbol as Lang.Symbol, aValue as Lang.Object) as Void
A device setting has changed

This method is called when a device setting value is changed.

Parameters:

aSymbol — (Lang.Symbol) — The symbol for the field in DeviceSettings that has changed.
aValue — (Lang.Object) — The new value for the field. The type of the value will match the type of the field within the DeviceSettings class.
Example:

using Toybox.System;

function onDeviceSettingChanged(aSymbol as Symbol, aValue as Object) as Void {
    if (aSymbol == :distanceUnits) {
        var newUnitSystem = aValue as UnitSystem;
        System.println("Distance Units => " + (newUnitSystem == System.UNIT_METRIC ? "Metric" : "Statute"));
    }
}

Supported Devices:

[View devices]
Since:

API Level 5.1.0

onDisplayModeChanged() as Void
The display mode has changed, only available in AMOLED or LCD screen products.

This method is called when the system changes the display mode. Use the System.getDisplayMode() to get the current state.

Supported Devices:

[View devices]
Since:

API Level 5.0.0

onEnhancedReadabilityModeChanged() as Void
The font mode has changed

This method is called when the system changes to or from Enhanced Readability Mode. Use the Toybox::System::DeviceSettings#isEnhancedReadabilityModeEnabled field to get the current state.

Supported Devices:

[View devices]
Since:

API Level 4.2.3

onInactive(state as Lang.Dictionary or Null) as Void
Invoked when app enters inactive mode, i.e. hidden by system and not occupying screen. Access to certain system resources will be limited, such as GPS, ANT, Alerts (Vibs tones, flashlight).

Parameters:

state — (Lang.Dictionary) — for future expansion, null for now.
Supported Devices:

[View devices]
Since:

API Level 4.2.3

onNightModeChanged() as Void
The display mode has changed

This method is called when the system changes to or from night mode. Use the Toybox::System::DeviceSettings#isNightModeEnabled field to get the current state.

Supported Devices:

[View devices]
Since:

API Level 4.1.2

onSettingsChanged() as Void
Called when the application settings have been changed by Garmin Connect Mobile (GCM) while while the app is running. Override this method to change app behavior when settings change. This is typically used to call for an update to the WatchUi.requestUpdate()

Example:

function onSettingsChanged() { // triggered by settings change in GCM
    _mainView.handleSettingUpdate();
    WatchUi.requestUpdate();   // update the view to reflect changes
}
See Also:

WatchUi.requestUpdate() details
Since:

API Level 1.2.0

onStart(state as Lang.Dictionary or Null) as Void
Method called at startup to allow handling of app initialization.

Before the initial WatchUi.View is retrieved, onStart() is called. Application level settings can be initialized or retrieved from the object store before the initial View is created. This method must be overridden to handle your own app initialization.

Note:
the suspension state can be cleared in the event of reboot or app update.

Parameters:

state — (Lang.Dictionary) — Required. If an Intent is not used to launch the application, then an empty "state" Dictionary is used. If an Intent is used to start the application the Dictionary contains the arguments from the Intent.
:resume — (Lang.Boolean) — If true, indicates app has been resumed from suspension, restore the previously saved app state if needed.
:launchedFromGlance — (Lang.Boolean) — If true, indicates the app is started from glance list as opposed to the the app list.
:launchedFromComplication — (Lang.Number) — If present, indicates the complication index the app was launched from.
:launchedFromPostInstall — (Lang.Number) — If present, indicates the app was launched from a post-install page.
:launchedFromWatchFaceSettingsEditor — (Lang.Boolean) — If true indicates the watchface is started in watchface config mode.
:configId — (WatchFaceConfig.Id) — If present, represents the desired watch face settings to launch watch face with. use WatchFaceConfig.getSettings() to fetch given settings.
Example:

onStart() used with Intent
function onStart(state) {
    if (state != null) {
        infoString = "Args:" + state.toString();
    }
}
See Also:

Toybox.System.Intent
Since:

API Level 1.0.0

onStop(state as Lang.Dictionary or Null) as Void
Override to handle application cleanup upon termination.

If the application needs to save data to the object store it should be done in this function. Once the function is complete, the application will terminate.

Note:
the suspension state can be cleared in the event of reboot or app update.

Parameters:

state — (Lang.Dictionary) — Required. If an Intent is not used to launch an application on stop of the current application an empty "state" Dictionary is used. If an Intent is used to start another application, then the Dictionary contains the arguments from the Intent.
:suspend — (Lang.Boolean) — If true, the app has been suspended and the current state can be resumed at a later time.
See Also:

Toybox.System.Intent
Since:

API Level 1.0.0

onStorageChanged() as Void
Called when Application storage is changed by the other running instance, of the app i.e Background Process while the CIQ app is running or vice-versa. Override this function to receive a callback when the storage is updated. Use this function to reload storage data from the application storage.

Since:

API Level 3.2.0

onValidateProperty(key as Lang.String, value as Application.PropertyValueType) as Lang.Boolean or Lang.String
Called when a property needs to be validated by the application.

Returns:

true if the property is valid, return an error message otherwise. Returning false causes a generic error to be displayed on settings configuration app
Since:

API Level 4.1.0

openAppSettingsEditor() as Void
Function to open application settings editor

Since:

API Level 4.1.0

saveProperties() as Void
This has been deprecated This method may be removed after System 4.
Save the properties for the application

Supported Devices:

[View devices]
Since:

API Level 1.0.0

setProperty(key as Application.PropertyKeyType, value as Application.PropertyValueType) as Void
This has been deprecated This method may be removed after System 4.
Store the given data in the object.

Keys can be of the following types:

String

Number

Float

Boolean

Char

Long

Double

Values can be of the following types:

String

Number

Float

Boolean

Char

Long

Double

Array

Dictionary

Array and Dictionary values may contain null values or any of the above listed types. There is a limit on the size of the Properties of 32 KB. If this limit is reached, the properties will not be saved or reloaded.

Note:
Background processes cannot save properties.

Note:
Symbols can change from build to build and are not to be used for for Keys or Values.

Parameters:

key — The key used to store and retrieve the value from the object store (cannot be a Symbol)
value — The value to put into the object store
Example:

using Toybox.Application;
var app = Application.getApp();

app.setProperty("number", 2);               // set value for "number" key
app.setProperty("float", 3.14);             // set value for "float" key
app.setProperty("string", "Hello World!");  // set value for "string" key
app.setProperty("boolean", true);           // set value for "boolean" key

var int = app.getProperty("number");          // get value for "number" key
var float = app.getProperty("float");         // get value for "float" key
var string = app.getProperty("string");       // get value for "string" key
var boolean = app.getProperty("boolean");     // get value for "boolean" key
Supported Devices:

[View devices]
See Also:

getProperty()
Toybox.Background
Core Topics - Persisting Data
Toybox.Application.Properties
Toybox.Application.Storage
Since:

API Level 1.0.0

Throws:

(Application.ObjectStoreAccessException) — Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support. Data can always be passed to the foreground process from a background process with Background.exit().
(Lang.UnexpectedTypeException) — Thrown if called with a key or value of a disallowed type
validateProperty(key as Application.PropertyKeyType, value as Application.PropertyValueType) as Void
Validate a property being stored.

Since:

API Level 1.0.0


Class: Toybox.Application.AudioContentProviderApp
Inherits:
Toybox.Application.AppBaseshow all
Overview
The base class for audio content provider apps.

This object extends AppBase and adds new methods for getting different initial view types based on what mode the app needs to be started in.

Since:

API Level 3.0.0

App Types:

Audio Content Provider
Background
Glance
Instance Method Summary
collapse
getContentDelegate(args as Application.PersistableType) as Media.ContentDelegate
Get a ContentDelegate for use by the system to get and iterate through media content on the device.
getPlaybackConfigurationView() as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ]
Override to provide the initial View and Input Delegate for configuring playback.
getProviderIconInfo() as Media.ProviderIconInfo or Null
Get audio provider icon information.
getSyncConfigurationView() as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ]
Override to provide the initial View and Input Delegate for configuring sync.
getSyncDelegate() as Communications.SyncDelegate or Null
deprecated
Get a SyncDelegate object that communicates sync status to the system for syncing media content to the device.
initialize()
Constructor.
Instance Method Details
getContentDelegate(args as Application.PersistableType) as Media.ContentDelegate
Get a ContentDelegate for use by the system to get and iterate through media content on the device.

Note:
This method must be overridden in derived classes. If called, this function will cause the application to crash.

Supported Devices:

[View devices]
Returns:

Media.ContentDelegate
Since:

API Level 3.0.0

getPlaybackConfigurationView() as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ]
Override to provide the initial View and Input Delegate for configuring playback.

Note:
This method must be overridden in derived classes. If called, this function will cause the application to crash.

Returns:

Lang.Array — An Array containing a WatchUi.View and an optional WatchUi.BehaviorDelegate, WatchUi.ConfirmationDelegate, WatchUi.InputDelegate, WatchUi.MenuInputDelegate, WatchUi.NumberPickerDelegate, WatchUi.PickerDelegate, WatchUi.TextPickerDelegate, or WatchUi.WatchFaceDelegate
Since:

API Level 3.0.0

getProviderIconInfo() as Media.ProviderIconInfo or Null
Get audio provider icon information.

Supported Devices:

[View devices]
Returns:

Toybox::Media::ProviderIconInfo The icon for the audio content provider
Since:

API Level 3.0.0

getSyncConfigurationView() as [ WatchUi.Views ] or [ WatchUi.Views, WatchUi.InputDelegates ]
Override to provide the initial View and Input Delegate for configuring sync.

Note:
This method must be overridden in derived classes. If called, this function will cause the application to crash.

Returns:

Lang.Array — An Array containing a WatchUi.View and an optional WatchUi.BehaviorDelegate, WatchUi.ConfirmationDelegate, WatchUi.InputDelegate, WatchUi.MenuInputDelegate, WatchUi.NumberPickerDelegate, WatchUi.PickerDelegate, WatchUi.TextPickerDelegate, or WatchUi.WatchFaceDelegate
Since:

API Level 3.0.0

getSyncDelegate() as Communications.SyncDelegate or Null
This has been deprecated This method may be removed after System 9.
Get a SyncDelegate object that communicates sync status to the system for syncing media content to the device.

Returns:

Communications.SyncDelegate
See Also:

AppBase.getSyncDelegate()
Since:

API Level 3.0.0

initialize()
Constructor

Since:

API Level 3.0.0

Class: Toybox.Application.ObjectStoreAccessException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
Indicates a Background process has attempted to access or modify the object store.

See Also:
Toybox.Background
Since:

API Level 2.3.0

Instance Method Summary
collapse
initialize()
Constructor.
Instance Method Details
initialize()
Constructor

Since:

API Level 2.3.0

Module: Toybox.Application.Properties
Overview
The Properties module provides access to application properties.

Storage provides access to properties defined in application properties.

Since:

API Level 2.4.0

Classes Under Namespace
Classes: InvalidKeyException

Instance Method Summary
collapse
getValue(key as Application.PropertyKeyType) as Application.PropertyValueType
Get the data associated with a given key from application settings.
setValue(key as Application.PropertyKeyType, value as Application.PropertyValueType) as Void
Store the given Application Property.
Instance Method Details
getValue(key as Application.PropertyKeyType) as Application.PropertyValueType
Get the data associated with a given key from application settings.

Property values must be defined in the application settings xml. If a key that is not present in application settings is passed to getValue(), an exception will be thrown.

Parameters:

key — (Lang.Object) — The key of the value to retrieve from Application Properties
Returns:

Lang.Object — The content associated with the key
See Also:

setValue()
Since:

API Level 2.4.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if key is a disallowed data type
(Properties.InvalidKeyException) — Thrown if key does not exist in Application Settings
setValue(key as Application.PropertyKeyType, value as Application.PropertyValueType) as Void
Store the given Application Property.

Note:
Background processes cannot save Application Properties

Parameters:

key — (Lang.Object) — The key used to store and retrieve the value from Application Properties
value — (Lang.Object) — The value to put into Application Properties
Since:

API Level 2.4.0

Throws:

(Application.ObjectStoreAccessException) — Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support. Data can always be passed to the foreground process from a background process with Background.exit().
(Lang.UnexpectedTypeException) — Thrown if key is a disallowed data type
(Properties.InvalidKeyException) — Thrown if key does not exist in Application Properties


Class: Toybox.Application.Properties.InvalidKeyException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
Indicates a the application attempted to access a key that does not exist in Application Settings

Since:

API Level 2.4.0

Instance Method Summary
collapse
initialize()
Constructor.
Instance Method Details
initialize()
Constructor

Since:

API Level 2.4.0

Module: Toybox.Application.Storage
Overview
The Storage module provides persistent storage to applications.

Storage provides access to persistent disk storage.

Since:

API Level 2.4.0

Instance Method Summary
collapse
clearValues() as Void
Clear the object store for the application.
deleteValue(key as Application.PropertyKeyType) as Void
Delete the given key from the object store.
getValue(key as Application.PropertyKeyType) as Application.PropertyValueType
Get the data associated with a given key from the object store.
setValue(key as Application.PropertyKeyType, value as Application.PropertyValueType) as Void
Store the given data in the object.
Instance Method Details
clearValues() as Void
Clear the object store for the application.

Since:

API Level 2.4.0

Throws:

(Application.ObjectStoreAccessException) — Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support.
deleteValue(key as Application.PropertyKeyType) as Void
Delete the given key from the object store.

Parameters:

key — (Lang.Object) — The key to delete
See Also:

setValue()
Since:

API Level 2.4.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if key is a disallowed data type
(Application.ObjectStoreAccessException) — Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support
getValue(key as Application.PropertyKeyType) as Application.PropertyValueType
Get the data associated with a given key from the object store.

Keys can be of the following types:

String

Number

Float

Boolean

Char

Long

Double

Values must first be set with setValue() before they are can be obtained with getValue.

Note:
Symbols can change from build to build and are not to be used for for Keys or Values

Parameters:

key — (Lang.Object) — The key of the value to retrieve from the object store (cannot be a Symbol)
Returns:

Lang.Object — The content associated with the key, or null if the key is not in the object store
See Also:

setValue()
Toybox.Background
Since:

API Level 2.4.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if key is a disallowed data type
setValue(key as Application.PropertyKeyType, value as Application.PropertyValueType) as Void
Store the given data in the object.

Keys can be of the following types:

String

Number

Float

Boolean

Char

Long

Double

Values can be of the following types:

String

Number

Float

Boolean

Char

Long

Double

BitmapResource (Since 3.0.0)

AnimationResource (Since 3.0.8)

ScanResult (Since 3.2.0)

Complications.Id (Since 4.2.0)

WatchFaceConfig.Id (Since 5.1.0)

null

Values can also be of type Array or Dictionary containing the above listed types, excluding BitmapResource and AnimationResource. There is a limit on the size of the Object Store that can vary between devices. If you reach this limit, the value will not be saved and an exception will be thrown. Also, values are limited to 32 KB in size.

Note:
Symbols can change from build to build and are not to be used for for Keys or Values

Parameters:

key — (Lang.Object) — The key used to store and retrieve the value from the object store (cannot be a Symbol)
value — (Lang.Object) — The value to put into the object store
Example:

using Toybox.Application.Storage;

Storage.setValue("number", 2);               // set value for "number" key
Storage.setValue("float", 3.14);             // set value for "float" key
Storage.setValue("string", "Hello World!");  // set value for "string" key
Storage.setValue("boolean", true);           // set value for "boolean" key

var int = Storage.getValue("number");          // get value for "number" key
var float = Storage.getValue("float");         // get value for "float" key
var string = Storage.getValue("string");       // get value for "string" key
var boolean = Storage.getValue("boolean");     // get value for "boolean" key
See Also:

getValue()
Toybox.Background
Core Topics - Persisting Data
Since:

API Level 2.4.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if key is a disallowed data type
(Lang.StorageFullException) — Thrown if there is not enough remaining space in the Object Store for the given key and value
(Application.ObjectStoreAccessException) — Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support. Data can always be passed to the foreground process from a background process with Background.exit().


Module: Toybox.Attention
Overview
The Attention module provides the ability to play pre-defined sounds, methods for managing vibration, and control of the back light.

Not all devices fully support this module, so has checks are recommended. For example, the vivoactive does not have a tone generator and will trigger an error if an app attempts to play sounds.

Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Widget
Classes Under Namespace
Classes: BacklightOnTooLongException, ToneProfile, VibeProfile

Constant Summary
Tone
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
TONE_KEY	0	
API Level 1.0.0

Indicates that a key was pressed

TONE_START	1	
API Level 1.0.0

Indicates that an activity has started

TONE_STOP	2	
API Level 1.0.0

Indicates that an activity has stopped

TONE_MSG	3	
API Level 1.0.0

Indicates that a message is available

TONE_ALERT_HI	4	
API Level 1.0.0

An alert ending with a high note

TONE_ALERT_LO	5	
API Level 1.0.0

An alert ending with a low note

TONE_LOUD_BEEP	6	
API Level 1.0.0

A loud beep

TONE_INTERVAL_ALERT	7	
API Level 1.0.0

Indicates a change in interval

TONE_ALARM	8	
API Level 1.0.0

Indicates an alarm has triggered

TONE_RESET	9	
API Level 1.0.0

Indicates that the activity was reset

TONE_LAP	10	
API Level 1.0.0

Indicates that the user has completed a lap

TONE_CANARY	11	
API Level 1.0.0

An annoying sound to get the users attention

TONE_TIME_ALERT	12	
API Level 1.0.0

An alert that a time threshold has been met

TONE_DISTANCE_ALERT	13	
API Level 1.0.0

An alert that a distance threshold has been met

TONE_FAILURE	14	
API Level 1.0.0

Indicates that the activity was a failure

TONE_SUCCESS	15	
API Level 1.0.0

Indicates that the activity was a success

TONE_POWER	16	
API Level 1.0.0

The power on tone

TONE_LOW_BATTERY	17	
API Level 1.0.0

Indicates that the device has low battery power

TONE_ERROR	18	
API Level 1.0.0

Indicates an error occurred

FlashlightMode
Flashlight modes

Since:

API Level 3.4.3

Name	Value	Since	Description	See Also
FLASHLIGHT_MODE_OFF	0	
API Level 3.4.3

FLASHLIGHT_MODE_ON	1	
API Level 3.4.3

FLASHLIGHT_MODE_STROBE	2	
API Level 3.4.3

FlashlightColor
Flashlight colors

Since:

API Level 3.4.3

Name	Value	Since	Description	See Also
FLASHLIGHT_COLOR_WHITE	0xFFFFFF	
API Level 3.4.3

FLASHLIGHT_COLOR_GREEN	0x00FF00	
API Level 3.4.3

FLASHLIGHT_COLOR_RED	0xFF0000	
API Level 3.4.3

FlashlightBrightness
Flashlight brightness

Constants map to device-specific brightness levels

Since:

API Level 3.4.3

Name	Value	Since	Description	See Also
FLASHLIGHT_BRIGHTNESS_LOW	255	
API Level 3.4.3

FLASHLIGHT_BRIGHTNESS_MEDIUM	254	
API Level 3.4.3

FLASHLIGHT_BRIGHTNESS_HIGH	253	
API Level 3.4.3

FlashlightStrobeMode
Flashlight strobe modes

Since:

API Level 3.4.3

Name	Value	Since	Description	See Also
FLASHLIGHT_STROBE_MODE_BLINK	0	
API Level 3.4.3

FLASHLIGHT_STROBE_MODE_PULSE	1	
API Level 3.4.3

FLASHLIGHT_STROBE_MODE_BEACON	2	
API Level 3.4.3

FLASHLIGHT_STROBE_MODE_BLITZ	3	
API Level 3.4.3

FlashlightStrobeSpeed
Flashlight strobe speeds

Since:

API Level 3.4.3

Name	Value	Since	Description	See Also
FLASHLIGHT_STROBE_SPEED_SLOW	0	
API Level 3.4.3

FLASHLIGHT_STROBE_SPEED_MEDIUM	1	
API Level 3.4.3

FLASHLIGHT_STROBE_SPEED_FAST	2	
API Level 3.4.3

FlashlightResult
Flashlight result codes

Since:

API Level 3.4.3

Name	Value	Since	Description	See Also
FLASHLIGHT_RESULT_SUCCESS	0	
API Level 3.4.3

FLASHLIGHT_RESULT_INVALID_COLOR	1	
API Level 3.4.3

FLASHLIGHT_RESULT_INVALID_BRIGHTNESS	2	
API Level 3.4.3

FLASHLIGHT_RESULT_INVALID_MODE	3	
API Level 3.4.3

FLASHLIGHT_RESULT_INVALID_SPEED	4	
API Level 3.4.3

FLASHLIGHT_RESULT_FAILURE	5	
API Level 3.4.3

Instance Method Summary
collapse
backlight(setting as Lang.Boolean or Lang.Float) as Void
Control the display backlight.
hasFlashlightColor(color as Attention.FlashlightColor) as Lang.Boolean
Determine if a given flashlight color is supported by this device.
playTone(options as Attention.Tone or { :toneProfile as Lang.Array<Attention.ToneProfile>, :repeatCount as Lang.Number }) as Void
Play a tone.
setFlashlightMode(mode as Attention.FlashlightMode, options as { :color as Attention.FlashlightColor, :brightness as Lang.Number or Attention.FlashlightBrightness, :strobeMode as Attention.FlashlightStrobeMode, :strobeSpeed as Attention.FlashlightStrobeSpeed } or Null) as Attention.FlashlightResult
vibrate(vibeProfiles as Lang.Array<Attention.VibeProfile>) as Void
Engage the vibration motor.
Instance Method Details
backlight(setting as Lang.Boolean or Lang.Float) as Void
Control the display backlight.

The backlight will always respect the backlight timeout settings on the device. Behavior of this feature may also change depending on device settings. For example, if a device is set to activate the back light with key presses, the backlight will toggle on with key presses even if the app is written to turn off the back light with a key press.

On products that use a gesture enabled display, calling this API will suppress the gesture detection for the period that the backlight is on. Calling this repeatedly can hold the display on, but if the product has burn in protection an exception will be thrown if you attempt to keep the display enabled for too long (e.g. over 1 minute).

Note:
Passing a Float is only supported with ConnectIQ 3.2.1 and later.

Parameters:

setting — (Lang.Boolean, Lang.Float) —
If setting is a Boolean, false will disable the backlight and true will enable the backlight at the system backlight level.
If setting is a Float, the value 0.0 will disable the backlight and values greater than 0.0 and less than or equal to 1.0 will enable the backlight at the specified brightness.
Supported Devices:

[View devices]
Since:

API Level 1.0.0

Throws:

BacklightOnTooLongException On products with burn in protection, this exception is thrown if the backlight is held on for too long continuously
InvalidOptionsException If the Float value is outside the valid range.
hasFlashlightColor(color as Attention.FlashlightColor) as Lang.Boolean
Determine if a given flashlight color is supported by this device

Parameters:

color — (Attention.FlashlightColor) — Color to check
Supported Devices:

[View devices]
Returns:

Returns true if the given color is supported, otherwise false.
Since:

API Level 3.4.3

Throws:

(Lang.OperationNotAllowedException) — Raised if called from an app type other than watch-app.
playTone(options as Attention.Tone or { :toneProfile as Lang.Array<Attention.ToneProfile>, :repeatCount as Lang.Number }) as Void
Play a tone.

Note:
Passing an options Dictionary is only supported with ConnectIQ 3.1.0 and later.

Parameters:

options — (Attention.Tone, Lang.Dictionary) — A TONE_* value or Dictionary of options.
:toneProfile — (Lang.Array) — Array containing at least one ToneProfile object to be played in sequence.
:repeatCount — (Lang.Number) — Number of times to repeat the given tone sequence.
Example:

using Toybox.Attention;

// Play a predefined tone
if (Attention has :playTone) {
   Attention.playTone(Attention.TONE_LOUD_BEEP);
}

// Use an array of ToneProfile objects to build and play a custom tone
if (Attention has :ToneProfile) {
    var toneProfile =
    [
        new Attention.ToneProfile( 2500, 250),
        new Attention.ToneProfile( 5000, 250),
        new Attention.ToneProfile(10000, 250),
        new Attention.ToneProfile( 5000, 250),
        new Attention.ToneProfile( 2500, 250),
    ];
    Attention.playTone({:toneProfile=>toneProfile});
   }

Supported Devices:

[View devices]
Since:

API Level 1.0.0

Throws:

(Lang.InvalidOptionsException) — Thrown if passing an options hash with invalid values when using new ToneProfile objects
setFlashlightMode(mode as Attention.FlashlightMode, options as { :color as Attention.FlashlightColor, :brightness as Lang.Number or Attention.FlashlightBrightness, :strobeMode as Attention.FlashlightStrobeMode, :strobeSpeed as Attention.FlashlightStrobeSpeed } or Null) as Attention.FlashlightResult

Parameters:

mode — (Attention.FlashlightMode)
options — (Lang.Dictionary) — Flashlight mode options
:color — (Attention.FlashlightColor) — Color of flashlight. Default is FLASHLIGHT_COLOR_WHITE.
:strobeMode — (Attention.FlashlightStrobeMode) — Mode of strobe. Default is FLASHLIGHT_STROBE_MODE_BLINK.
:strobeSpeed — (Attention.FlashlightStrobeSpeed) — Speed of strobe. Default is FLASHLIGHT_STROBE_SPEED_MEDIUM.
:brightness — (Lang.Number, Attention.FlashlightBrightness) — Intensity of the flashlight. Default is FLASHLIGHT_BRIGHTNESS_MEDIUM.
Supported Devices:

[View devices]
Returns:

Attention.FlashlightResult — A FlashlightResult value indicating the operation status.
Since:

API Level 3.4.3

Throws:

(Lang.OperationNotAllowedException) — Raised if called from an app type other than watch-app.
vibrate(vibeProfiles as Lang.Array<Attention.VibeProfile>) as Void
Engage the vibration motor.

The vibrate method takes an Array containing at least one VibeProfile object, up to a maximum of 8, and runs them in sequence.

Note:
Forerunner devices do not support vibration patterns. Vibration may still be used, but the vibration will always run at the same duty cycle.

Parameters:

vibeProfiles — (Lang.Array) — An Array of VibeProfile objects
Example:

Vibrate in an on/off pattern
if (Attention has :vibrate) {
    vibeData =
    [
        new Attention.VibeProfile(50, 2000), // On for two seconds
        new Attention.VibeProfile(0, 2000),  // Off for two seconds
        new Attention.VibeProfile(50, 2000), // On for two seconds
        new Attention.VibeProfile(0, 2000),  // Off for two seconds
        new Attention.VibeProfile(50, 2000)  // on for two seconds
    ];
}
Attention.vibrate(vibeData);
Supported Devices:

[View devices]
See Also:

Toybox.Attention.VibeProfile
Since:

API Level 1.0.0


Class: Toybox.Attention.ToneProfile
Inherits:
Toybox.Lang.Objectshow all
Overview
Define a tone pattern.

Tones have two characteristics: frequency and duration. These characteristics are used to define a single ToneProfile object, which can then be passed with a collection of other ToneProfile objects in an Array to the playTone() method. The playTone() method will play through each of the ToneProfile objects within the Array in order.

Example:

Build a set of ToneProfile objects
if (Attention has :ToneProfile) {
    var toneProfile =
    [
        new Attention.ToneProfile( 2500, 250),
        new Attention.ToneProfile( 5000, 250),
        new Attention.ToneProfile(10000, 250),
        new Attention.ToneProfile( 5000, 250),
        new Attention.ToneProfile( 2500, 250),
    ];
    Attention.playTone({:toneProfile=>toneProfile});
}
Since:

API Level 3.1.0

Supported Devices:

[View devices]
Instance Member Summary
collapse
duration as Lang.Number
The duration of the tone in milliseconds (ms).
frequency as Lang.Number
The frequency of the tone in hertz (hz).
Instance Method Summary
collapse
initialize(aFrequency as Lang.Number, aDuration as Lang.Number)
Constructor.
Instance Attribute Details
var duration as Lang.Number
The duration of the tone in milliseconds (ms).

Since:

API Level 3.1.0

var frequency as Lang.Number
The frequency of the tone in hertz (hz).

Since:

API Level 3.1.0

Instance Method Details
initialize(aFrequency as Lang.Number, aDuration as Lang.Number)
Constructor

Parameters:

aFrequency — (Lang.Number) — The frequency of the tone in hertz (hz)
aDuration — (Lang.Number) — The duration of the tone in milliseconds (ms)
Since:

API Level 3.1.0


Class: Toybox.Attention.VibeProfile
Inherits:
Toybox.Lang.Objectshow all
Overview
Define a vibration pattern.

Vibrations have two characteristics: duty cycle and length. These characteristics are used to define a single VibeProfile object, which can then be passed with a collection of other VibeProfile objects in an Array to the vibrate() method. The vibrate() method will play through each of the VibeProfile objects within the Array in order.

Example:

Build a set of VibeProfile objects
if (Attention has :vibrate) {
    vibeData =
    [
        new Attention.VibeProfile(25, 2000),
        new Attention.VibeProfile(50, 2000),
        new Attention.VibeProfile(100, 2000)
    ];
}
Since:

API Level 1.0.0

Supported Devices:

[View devices]
Instance Member Summary
collapse
dutyCycle as Lang.Number
The strength of the vibration.
length as Lang.Number
Length of the vibration in milliseconds (ms).
Instance Method Summary
collapse
initialize(dutyCycleVal as Lang.Number, lengthVal as Lang.Number)
Constructor.
Instance Attribute Details
var dutyCycle as Lang.Number
The strength of the vibration.

Duty cycle is the felt strength of the vibration, and is analogous in practice to the frequency of the vibration. It is specified as a value from 0 to 100%, 0 indicating no vibration and 100 indicating the strongest vibration.

Since:

API Level 1.0.0

See Also:

Duty Cycle
var length as Lang.Number
Length of the vibration in milliseconds (ms).

Since:

API Level 1.0.0

Instance Method Details
initialize(dutyCycleVal as Lang.Number, lengthVal as Lang.Number)
Constructor

Parameters:

dutyCycleVal — (Lang.Number) — The strength of the vibration
lengthVal — (Lang.Number) — The length of the vibration in milliseconds (ms)
Since:

API Level 1.0.0

Module: Toybox.Authentication
Overview
The Authentication Module provides tools for authentication.

With the Authentication module, Connect IQ apps will be able to make OAuth requests redirected through Connect IQ mobile app.

Since:

API Level 3.3.0

Classes Under Namespace
Classes: Message, OAuthMessage

Constant Summary
OAuthResultType
Since:

API Level 3.3.0

Name	Value	Since	Description	See Also
OAUTH_RESULT_TYPE_URL	0	
API Level 3.3.0

How the OAuth token will be returned in the final step.

OAuthSigningMethod
Since:

API Level 3.3.0

Name	Value	Since	Description	See Also
OAUTH_SIGNING_METHOD_HMAC_SHA1	0	
API Level 3.3.0

How the OAuth request will be signed

Instance Method Summary
collapse
makeOAuthRequest(requestUrl as Lang.String, requestParams as Lang.Dictionary<Lang.String, Lang.String>, resultUrl as Lang.String, resultType as Authentication.OAuthResultType, resultKeys as Lang.Dictionary<Lang.String, Lang.String>) as Void
Request an OAuth sign-in through Garmin Connect IQ Mobile App A notification will trigger on the phone, that when clicked, provides a web view that shows requestUrl.
registerForOAuthMessages(method as Lang.Method(message as Authentication.OAuthMessage) as Void) as Void
Register a callback for receiving OAuth messages.
Instance Method Details
makeOAuthRequest(requestUrl as Lang.String, requestParams as Lang.Dictionary<Lang.String, Lang.String>, resultUrl as Lang.String, resultType as Authentication.OAuthResultType, resultKeys as Lang.Dictionary<Lang.String, Lang.String>) as Void
Request an OAuth sign-in through Garmin Connect IQ Mobile App

A notification will trigger on the phone, that when clicked, provides a web view that shows requestUrl. If the user grants permission to the app, then the callback registered by registerForOAuthMessages() will be called with an OAuthMessage from the OAuth response.

Parameters:

requestUrl — (Lang.String) — The URL to load in the web view to begin authentication
requestParams — (Lang.Dictionary) — Non-URL encoded parameters for the requestUrl
resultUrl — (Lang.String) — The URL of the final page of authentication that contains the resultKeys
resultType — (Authentication.OAuthResultType) — An OAUTH_RESULT_TYPE_* value that specifies the format of the result
resultKeys — (Lang.Dictionary) — The desired OAuth response values passed to the callback method. The keys map to the actual OAuth response keys, and the values map to the keys of the OAuthMessage data.
Example:

using Toybox.Authentication;
using Toybox.System;

const CLIENT_ID = "myClientID";
const OAUTH_CODE = "myOAuthCode";
const OAUTH_ERROR = "myOAuthError";

// register a callback to capture results from OAuth requests
Authentication.registerForOAuthMessages(method(:onOAuthMessage));

// wrap the OAuth request in a function
function getOAuthToken() {
   status = "Look at OAuth screen\n";
   Ui.requestUpdate();

   // set the makeOAuthRequest parameters
   var params = {
       "redirect_uri" => "connectiq://oauth",
       "response_type" => "code",
       "client_id" => $.CLIENT_ID
   };

   // makeOAuthRequest triggers login prompt on mobile device.
   // "responseCode" and "responseError" are the parameters passed
   // to the resultUrl. Check the oauth provider's documentation
   // to determine the correct strings to use.
   Auth.makeOAuthRequest(
       "https://requesturl.com",
       params,
       "http://resulturl.com",
       Auth.OAUTH_RESULT_TYPE_URL,
       {"responseCode" => $.OAUTH_CODE, "responseError" => $.OAUTH_ERROR}
   );
}

// implement the OAuth callback method
function onOAuthMessage(message) {
    if (message.data != null) {
        var code = message.data[$.OAUTH_CODE];
        var error = message.data[$.OAUTH_ERROR];
    } else {
        // return an error
    }
}
// the OAuth service can now be used with a makeWebRequest() call
Since:

API Level 3.3.0

registerForOAuthMessages(method as Lang.Method(message as Authentication.OAuthMessage) as Void) as Void
Register a callback for receiving OAuth messages.

The callback will be called once for each received OAuth message. If there are messages waiting for the app when this function is called, the callback will immediately be called once for each waiting message.

Parameters:

method — (Lang.Method) — A reference to a callback, which must receive a data argument of the type OAuthMessage.
Example:

using Toybox.Authentication;

function onOAuthMessage(message) {
    if (message.data != null) {
        var code = message.data[OAUTH_CODE];
        var error = message.data[OAUTH_ERROR];
    } else {
        // return an error
    }
}
Authentication.registerForOAuthMessages(method(:onOAuthMessage));

Since:

API Level 3.3.0

Class: Toybox.Authentication.Message
Inherits:
Toybox.Lang.Objectshow all
Overview
The base class for messages.

Since:

API Level 3.3.0

Direct Known Subclasses
Authentication.OAuthMessage

Instance Member Summary
collapse
data as Lang.Object or Null
The data delivered by the message.
Instance Attribute Details
var data as Lang.Object or Null
The data delivered by the message.

Since:

API Level 3.3.0

Returns:

Lang.Object

Class: Toybox.Authentication.OAuthMessage
Inherits:
Toybox.Authentication.Messageshow all
Overview
An OAuthMessage received by the callback registered in registerForOAuthMessages().

Unlike the data in the Message parent class, data in an OAuthMessage should always be a Dictionary.

Since:

API Level 3.3.0

Instance Member Summary
collapse
responseCode as Lang.Number
An HTTP response code (positive value) or BLE error code (negative value).
Instance Method Summary
collapse
initialize()
Constructor.
Instance Attribute Details
var responseCode as Lang.Number
An HTTP response code (positive value) or BLE error code (negative value).

Note:
The value in this field is unreliable and should not be referenced. It is generally safer to examine the message payload to check the status of the response.

Since:

API Level 3.3.0

Returns:

Lang.Number
Instance Method Details
initialize()
Constructor

Since:

API Level 3.3.0


Module: Toybox.Background
Overview
Background events are special events that trigger in the background when either certain system events occur, such as when an activity goal has been met, or at certain times (called temporal events). This allows an application to update its data even when the application is not active.

See Also:
Toybox.System.ServiceDelegate
AppBase.onBackgroundData()
Since:

API Level 2.3.0

Supported Devices:

[View devices]
Requires Permission:

Background
Classes Under Namespace
Classes: ExitDataSizeLimitException, InvalidBackgroundTimeException, MessageSizeLimitException

Instance Method Summary
collapse
deleteActivityCompletedEvent() as Void
Stops the application from receiving activity completed events.
deleteGoalEvent(goalType as Application.GoalType) as Void
Remove the active goal background event of specified type for the application.
deleteOAuthResponseEvent() as Void
Remove the OAuth response background event.
deletePhoneAppMessageEvent() as Void
Stops the application from receiving background phone app messages.
deleteSleepEvent() as Void
Remove the active sleep background event for the application.
deleteStepsEvent() as Void
Remove the active steps background event for the application.
deleteTemporalEvent() as Void
Remove the active temporal background event for the application.
deleteWakeEvent() as Void
Remove the active wake background event for the application.
exit(backgroundData as Application.PropertyValueType) as Void
Terminates the current background process.
getActivityCompletedEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForActivityCompletedEvent().
getBackgroundData() as Application.PropertyValueType
Get data previously saved by a background process.
getGoalEventRegistered(goalType as Application.GoalType) as Lang.Boolean
Get whether a background event is registered with registerForGoalEvent().
getLastTemporalEventTime() as Time.Moment or Null
Get the time the last temporal background event was triggered.
getOAuthResponseEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForOAuthResponseEvent().
getPhoneAppMessageEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForPhoneAppMessageEvent().
getSleepEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForSleepEvent().
getStepsEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForStepsEvent().
getTemporalEventRegisteredTime() as Time.Moment or Time.Duration or Null
Get the Moment or Duration with which a background event is registered by registerForTemporalEvent().
getWakeEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForWakeEvent().
registerForActivityCompletedEvent() as Void
Registers the application to receive an event whenever an activity is completed.
registerForGoalEvent(goalType as Application.GoalType) as Void
Register a background event that triggers when the user reaches a specified goal.
registerForOAuthResponseEvent() as Void
Registers a background event that triggers each time an OAuth login request completes and the token becomes available on the system for use.
registerForPhoneAppMessageEvent() as Void
Registers the application to receive an event whenever a phone app message is received.
registerForSleepEvent() as Void
Register a background event that triggers at the sleep time configured on the device.
registerForStepsEvent() as Void
Registers a background event that triggers each time a multiple of 1000 steps is reached.
registerForTemporalEvent(time as Time.Moment or Time.Duration) as Void
Register a background event that triggers at a specific time or at a regular interval.
registerForWakeEvent() as Void
Register a background event that triggers at the wake time configured on the device.
requestApplicationWake(message as Lang.String) as Void
Display a confirmation dialog requesting to launch the application to which the background task belongs.
Instance Method Details
deleteActivityCompletedEvent() as Void
Stops the application from receiving activity completed events.

Since:

API Level 3.0.10

deleteGoalEvent(goalType as Application.GoalType) as Void
Remove the active goal background event of specified type for the application.

Parameters:

goalType — (Application.GoalType) — An Application.GOAL_TYPE_* value representing the goal type of the event to remove
Example:

Background.deleteGoalEvent(GOAL_TYPE_STEPS);
Since:

API Level 2.3.0

deleteOAuthResponseEvent() as Void
Remove the OAuth response background event.

Since:

API Level 2.3.0

deletePhoneAppMessageEvent() as Void
Stops the application from receiving background phone app messages.

Supported Devices:

[View devices]
Since:

API Level 3.2.0

deleteSleepEvent() as Void
Remove the active sleep background event for the application.

Since:

API Level 2.3.0

deleteStepsEvent() as Void
Remove the active steps background event for the application.

Since:

API Level 2.3.0

deleteTemporalEvent() as Void
Remove the active temporal background event for the application.

Since:

API Level 2.3.0

deleteWakeEvent() as Void
Remove the active wake background event for the application.

Since:

API Level 2.3.0

exit(backgroundData as Application.PropertyValueType) as Void
Terminates the current background process.

All background processes should call this method when they have completed the desired tasks. Data passed to this method will either be passed immediately to the active application if it is running, or will be saved and passed to the application the next time it runs. Data must be one of the following types:

String

Number

Float

Boolean

Char

Long

Double

Array

Dictionary

Arrays and Dictionaries may contain null values or any of the above listed types. If no data should be passed to the main process, null may be specified.

This method will exit if called by a background process, but will do nothing if called by the main application process.

Parameters:

backgroundData — (Lang.Object) — The object to pass to the main process's AppBase.onBackgroundData() method. Passing null will not override previous data values not yet consumed by the parent application's AppBase.onBackgroundData() method.
Since:

API Level 2.3.0

Throws:

(Background.ExitDataSizeLimitException) — Indicates the data provided exceeds the data size limit (approximately 8 KB). If this exception is caught, the process will not exit and should attempt to call Background.exit() again with less data.
getActivityCompletedEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForActivityCompletedEvent()

Returns:

Lang.Boolean — true if a background event is registered with registerForActivityCompletedEvent(), otherwise false
Since:

API Level 3.0.10

getBackgroundData() as Application.PropertyValueType
Get data previously saved by a background process.

Data is delivered via AppBase.onBackgroundData(), and is reset to null once data has been delivered to the main process. This method always returns null in the main application's process.

See Also:

AppBase.onBackgroundData()
Since:

API Level 2.3.0

getGoalEventRegistered(goalType as Application.GoalType) as Lang.Boolean
Get whether a background event is registered with registerForGoalEvent().

Parameters:

goalType — (Application.GoalType) — An Application.GOAL_TYPE_* value representing the goal type to check for registered background events
Returns:

Lang.Boolean — true if a background event is registered with registerForGoalEvent(), otherwise false
Since:

API Level 3.0.0

getLastTemporalEventTime() as Time.Moment or Null
Get the time the last temporal background event was triggered.

This is useful for ensuring new events are not scheduled within the five minute minimum time allowed between temporal events.

Example:

Register a new temporal background event as soon as allowed
using Toybox.Background;
using Toybox.Time;
const FIVE_MINUTES = new Time.Duration(5 * 60);
var lastTime = Background.getLastTemporalEventTime();
if (lastTime != null) {
    // Events scheduled for a time in the past trigger immediately
    var nextTime = lastTime.add(FIVE_MINUTES);
    Background.registerForTemporalEvent(nextTime);
} else {
    Background.registerForTemporalEvent(Time.now());
}
Returns:

Time.Moment — The time the last background event was triggered, but may be null if no previous temporal background event has occurred or if the device app or widget has been started since the event was last triggered
See Also:

registerForTemporalEvent()
Toybox.Time
Since:

API Level 2.3.0

getOAuthResponseEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForOAuthResponseEvent()

Returns:

Lang.Boolean — true if a background event is registered with registerForOAuthResponseEvent(), otherwise false
Since:

API Level 3.0.0

getPhoneAppMessageEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForPhoneAppMessageEvent()

Supported Devices:

[View devices]
Returns:

Lang.Boolean — true if a background event is registered with registerForPhoneAppMessageEvent(), otherwise false
Since:

API Level 3.2.0

getSleepEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForSleepEvent().

Returns:

Lang.Boolean — true if a background event is registered with registerForSleepEvent(), otherwise false
Since:

API Level 3.0.0

getStepsEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForStepsEvent().

Returns:

Lang.Boolean — true if a background event is registered with registerForStepsEvent(), otherwise false
Since:

API Level 3.0.0

getTemporalEventRegisteredTime() as Time.Moment or Time.Duration or Null
Get the Moment or Duration with which a background event is registered by registerForTemporalEvent().

Returns:

Time.Moment, Time.Duration — The specific Moment in time at which a background event is registered to trigger, or the interval Duration at which to repeat a background event. May be null if no temporal background event is registered.
See Also:

Toybox.Time
Since:

API Level 3.0.0

getWakeEventRegistered() as Lang.Boolean
Get whether a background event is registered with registerForWakeEvent().

Returns:

Lang.Boolean — true if a background event is registered with registerForWakeEvent(), otherwise false
Since:

API Level 3.0.0

registerForActivityCompletedEvent() as Void
Registers the application to receive an event whenever an activity is completed.

Since:

API Level 3.0.10

registerForGoalEvent(goalType as Application.GoalType) as Void
Register a background event that triggers when the user reaches a specified goal.

Parameters:

goalType — (Application.GoalType) — An Application.GOAL_TYPE_* value representing the goal type on which to trigger the background event
Example:

Background.registerForGoalEvent(GOAL_TYPE_STEPS);
Since:

API Level 2.3.0

registerForOAuthResponseEvent() as Void
Registers a background event that triggers each time an OAuth login request completes and the token becomes available on the system for use.

This event is triggered when a OAuth response is received by the system.

Since:

API Level 2.3.0

registerForPhoneAppMessageEvent() as Void
Registers the application to receive an event whenever a phone app message is received.

Supported Devices:

[View devices]
Since:

API Level 3.2.0

registerForSleepEvent() as Void
Register a background event that triggers at the sleep time configured on the device.

Since:

API Level 2.3.0

registerForStepsEvent() as Void
Registers a background event that triggers each time a multiple of 1000 steps is reached.

This event is triggered only by device-recorded steps, and will not trigger based on synced steps.

Since:

API Level 2.3.0

registerForTemporalEvent(time as Time.Moment or Time.Duration) as Void
Register a background event that triggers at a specific time or at a regular interval.

Temporal background events may be registered to run at a specific point in time by providing a Moment at which the event should trigger, or may be registered to run at a periodically by specifying an interval Duration. If a temporal event is scheduled for a time in the past, the event will trigger immediately.

Temporal events cannot be set to occur less than 5 minutes after the last temporal event occurred. For watch-apps and widgets the 5 minute restriction is cleared on application startup if the event was specified using a Moment.

Only one temporal event may be registered at a time. Calling registerForTemporalEvent will overwrite any previously registered temporal events.

Parameters:

time — (Time.Moment, Time.Duration) — The specific Moment in time at which to run a background event, or the interval Duration at which to repeat a background event
Example:

Schedule a background event to run five minutes from now
using Toybox.Background;
using Toybox.Time;
const FIVE_MINUTES = new Time.Duration(5 * 60);
var eventTime = Time.now().add(FIVE_MINUTES);
Background.registerForTemporalEvent(eventTime);
See Also:

Toybox.Time
Since:

API Level 2.3.0

Throws:

(Background.InvalidBackgroundTimeException) — Indicates an application has attempted to schedule a background event which either: * Occurs less than five minutes after the last background event occurred * Has a duration of less than five minutes
registerForWakeEvent() as Void
Register a background event that triggers at the wake time configured on the device.

Since:

API Level 2.3.0

requestApplicationWake(message as Lang.String) as Void
Display a confirmation dialog requesting to launch the application to which the background task belongs.

If the dialog is confirmed, the application will open. If the dialog is declined, the application will not open and the dialog will be dismissed. This request is only valid for widget or device app background tasks, and will be ignored by watch face apps. Background.exit() must be called at some point in the background process after this method is invoked because the confirmation dialog will only trigger after the background task exits.

Parameters:

message — (Lang.String) — The message to display in the dialog when requesting to launch the app
Example:

using Toybox.Background;
(:background)
class BackgroundServiceDelegate extends System.ServiceDelegate {
    function initialize() {
        ServiceDelegate.initialize();
    }

    function onTemporalEvent() {
        Background.requestApplicationWake("Launch Cool App?");
        Background.exit(null);
    }
}
See Also:

Toybox.System.ServiceDelegate
Background.exit()
Since:

API Level 2.3.0

Throws:

(Background.MessageSizeLimitException) — Indicates the provided message exceeds the size limit (255 Bytes). Note that some characters may be larger than 1 Byte


Class: Toybox.Background.ExitDataSizeLimitException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
Indicates the data payload provided to Background.exit() exceeds the maximum allowed data size (approximately 8 KB).

Since:

API Level 2.3.0

Instance Method Summary
collapse
initialize()
Constructor.
Instance Method Details
initialize()
Constructor

Since:

API Level 2.3.0

Class: Toybox.Background.InvalidBackgroundTimeException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
Indicates a invalid time was provided to registerForTemporalEvent(), which may be invalid because it either:

Occurs less than five minutes after the last background event occurred

Has a duration of less than five minutes

Since:

API Level 2.3.0

Instance Method Summary
collapse
initialize(msg as Lang.String)
Constructor.
Instance Method Details
initialize(msg as Lang.String)
Constructor

Parameters:

msg — (Lang.String) — The exception message
Since:

API Level 2.3.0

Class: Toybox.Background.MessageSizeLimitException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
Indicates the message provided to Background.requestApplicationWake() exceeds the maximum allowed message size (255 Bytes).

Note:
Some characters may be larger than 1 Byte.

Since:

API Level 2.3.0

Instance Method Summary
collapse
initialize()
Constructor.
Instance Method Details
initialize()
Constructor

Since:

API Level 2.3.0

Module: Toybox.FitContributor
Overview
The FitContributor module allows Applications and Data Fields to record Field data into FIT files on the device's file system during an activity. This is useful for recording data that is not already calculated by the device, which can be synced to a service like Garmin Connect.

There are three FitContributor message types available:

MESG_TYPE_SESSION
Session data is written once per recording session at the end of the recording, and is used for data that pertains to the entire session (e.g. average speed).

MESG_TYPE_LAP
Lap data is written once for every lap in the session, and used for data that pertains to each lap (e.g. average lap speed).

MESG_TYPE_RECORD
Depending on the device, record data is written once per second or when new data is available (Smart Recording), but is never written faster than once per second. This message type is used for instantaneous values (e.g. current speed).

Data type constants are also available for use with the createField() method.

See Also:
Session.createField()
Learn more about the FIT format
Example:

Using a FitContributor Field in a SimpleDataField app
using Toybox.FitContributor;
using Toybox.WatchUi;
class BananasEarnedView extends WatchUi.SimpleDataField
{
    var bananasEarnedField = null;
    var totalBananas = 0.0;

    const CALORIES_PER_BANANA = 105.0;
    const BANANAS_FIELD_ID = 0;

    function initialize() {
        SimpleDataField.initialize();

        // Create the custom FIT data field we want to record.
        bananasEarnedField = createField(
            "bananas_earned",
            BANANAS_FIELD_ID,
            FitContributor.DATA_TYPE_FLOAT,
            {:mesgType=>Fit.MESG_TYPE_RECORD, :units=>"B"}
        );

        bananasEarnedField.setData(0.0);
    }

    function compute(info) {
        if (info != null && info.calories != null) {
            // Calculate and set data to be written to the Field
            totalBananas = (info.calories / CALORIES_PER_BANANA).toFloat();
            bananasEarnedField.setData(totalBananas);
        }
        // Display the data on the screen of the device
        return totalBananas;
    }
}
Since:

API Level 1.3.0

App Types:

Data Field
Glance
Watch App
Supported Devices:

[View devices]
Requires Permission:

FitContributor
Classes Under Namespace
Classes: Field

Constant Summary
MessageType
Since:

API Level 1.3.0

Name	Value	Since	Description	See Also
MESG_TYPE_SESSION	18	
API Level 1.3.0

The message type for session messages.

MESG_TYPE_LAP	19	
API Level 1.3.0

The message type for lap messages.

MESG_TYPE_RECORD	20	
API Level 1.3.0

The message type for record messages.

DataType
Since:

API Level 1.3.0

Name	Value	Since	Description	See Also
DATA_TYPE_SINT8	1	
API Level 1.3.0

DATA_TYPE_UINT8	2	
API Level 1.3.0

DATA_TYPE_SINT16	3	
API Level 1.3.0

DATA_TYPE_UINT16	4	
API Level 1.3.0

DATA_TYPE_SINT32	5	
API Level 1.3.0

DATA_TYPE_UINT32	6	
API Level 1.3.0

DATA_TYPE_STRING	7	
API Level 1.3.0

DATA_TYPE_FLOAT	8	
API Level 1.3.0

DATA_TYPE_DOUBLE	9	
API Level 1.3.0



Class: Toybox.FitContributor.Field
Inherits:
Toybox.Lang.Objectshow all
Overview
A Field records custom FIT data from an Application or Data Field to a FIT file on the device's file system.

Once a Field is created with the createField() method, you can submit the next Field value with setData(), which will get written to the FIT file at the next opportunity. Depending on the device, writes to the FIT file may occur once per second or when new data is available (Smart Recording). Best practice is to only call setData() when values have changed to accommodate Smart Recording.

If setData() is called before the previous data is written out, the previous value will be lost and replaced by the current data. For this reason, we do not recommend using this feature for time-sensitive data requiring sub-second granularity.

See Also:
Session.createField()
Smart Recording vs. Every Second Recording
Learn more about the FIT format
Since:

API Level 1.3.0

Instance Method Summary
collapse
setData(input as Lang.Object) as Void
Set the value to write to this Field.
Instance Method Details
setData(input as Lang.Object) as Void
Set the value to write to this Field.

Parameters:

input — (Lang.Object) — The data to be written to the Field
Since:

API Level 1.3.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if the input type does not match the type specified in createField() at definition

Module: Toybox.Graphics
Overview
The Graphics module provides a set of tools that allow developers to use basic drawing functionality.

This provides the ability to draw shapes, lines, fill shapes, and use dynamic layouts for graphic elements based on specific device contexts. The Device Context (Dc) is useful for developers who are interested in creating content for multiple device platforms with differing screen shapes, sizes, and color palettes.

Since:

API Level 1.0.0

App Types:

Audio Content Provider
Background (supported since API Level 5.1.0)
Data Field
Glance
Watch App
Watch Face
Widget
Classes Under Namespace
Classes: AffineTransform, BitmapReference, BitmapTexture, BoundingBox, BufferedBitmap, BufferedBitmapReference, Dc, FontReference, InvalidBitmapResourceException, InvalidPaletteException, OutOfGraphicsMemoryException, ResourceReference, VectorFont

Constant Summary
FontDefinition
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
FONT_XTINY	0	
API Level 1.0.0

Extra tiny Connect IQ font

FONT_TINY	1	
API Level 1.0.0

Tiny Connect IQ font

FONT_SMALL	2	
API Level 1.0.0

Small Connect IQ font

FONT_MEDIUM	3	
API Level 1.0.0

Medium Connect IQ font

FONT_LARGE	4	
API Level 1.0.0

Large Connect IQ font

FONT_NUMBER_MILD	5	
API Level 1.0.0

Normal size number only Connect IQ font

FONT_NUMBER_MEDIUM	6	
API Level 1.0.0

Medium size number only Connect IQ font

FONT_NUMBER_HOT	7	
API Level 1.0.0

Large size number only Connect IQ font

FONT_NUMBER_THAI_HOT	8	
API Level 1.0.0

Huge size number only Connect IQ font

FONT_SYSTEM_XTINY	9	
API Level 1.3.0

Extra tiny system font

FONT_SYSTEM_TINY	10	
API Level 1.3.0

Tiny system font

FONT_SYSTEM_SMALL	11	
API Level 1.3.0

Small system font

FONT_SYSTEM_MEDIUM	12	
API Level 1.3.0

Medium system font

FONT_SYSTEM_LARGE	13	
API Level 1.3.0

Large system font

FONT_SYSTEM_NUMBER_MILD	14	
API Level 1.3.0

Normal size number only system font

FONT_SYSTEM_NUMBER_MEDIUM	15	
API Level 1.3.0

Medium size number only system font

FONT_SYSTEM_NUMBER_HOT	16	
API Level 1.3.0

Large size number only system font

FONT_SYSTEM_NUMBER_THAI_HOT	17	
API Level 1.3.0

Huge size number only system font

FONT_GLANCE	18	
API Level 3.1.8

Glance text font

FONT_GLANCE_NUMBER	19	
API Level 3.1.8

Glance number only font

FONT_AUX1	20	
API Level 4.2.2

Auxiliary Font 1

FONT_AUX2	21	
API Level 4.2.2

Auxiliary Font 2

FONT_AUX3	22	
API Level 4.2.3

Auxiliary Font 3

FONT_AUX4	23	
API Level 4.2.3

Auxiliary Font 4

FONT_AUX5	24	
API Level 4.2.3

Auxiliary Font 5

FONT_AUX6	25	
API Level 4.2.3

Auxiliary Font 6

FONT_AUX7	26	
API Level 4.2.3

Auxiliary Font 7

FONT_AUX8	27	
API Level 4.2.3

Auxiliary Font 8

FONT_AUX9	28	
API Level 4.2.3

Auxiliary Font 9

ColorValue
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
COLOR_WHITE	0xFFFFFF	
API Level 1.0.0

White

COLOR_LT_GRAY	0xAAAAAA	
API Level 1.0.0

Light Gray

COLOR_DK_GRAY	0x555555	
API Level 1.0.0

Dark Gray

COLOR_BLACK	0x000000	
API Level 1.0.0

Black

COLOR_RED	0xFF0000	
API Level 1.0.0

Red

COLOR_DK_RED	0xAA0000	
API Level 1.0.0

Dark Red

COLOR_ORANGE	0xFF5500	
API Level 1.0.0

Orange

COLOR_YELLOW	0xFFAA00	
API Level 1.0.0

Yellow

COLOR_GREEN	0x00FF00	
API Level 1.0.0

Green

COLOR_DK_GREEN	0x00AA00	
API Level 1.0.0

Dark Green

COLOR_BLUE	0x00AAFF	
API Level 1.0.0

Blue

COLOR_DK_BLUE	0x0000FF	
API Level 1.0.0

Dark Blue

COLOR_PURPLE	0xAA00FF	
API Level 1.0.0

Purple. Not valid on fenix 3 or D2 Bravo. Use 0x5500AA instead.

COLOR_PINK	0xFF00FF	
API Level 1.0.0

Pink

COLOR_TRANSPARENT	-1	
API Level 1.0.0

Transparent

TextJustification
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
TEXT_JUSTIFY_RIGHT	0	
API Level 1.0.0

Right justify the text at the x/y coordinates

TEXT_JUSTIFY_CENTER	1	
API Level 1.0.0

Center justify the text at the x/y coordinates

TEXT_JUSTIFY_LEFT	2	
API Level 1.0.0

Left justify the text at the x/y coordinates

TEXT_JUSTIFY_VCENTER	4	
API Level 1.0.0

Center the text vertically

BlendMode
Blend mode

Specifies how colors of a source pixel will be blended with the colors of a destination pixel.

In the below descriptions

   S is source pixel
   D is destination pixel
   a is the alpha component
Since:

API Level 4.0.0

Name	Value	Since	Description	See Also
BLEND_MODE_DEFAULT	0	
API Level 4.0.0

Alias for BLEND_MODE_SOURCE_OVER

BLEND_MODE_NO_BLEND	1	
API Level 4.0.0

Alias for BLEND_MODE_SOURCE

BLEND_MODE_SOURCE_OVER	0	
API Level 4.2.1

S + (1 - S.a) * D

BLEND_MODE_SOURCE	1	
API Level 4.2.1

S, i.e. no blending.

BLEND_MODE_MULTIPLY	2	
API Level 4.2.1

(S * (1 - D.a)) + (D * (1 - S.a)) + (S * D)

BLEND_MODE_ADDITIVE	3	
API Level 4.2.1

S + D

AlphaBlending
Constant representing alpha blending state for buffered bitmaps

Since:

API Level 4.0.0

Name	Value	Since	Description	See Also
ALPHA_BLENDING_FULL	0	
API Level 4.0.0

Default surface for buffered bitmap with maximum alpha blending support

ALPHA_BLENDING_PARTIAL	1	
API Level 4.0.0

Surface for buffered bitmap with at least a 1-bit alpha channel. The actual number of bits may vary by device.

RadialTextDirection
Orientation for radial text

Since:

API Level 4.2.1

Name	Value	Since	Description	See Also
RADIAL_TEXT_DIRECTION_CLOCKWISE	0	
API Level 4.2.1

Top of text is further from center. Typically used for upright text along the top of a circle.

RADIAL_TEXT_DIRECTION_COUNTER_CLOCKWISE	1	
API Level 4.2.1

Bottom of text is further from center. Typically used for upright text along the bottom of a circle.

FilterMode
Filter mode

Specifies how many pixels to sample

Since:

API Level 4.2.1

Name	Value	Since	Description	See Also
FILTER_MODE_POINT	0	
API Level 4.2.1

Point filter

FILTER_MODE_BILINEAR	1	
API Level 4.2.1

Biliniear filter

ArcDirection
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
ARC_COUNTER_CLOCKWISE	0	
API Level 1.2.0

Counter clockwise draw

ARC_CLOCKWISE	1	
API Level 1.2.0

Clockwise draw

Typedef Summary
collapse
BitmapType as WatchUi.BitmapResource or Graphics.BufferedBitmap or Graphics.BitmapReference or Graphics.BufferedBitmapReference
ColorType as Lang.Number or Graphics.ColorValue
FontType as WatchUi.FontResource or Graphics.FontDefinition or Graphics.FontReference or Graphics.VectorFont
Point2D as [ Lang.Numeric, Lang.Numeric ]
Type alias for an Array of length 2.
VectorFontOptions as { :face as Lang.String or Lang.Array<Lang.String>, :size as Lang.Numeric, :font as Graphics.FontDefinition or Graphics.VectorFont, :scale as Lang.Float }
Instance Method Summary
collapse
createBufferedBitmap(options as { :width as Lang.Number, :height as Lang.Number, :palette as Lang.Array<Graphics.ColorType>, :colorDepth as Lang.Number, :bitmapResource as WatchUi.BitmapResource or Graphics.BitmapReference, :alphaBlending as Graphics.AlphaBlending }) as Graphics.BufferedBitmapReference
Create a buffered bitmap object.
createColor(alpha as Lang.Number, red as Lang.Number, green as Lang.Number, blue as Lang.Number) as Lang.Number
Create a color with the individual channel values passed in.
fitTextToArea(text as Lang.String, font as Graphics.FontType, width as Lang.Numeric, height as Lang.Numeric, truncate as Lang.Boolean) as Lang.String or Null
Get a text string to fit in a specified area.
getFontAscent(font as Graphics.FontType) as Lang.Number
Get the recommended distance above the baseline for single spaced text.
getFontDescent(font as Graphics.FontType) as Lang.Number
Get the recommended distance below the baseline for single spaced text.
getFontHeight(font as Graphics.FontType) as Lang.Number
Get the height (ascent plus descent) of the given font.
getVectorFont(options as Graphics.VectorFontOptions) as Graphics.VectorFont or Null
Get a font for this device.
Typedef Details
BitmapType as WatchUi.BitmapResource or Graphics.BufferedBitmap or Graphics.BitmapReference or Graphics.BufferedBitmapReference
Since:

API Level 1.0.0

ColorType as Lang.Number or Graphics.ColorValue
Since:

API Level 1.0.0

FontType as WatchUi.FontResource or Graphics.FontDefinition or Graphics.FontReference or Graphics.VectorFont
Since:

API Level 1.0.0

Point2D as [ Lang.Numeric, Lang.Numeric ]
Type alias for an Array of length 2

Since:

API Level 1.0.0

VectorFontOptions as { :face as Lang.String or Lang.Array<Lang.String>, :size as Lang.Numeric, :font as Graphics.FontDefinition or Graphics.VectorFont, :scale as Lang.Float }
Since:

API Level 1.0.0

Instance Method Details
createBufferedBitmap(options as { :width as Lang.Number, :height as Lang.Number, :palette as Lang.Array<Graphics.ColorType>, :colorDepth as Lang.Number, :bitmapResource as WatchUi.BitmapResource or Graphics.BitmapReference, :alphaBlending as Graphics.AlphaBlending }) as Graphics.BufferedBitmapReference
Create a buffered bitmap object. This function will return a Toybox::Graphics::BufferedBitmapReference object which can be used to reference the Toybox::Graphics::BufferedBitmap object.

Note:
The result of a draw/fill operation to a BufferedBitmap created with ALPHA_BLENDING_PARTIAL may produce inconsistent results between devices and the ConnectIQ simulator if the drawn pixels are not fully opaque or fully transparent.

Parameters:

options — (Lang.Dictionary) — Dictionary of options. Must contain width and height, with optional palette, or a BitmapResource. This resource is not allowed to have an alpha channel.
:width — (Lang.Number) — The width of the surface in pixels. Must be a positive integer value.
:height — (Lang.Number) — The height of the surface in pixels. Must be a positive integer value.
:palette — (Lang.Array) — The colors used in this surface. Using less will reduce the bitmap size. The bitmap will use the system default if not provided. The maximum palette size allowed is 256 colors. If a palette is provided, the number of colors must also be <= to the number of system colors.
:colorDepth — (Lang.Number) — Color depth in terms of bits/pixel, when missing, default to system value.
:bitmapResource — (WatchUi.BitmapResource) — A BitmapResource or BitmapReference to initialize
:alphaBlending — (Graphics.AlphaBlending) — A AlphaBlending enum to specify the level of alpha blending support for this buffered bitmap object.
Returns:

Toybox::Graphics::BufferedBitmapReference A reference to BufferedBitmap object
Since:

API Level 4.0.0

Throws:

(Graphics.InvalidPaletteException) — Thrown if the palette size exceeds the number of system colors.
(Graphics.InvalidPaletteException) — Thrown if the palette size exceeds 256 colors.
(Graphics.InvalidBitmapResourceException) — Thrown if the BitmapResource provided has an alpha channel.
createColor(alpha as Lang.Number, red as Lang.Number, green as Lang.Number, blue as Lang.Number) as Lang.Number
Create a color with the individual channel values passed in

Parameters:

alpha — (Lang.Number) — Number value ranging from 0-255 representing alpha channel
red — (Lang.Number) — Number value ranging from 0-255 representing red channel
green — (Lang.Number) — Number value ranging from 0-255 representing green channel
blue — (Lang.Number) — Number value ranging from 0-255 representing blue channel
Returns:

color [Toybox::Lang::Number] 32-bit value representing the created color that can be used with Toybox.Graphics functions.
Since:

API Level 4.0.0

fitTextToArea(text as Lang.String, font as Graphics.FontType, width as Lang.Numeric, height as Lang.Numeric, truncate as Lang.Boolean) as Lang.String or Null
Get a text string to fit in a specified area

Note:
FontReference is only supported in CIQ 4.0.0 and later

Parameters:

text — (Lang.String) — The text to fit into the given area, which may include newlines
font — (Graphics.FontType) — The font to use when determining line break placement
width — (Lang.Numeric) — The width of the area to fit within
height — (Lang.Numeric) — The height of the area to fit within
truncate — (Lang.Boolean) — If true, the resulting string may be truncated to fit within the provided area using the provided font
Returns:

Returns a String suitable for display in the given area. The String will be truncated if the 'truncate' parameter is true and the String cannot fit into the specified area. Otherwise, null will be returned.
Since:

API Level 3.1.0

getFontAscent(font as Graphics.FontType) as Lang.Number
Get the recommended distance above the baseline for single spaced text.

The base line is the line on which the text sits.

Note:
FontReference is only supported in CIQ 4.0.0 and later

Parameters:

font — (Graphics.FontType) — The font to use
Returns:

Lang.Number — The ascent of the font
Since:

API Level 1.2.0

getFontDescent(font as Graphics.FontType) as Lang.Number
Get the recommended distance below the baseline for single spaced text.

The base line is the line on which the text sits.

Note:
FontReference is only supported in CIQ 4.0.0 and later

Parameters:

font — (Graphics.FontType) — The font to use
Returns:

Lang.Number — The descent of the font
Since:

API Level 1.2.0

getFontHeight(font as Graphics.FontType) as Lang.Number
Get the height (ascent plus descent) of the given font.

Note:
FontReference is only supported in CIQ 4.0.0 and later

Parameters:

font — (Graphics.FontType) — The font to use
Returns:

Lang.Number — The height of the font
Since:

API Level 1.2.0

getVectorFont(options as Graphics.VectorFontOptions) as Graphics.VectorFont or Null
Get a font for this device

Note:
The :font and :scale options are only supported in CIQ 5.1.0 and later.

Parameters:

options — (Lang.Dictionary, Graphics.FontDefinition) — A description of the font to retrieve.
:face — (Lang.String, Lang.Array) — A String representing the face name requested, or an Array of face names that are acceptable.
:size — (Lang.Numeric) — The height of the font requested in pixels as a positive number.
:font — (Graphics.FontDefinition, Graphics.VectorFont) — The font to apply a scale to.
:scale — (Lang.Float) — The amount to scale the font.
Supported Devices:

[View devices]
Returns:

Graphics.VectorFont — if a font can be created for the given parameters, otherwise null
See Also:

Reference Guides - Devices Reference
Since:

API Level 4.2.1

Throws:

(Lang.UnexpectedTypeException) — Thrown if options is not a supported type.
(Lang.UnexpectedTypeException) — Thrown if the provided :size or :scale are not a supported type.
(Lang.UnexpectedTypeException) — Thrown if the provided :face is not a supported type.
(Lang.InvalidValueException) — Thrown if the provided :face value is out of range.
(Lang.InvalidValueException) — Thrown if the provided :size or :scale value is not positive.

Class: Toybox.Graphics.ResourceReference
Inherits:
Toybox.Lang.Objectshow all
Overview
Object represents a reference for the resource allocated from the graphics memory pool rather than from the app's local memory. The underlying resource object could be temporarily purged from the system memory pool when all strong references are destroyed. The memory allocation is performed only when ResourceReference::get() method is invoked.

Since:

API Level 4.0.0

Direct Known Subclasses
Graphics.BitmapReference, Graphics.BufferedBitmapReference, Graphics.FontReference

Typedef Summary
collapse
Options as { :resource as WatchUi.FontResource or WatchUi.BitmapResource or Graphics.BufferedBitmap, :rezId as Lang.ResourceId, :bufferedBitmap as { :bitmapResource as Lang.ResourceId, :width as Lang.Number, :height as Lang.Number, :palette as Lang.Array<Graphics.ColorType>, :colorDepth as Lang.Number } }
Instance Method Summary
collapse
get() as WatchUi.BitmapResource or Graphics.BufferedBitmap or WatchUi.FontResource or Null
Get the underlying resource object referenced by the ResourceReference, this trigger either the allocate from the system memory pool or return the existing resource in the pool.
Typedef Details
Options as { :resource as WatchUi.FontResource or WatchUi.BitmapResource or Graphics.BufferedBitmap, :rezId as Lang.ResourceId, :bufferedBitmap as { :bitmapResource as Lang.ResourceId, :width as Lang.Number, :height as Lang.Number, :palette as Lang.Array<Graphics.ColorType>, :colorDepth as Lang.Number } }
Since:

API Level 4.0.0

Instance Method Details
get() as WatchUi.BitmapResource or Graphics.BufferedBitmap or WatchUi.FontResource or Null
Get the underlying resource object referenced by the ResourceReference, this trigger either the allocate from the system memory pool or return the existing resource in the pool.

Returns:

Lang.Object — The resource object referenced, or null if failed.
Since:

API Level 4.0.0

Throws:

(Graphics.OutOfGraphicsMemoryException) — Thrown if resource cannot be loaded or restored because there isn't enough free pool to load the resource


Module: Toybox.Math
Overview
The Math Module provides various math methods available for use by Apps.

Example:

Prints the circumference of a circle.
using Toybox.System;
using Toybox.Math;
var r = 5;
var circumference = (2 * Math.PI * r);

System.println(circumference);

Example:

Prints the area of a square with Math.pow via direct call.
using Toybox.System;
using Toybox.Math;

System.println(Math.pow(10, 2));

Example:

Solves for c using the Pythagorean Theorem and multiple Math API methods.
using Toybox.System;
using Toybox.Math;
var a = 2;
var b = 3;
var c = Math.sqrt((Math.pow(a, 2) + Math.pow(b, 2)));

System.println(c);
Since:

API Level 1.0.0

Classes Under Namespace
Classes: Filter, FirFilter, IirFilter

Constant Summary
Constant Variables
Type	Name	Value	Since	Description
Type	E	2.7182818284590452354	
API Level 1.0.0

32-bit floating point representation of E

Type	PI	3.14159265358979323846	
API Level 1.0.0

32-bit floating point representation of PI

Instance Method Summary
collapse
acos(x as Lang.Numeric) as Lang.Decimal
Get the arc cosine of an angle.
asin(x as Lang.Numeric) as Lang.Decimal
Get the arc sine of an angle.
atan(x as Lang.Numeric) as Lang.Decimal
Get the arc tangent of an angle.
atan2(y as Lang.Numeric, x as Lang.Numeric) as Lang.Decimal
Get the arc tangent of y/x in radians.
ceil(x as Lang.Numeric) as Lang.Numeric
Compute the ceiling of a value.
cos(x as Lang.Numeric) as Lang.Decimal
Get the cosine of an angle.
floor(x as Lang.Numeric) as Lang.Numeric
Compute the floor of a value.
ln(x as Lang.Numeric) as Lang.Decimal
Get natural logarithm of a value.
log(x as Lang.Numeric, base as Lang.Numeric) as Lang.Decimal
Get logarithm of a value using the specified base.
mean(data as Lang.Array<Lang.Numeric>) as Lang.Double
Get the arithmetic mean (average) of an array of data.
mode(data as Lang.Array<Lang.Object>) as Lang.Object
Get the most common value found in an array of data.
pow(x as Lang.Numeric, y as Lang.Numeric) as Lang.Decimal
Calculate x to the power of y.
rand() as Lang.Number
Returns a pseudo-random Number.
round(x as Lang.Numeric) as Lang.Numeric
Round a value.
sin(x as Lang.Numeric) as Lang.Decimal
Get the sine of an angle.
sqrt(x as Lang.Numeric) as Lang.Decimal
Calculate the square root of a value.
srand(seed as Lang.Number) as Void
Seed the random number generator.
stdev(data as Lang.Array<Lang.Numeric>, xbar as Lang.Double or Null) as Lang.Double
Get the standard deviation of a sample of population data.
tan(x as Lang.Numeric) as Lang.Decimal
Get the tangent of an angle.
toDegrees(x as Lang.Numeric) as Lang.Decimal
Convert an angle from radians to degrees.
toRadians(x as Lang.Numeric) as Lang.Decimal
Convert an angle from degrees to radians.
variance(data as Lang.Array<Lang.Numeric>, xbar as Lang.Numeric or Null) as Lang.Double
Get the sample variance of an array of data.
Instance Method Details
acos(x as Lang.Numeric) as Lang.Decimal
Get the arc cosine of an angle.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The cosine value
Returns:

Lang.Float, Lang.Double — The interval [0..PI] in radians, or NaN if invalid
Float if input is Number or Float
Double if input is Long or Double
Since:

API Level 1.0.0

asin(x as Lang.Numeric) as Lang.Decimal
Get the arc sine of an angle.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The sine value
Returns:

Lang.Float, Lang.Double — The interval [-PI/2..PI/2] in radians, or NaN if invalid
Float if input is Number or Float
Double if input is Long or Double
Since:

API Level 1.0.0

atan(x as Lang.Numeric) as Lang.Decimal
Get the arc tangent of an angle.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The tangent value
Returns:

Lang.Float, Lang.Double — The interval [-PI/2..PI/2] in radians, or NaN if invalid
Float if input is Number or Float
Double if input is Long or Double
Since:

API Level 1.0.0

atan2(y as Lang.Numeric, x as Lang.Numeric) as Lang.Decimal
Get the arc tangent of y/x in radians.

Parameters:

y — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The proportion of the y coordinate
x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The proportion of the x coordinate
Returns:

Lang.Float, Lang.Double — The principal arc tangent of y/x, in the interval [-PI..PI] radians, or NaN if invalid
Float if both inputs are Number or Float
Double if either input is Long or Double
Since:

API Level 1.3.0

ceil(x as Lang.Numeric) as Lang.Numeric
Compute the ceiling of a value.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — A numeric value
Returns:

Lang.Number, Lang.Float, Lang.Long, Lang.Double — The smallest integer greater than or equal to x Return type matches the input parameter type
Since:

API Level 1.3.0

cos(x as Lang.Numeric) as Lang.Decimal
Get the cosine of an angle.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The angle in radians
Returns:

Lang.Float, Lang.Double — The cosine value of x in radians
Float if input is Number or Float
Double if input is Long or Double
Since:

API Level 1.0.0

floor(x as Lang.Numeric) as Lang.Numeric
Compute the floor of a value.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — A numeric value
Returns:

Lang.Number, Lang.Float, Lang.Long, Lang.Double — The largest integer less than or equal to x Return type matches the input parameter type
Since:

API Level 1.3.0

ln(x as Lang.Numeric) as Lang.Decimal
Get natural logarithm of a value

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The value for which to get the logarithm
Returns:

Lang.Float, Lang.Double — natural logarithm of x
Float if input is Number or Float
Double if input is Long or Double
Since:

API Level 2.3.0

log(x as Lang.Numeric, base as Lang.Numeric) as Lang.Decimal
Get logarithm of a value using the specified base

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The value for which to get the logarithm
base — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The base value.
Returns:

Lang.Float, Lang.Double — specified base logarithm of x
Float if both inputs are Number or Float
Double if either input is Long or Double
Since:

API Level 1.0.0

mean(data as Lang.Array<Lang.Numeric>) as Lang.Double
Get the arithmetic mean (average) of an array of data.

Parameters:

data — (Lang.Array) — An array of Number, Float, Long, or Double values
Returns:

Lang.Double — The arithmetic mean of the values in data
Since:

API Level 3.1.0

Throws:

(Lang.InvalidValueException) — Thrown if the provided data array is empty.
mode(data as Lang.Array<Lang.Object>) as Lang.Object
Get the most common value found in an array of data.

Parameters:

data — (Lang.Array) — An array of Objects
Returns:

Lang.Object — The most frequently occurring value in data.
Since:

API Level 3.1.0

Throws:

(Lang.InvalidValueException) — Thrown if there is no most frequently occurring value or the passed in value array is empty
pow(x as Lang.Numeric, y as Lang.Numeric) as Lang.Decimal
Calculate x to the power of y.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — Base
y — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — Exponent
Returns:

Lang.Float, Lang.Double — x to the power of y
Float if both inputs are Number or Float
Double if either input is Long or Double
Since:

API Level 1.0.0

rand() as Lang.Number
Returns a pseudo-random Number. Use the srand() function to seed the random number generator.

Returns:

Lang.Number — Non-negative random number
Since:

API Level 1.0.0

round(x as Lang.Numeric) as Lang.Numeric
Round a value.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — A numeric value
Returns:

Lang.Number, Lang.Float, Lang.Long, Lang.Double — The closest integer to x. Decimal values >= .5 will be rounded up Return type matches the input parameter type
Since:

API Level 1.3.0

sin(x as Lang.Numeric) as Lang.Decimal
Get the sine of an angle.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The angle in radians
Returns:

Lang.Float, Lang.Double — The sine value of x in radians
Float if input is Number or Float
Double if input is Long or Double
Since:

API Level 1.0.0

sqrt(x as Lang.Numeric) as Lang.Decimal
Calculate the square root of a value.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The value for which to get the square root
Returns:

Lang.Float, Lang.Double — The square root of x, or NaN if invalid
Float if input is Number or Float
Double if input is Long or Double
Since:

API Level 1.0.0

srand(seed as Lang.Number) as Void
Seed the random number generator.

Note:
srand() does not return any value.

Parameters:

seed — (Lang.Number) — The value used for seeding rand()
Since:

API Level 1.0.0

stdev(data as Lang.Array<Lang.Numeric>, xbar as Lang.Double or Null) as Lang.Double
Get the standard deviation of a sample of population data.

Parameters:

data — (Lang.Array) — An array of Number, Float, Long, or Double values with at least two elements.
xbar — (Lang.Double) — The mean, if known. Otherwise, pass null and the mean of data will be calculated.
Returns:

Lang.Double — The standard deviation of the samples
Since:

API Level 3.1.0

Throws:

(Lang.InvalidValueException) — Thrown if the provided data array has fewer than two elements.
tan(x as Lang.Numeric) as Lang.Decimal
Get the tangent of an angle.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The angle in radians
Returns:

Lang.Float, Lang.Double — The tangent value of x in radians Toybox::Lang::Float if input is Toybox::Lang::Number or Toybox::Lang::Float Toybox::Lang::Double if input is Toybox::Lang::Long or Toybox::Lang::Double
Since:

API Level 1.0.0

toDegrees(x as Lang.Numeric) as Lang.Decimal
Convert an angle from radians to degrees.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The angle in radians
Returns:

Lang.Float, Lang.Double — The angle of x in degrees
Float if input is Number or Float
Double if input is Long or Double
Since:

API Level 1.3.0

toRadians(x as Lang.Numeric) as Lang.Decimal
Convert an angle from degrees to radians.

Parameters:

x — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The angle in degrees
Returns:

Lang.Float, Lang.Double — The angle of x in radians
Float if input is Number or Float
Double if input is Long or Double
Since:

API Level 1.3.0

variance(data as Lang.Array<Lang.Numeric>, xbar as Lang.Numeric or Null) as Lang.Double
Get the sample variance of an array of data.

Returns the sample variance with Bessel's correction.

Parameters:

data — (Lang.Array) — An array of Number, Float, Long, or Double values with at least two elements.
xbar — (Lang.Number, Lang.Float, Lang.Long, Lang.Double) — The mean, if known. Otherwise, pass null and the mean of data will be calculated.
Returns:

Lang.Double — The variance of the samples
Since:

API Level 3.1.0

Throws:

(Lang.InvalidValueException) — Thrown if the provided data array has fewer than two elements.

Class: Toybox.Math.Filter
Inherits:
Toybox.Lang.Objectshow all
Overview
This is the base class for filters.

Filters are devices or processes that remove some unwanted components or features from a signal or set of data. More detailed examples of filters can be found in the FirFilter and IirFilter definitions.

See Also:
Filters
Note:
An exception will be thrown if the base Filter class version of this method is called.

Example:

This shows how a filter's method can be used on a set of data
using Toybox.Math;
    var exampleFilter;
    var interestingCoefficients;
    var importantGain;
    var messyData;
    var filteredData;

    // Constructor
    function initialize() {

        // initialize filter
        var options = {
            :coefficients => [interestingCoefficients],
            :gain => importantGain
        };

        try {
            exampleFilter = new Math.FirFilter(options);
        }
        catch(e) {
            System.println(e.getErrorMessage());
        }
    }

    // apply filter
    function exampleApplyFilter(messyData) {
        filteredData = exampleFilter.apply(messyData);
        return filteredData;
    }
Since:

API Level 2.3.0

Direct Known Subclasses
Math.FirFilter, Math.IirFilter

Instance Method Summary
collapse
apply(data as Lang.Array<Lang.Numeric>) as Lang.Array<Lang.Float>
Apply the Filter to an Array of samples.
initialize(dictionary as Lang.Dictionary)
Constructor.
Instance Method Details
apply(data as Lang.Array<Lang.Numeric>) as Lang.Array<Lang.Float>
Apply the Filter to an Array of samples.

Note:
An Exception will be thrown if the base Filter class version of this method is called.

Parameters:

data — Array of samples to apply filter
Returns:

Array of samples with filter applied.
Since:

API Level 2.3.0

Throws:

(Lang.SymbolNotAllowedException) — If called on base class Filter object
initialize(dictionary as Lang.Dictionary)
Constructor

Parameters:

dictionary — (Lang.Dictionary) — Unused. Preserves argument count for compatibility
Since:

API Level 2.3.0

Class: Toybox.Math.FirFilter
Inherits:
Toybox.Math.Filtershow all
Overview
Finite Impulse Response (FIR) filter implementation.

See Also:
FirFilters
Example:

Shows the constructor and implementation for filter use with accelerometer data. Borrowed from the PitchCounter sample included in the SDK.
using Toybox.Math;
var mX = [0];
var mY = [0];
var mZ = [0];
var mFilter;

// Constructor
function initialize() {
    // initialize FIR filter
    var options = {
        :coefficients => [ -0.0278f, 0.9444f, -0.0278f ],
        :gain => 0.001f
    };

    try {
        mFilter = new Math.FirFilter(options);
    }
    catch(e) {
        System.println(e.getErrorMessage());
    }
}

// Callback to receive accelerometer data
function accel_callback(sensorData) {
    mX = mFilter.apply(sensorData.accelerometerData.x);
    mY = sensorData.accelerometerData.y;
    mZ = sensorData.accelerometerData.z;
    onAccelData();
}
Since:

API Level 2.3.0

Instance Method Summary
collapse
apply(data as Lang.Array<Lang.Numeric>) as Lang.Array<Lang.Float>
initialize(dictionary as { :coefficients as Lang.Array<Lang.Float> or Lang.ResourceId, :gain as Lang.Float })
Constructor.
Instance Method Details
apply(data as Lang.Array<Lang.Numeric>) as Lang.Array<Lang.Float>
Since:

API Level 2.3.0

initialize(dictionary as { :coefficients as Lang.Array<Lang.Float> or Lang.ResourceId, :gain as Lang.Float })
Constructor

Parameters:

dictionary — (Lang.Dictionary) — A Dictionary containing filter settings.
:coefficients — (Lang.Array, Lang.ResourceId) — An Array of Float values that specify the filter coefficients. A ResourceId referencing a JSON Array resource can also be used here.
:gain — (Lang.Float) — A Float value that specifies a multiplier to be applied to the coefficients.
Since:

API Level 2.3.0

Throws:

(Lang.InvalidOptionsException) — If the Dictionary does not have valid coefficients for filter or the :gain field is missing. Will also be thrown if an invalid JSON ResourceId is specified for coefficients instead of an array


Class: Toybox.Math.IirFilter
Inherits:
Toybox.Math.Filtershow all
Overview
Infinite Impulse Response (IIR) filter implementation.

See Also:
IirFilters
Example:

Shows the constructor and implementation for filter use with accelerometer data.
using Toybox.Math;
var mX = [0];
var mY = [0];
var mZ = [0];
var mFilter;

// Constructor
function initialize() {
    // initialize IIR filter. Coefficients are for demonstration purposes only.
    var options = {
        :coefficients_a => [ -0.0278f, 0.9444f, -0.0278f ],
        :coefficients_b => [ 0.0278f, -0.9444f, 0.0278],
        :gain => 0.001f
    };

    try {
        mFilter = new Math.IirFilter(options);
    }
    catch(e) {
        System.println(e.getErrorMessage());
    }
}

// Callback to receive accelerometer data
function accel_callback(sensorData) {
    mX = mFilter.apply(sensorData.accelerometerData.x);
    mY = sensorData.accelerometerData.y;
    mZ = sensorData.accelerometerData.z;
    onAccelData();
}
Since:

API Level 2.3.0

Instance Method Summary
collapse
apply(data as Lang.Array<Lang.Numeric>) as Lang.Array<Lang.Float>
initialize(dictionary as { :coefficients_a as Lang.Array<Lang.Float> or Lang.ResourceId, :coefficients_b as Lang.Array<Lang.Float> or Lang.ResourceId, :gain as Lang.Float })
Constructor.
Instance Method Details
apply(data as Lang.Array<Lang.Numeric>) as Lang.Array<Lang.Float>
Since:

API Level 2.3.0

initialize(dictionary as { :coefficients_a as Lang.Array<Lang.Float> or Lang.ResourceId, :coefficients_b as Lang.Array<Lang.Float> or Lang.ResourceId, :gain as Lang.Float })
Constructor

Parameters:

dictionary — (Lang.Dictionary) — A Dictionary containing filter settings.
:coefficients_a — (Lang.Array, Lang.ResourceId) — An Array of Float values that specify the feedback filter coefficients. A ResourceId referencing a JSON Array resource can also be used here.
:coefficients_b — (Lang.Array, Lang.ResourceId) — An Array of Float values that specify the feed forward filter coefficients. A ResourceId referencing a JSON Array resource can also be used here.
:gain — (Lang.Float) — A Float value that specifies a multiplier to be applied to the coefficients.
Since:

API Level 2.3.0

Throws:

(Lang.InvalidOptionsException) — If the Dictionary does not have valid coefficients for filter or the :gain field is missing. Will also be thrown if an invalid JSON ResourceId is specified for :coefficients instead of an array

Module: Toybox.Position
Overview
The Position module provides an interface for location information and positioning sensors.

This module also provides two sets of constants:

GEO: Used to specify the Location formatting.

QUALITY: Represents the GPS fix quality when the Location information was calculated

Example:

using Toybox.Position;
using Toybox.System;
Position.enableLocationEvents(Position.LOCATION_ONE_SHOT, method(:onPosition));
function onPosition(info) {
    var myLocation = info.position.toDegrees();
    System.println("Latitude: " + myLocation[0]); // e.g. 38.856147
    System.println("Longitude: " + myLocation[1]); // e.g -94.800953
}
Since:

API Level 1.0.0

Classes Under Namespace
Classes: Info, Location

Constant Summary
Constellation
This has been deprecated This enum may be removed after System 10.
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
CONSTELLATION_GPS	0	
API Level 3.2.0

Use the GPS satellite constellation

CONSTELLATION_GLONASS	1	
API Level 3.2.0

Use the GLONASS satellite constellation

CONSTELLATION_GALILEO	2	
API Level 3.2.0

Use the GALILEO satellite constellation

Configuration
Configuration values for known GNSS configurations

Since:

API Level 3.3.6

Name	Value	Since	Description	See Also
CONFIGURATION_GPS	1	
API Level 3.3.6

GPS L1

CONFIGURATION_GPS_GLONASS	2	
API Level 3.3.6

GPS L1 and GLONASS

CONFIGURATION_GPS_GALILEO	3	
API Level 3.3.6

GPS L1 and GALILEO L1

CONFIGURATION_GPS_BEIDOU	4	
API Level 3.3.6

GPS L1 and BEIDOU L1

CONFIGURATION_GPS_GLONASS_GALILEO_BEIDOU_L1	5	
API Level 3.3.6

GPS L1, GLONASS, GALILEO L1, BEIDOU L1

This option is supported by System 6 devices like fenix7 and edge1040

CONFIGURATION_GPS_GLONASS_GALILEO_BEIDOU_L1_L5	6	
API Level 3.3.6

GPS L1, GPS L5, GLONASS, GALILEO L1A, GALILEO L5, BEIDOU L1, BEIDOU L5

Referred to as Multi-GNSS Multi-band on Edge 1040.

This option is supported by System 6 devices like fenix7 and edge1040

CONFIGURATION_SAT_IQ	255	
API Level 3.3.6

AutoGNSS (SatIQ™)

CoordinateFormat
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
GEO_DEG	0	
API Level 1.0.0

The decimal degree format: ddd.dddddd (e.g. 38.278652)

Decimal Degrees
GEO_DM	1	
API Level 1.0.0

The degrees/decimal minutes format: dddmm.mmm (e.g 38 27.865')

GEO_DMS	2	
API Level 1.0.0

degrees/minutes/seconds (DMS) format: ddd mm ss (e.g. 38 27' 8")

GEO_MGRS	3	
API Level 1.0.0

Military Grid Reference System, or MGRS (e.g. 4QFJ12345678)

Military Grid Reference System
Quality
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
QUALITY_NOT_AVAILABLE	0	
API Level 1.0.0

GPS is not available

QUALITY_LAST_KNOWN	1	
API Level 1.0.0

The Location is based on the last known GPS fix.

QUALITY_POOR	2	
API Level 1.0.0

The Location was calculated with a poor GPS fix. Only a 2-D GPS fix is available, likely due to a limited number of tracked satellites.

QUALITY_USABLE	3	
API Level 1.0.0

The Location was calculated with a usable GPS fix. A 3-D GPS fix is available, with marginal HDOP (horizontal dilution of precision)

Dilution of Precision
QUALITY_GOOD	4	
API Level 1.0.0

The Location was calculated with a good GPS fix. A 3-D GPS fix is available, with good-to-excellent HDOP (horizontal dilution of precision).

Dilution of Precision
LocationAcquisitionType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
LOCATION_ONE_SHOT	0	
API Level 1.0.0

Enables a one-time Location acquisition

LOCATION_CONTINUOUS	1	
API Level 1.0.0

Enables continuous Location tracking

LOCATION_DISABLE	2	
API Level 1.0.0

Disables Location tracking

PositioningMode
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
POSITIONING_MODE_NORMAL	0	
API Level 3.2.0

Standard positioning mode used by default for fitness activities

POSITIONING_MODE_AVIATION	1	
API Level 3.2.0

Enable special mode for aviation use-cases that require support for higher altitudes.

Instance Method Summary
collapse
createBoundingBox(locations as Lang.Array<Position.Location>) as [ Position.Location, Position.Location ] or Null
Create a bounding box from an array of Location objects.
enableLocationEvents(options as { :acquisitionType as Position.LocationAcquisitionType, :constellations as Lang.Array<Position.Constellation>, :configuration as Position.Configuration, :mode as Position.PositioningMode } or Position.LocationAcquisitionType, listener as Null or Lang.Method(loc as Position.Info) as Void) as Void
Request a Location event.
getInfo() as Position.Info
Get the current Position.Info.
hasConfigurationSupport(config as Position.Configuration) as Lang.Boolean
Determines if the device supports a requested GPS configuration.
parse(string as Lang.String, format as Position.CoordinateFormat) as Position.Location
Convert a String to a Location object.
Instance Method Details
createBoundingBox(locations as Lang.Array<Position.Location>) as [ Position.Location, Position.Location ] or Null
Create a bounding box from an array of Location objects.

Parameters:

locations — (Lang.Array) — Array of Location objects.
Returns:

Lang.Array — Array of Location objects that specify the bounds of the input array or null if the the input array is empty. The first element describes the top left corner, the second describes the bottom right.
Since:

API Level 3.0.3

enableLocationEvents(options as { :acquisitionType as Position.LocationAcquisitionType, :constellations as Lang.Array<Position.Constellation>, :configuration as Position.Configuration, :mode as Position.PositioningMode } or Position.LocationAcquisitionType, listener as Null or Lang.Method(loc as Position.Info) as Void) as Void
Request a Location event.

Using this API requires enabling the Positioning Permission. Only Device Apps and Widgets may use this API.

Note:
Passing an options Dictionary is only supported with ConnectIQ 3.2.0 and later.

Note:
Passing the :configuration option is only supported with ConnectIQ 3.3.6 or later.

Note:
Multitasking: Location events will be disabled when app enters inacitve state, and re-enabled when is active again. These state changes are denoted by calls to AppBase.onActive() and AppBase.onInactive().

Parameters:

options — (Lang.Number, Lang.Dictionary) — A LOCATION_* value or Toybox::Lang::Dictionary of options.
:acquisitionType — (Position.LocationAcquisitionType) — A LOCATION_* enum value indicating the position acquisition type to use.
:constellations — (Lang.Array) — An array of CONSTELLATION_* enum values specifying what constellations to enable. If not provided, CONSTELLATION_GPS will be used by default.
:configuration — (Position.Configuration) — A CONFIGURATION_* value specifying what configuration to enable. Only available with ConnectIQ 3.3.6 and later.
:mode — (Position.PositioningMode) — a POSITIONING_MODE_* value specifying the mode to use. If null POSITIONING_MODE_NORMAL will be used by default.
listener — (Lang.Method) — A reference to a listener method:
Called when location updates are received
Receives a Position.Info object
Example:

using Toybox.Position;

var options = {
    :acquisitionType => Position.LOCATION_CONTINUOUS
};

if (Position has :POSITIONING_MODE_AVIATION) {
    options[:mode] = Position.POSITIONING_MODE_AVIATION;
}

if (Position has :hasConfigurationSupport) {
    if (Position has :CONFIGURATION_GPS_GLONASS_GALILEO_BEIDOU_L1_L5) &&
       (Position.hasConfigurationSupport(Position.CONFIGURATION_GPS_GLONASS_GALILEO_BEIDOU_L1_L5)) {
        options[:configuration] = Position.CONFIGURATION_GPS_GLONASS_GALILEO_BEIDOU_L1_L5;
    } else if (Position has :CONFIGURATION_GPS_GLONASS_GALILEO_BEIDOU_L1) &&
       (Position.hasConfigurationSupport(Position.CONFIGURATION_GPS_GLONASS_GALILEO_BEIDOU_L1)) {
        options[:configuration] = Position.CONFIGURATION_GPS_GLONASS_GALILEO_BEIDOU_L1;
    } else if (Position has :CONFIGURATION_GPS) &&
       (Position.hasConfigurationSupport(Position.CONFIGURATION_GPS)) {
        options[:configuration] = Position.CONFIGURATION_GPS;
    }
} else if (Position has :CONSTELLATION_GLONASS) {
    // this can fail with InvalidValueException if combination is not supported by device
    options[:constellations] = [ Position.CONSTELLATION_GPS, Position.CONSTELLATION_GLONASS ];
} else {
    options = Position.LOCATION_CONTINUOUS;
}

// Continuous location updates using selected options
Position.enableLocationEvents(options, method(:onPosition));

function onPosition(info) {
    var myLocation = info.position.toDegrees();
}

Supported Devices:

[View devices]
Since:

API Level 1.0.0

Throws:

(Lang.InvalidValueException) — Thrown if :acquisitionType is invalid, if a specific CONSTELLATION_* value is not supported by a device, or if an invalid combination of constellation values are specified.
getInfo() as Position.Info
Get the current Position.Info.

Using this API requires enabling the Positioning Permission. This is useful for retrieving the current position info either on demand or periodically within a Timer.

Example:

Get position info once per second
using Toybox.Position;
using Toybox.System;
using Toybox.Timer;
var dataTimer = new Timer.Timer();
dataTimer.start(method(:timerCallback), 1000, true); // A one-second timer
function timerCallback() {
    var positionInfo = Position.getInfo();
    if (positionInfo has :altitude && positionInfo.altitude != null) {
        var altitude = positionInfo.altitude;
        System.println("Altitude: " + altitude);
    }
}
Supported Devices:

[View devices]
Returns:

Position.Info
Since:

API Level 1.0.0

hasConfigurationSupport(config as Position.Configuration) as Lang.Boolean
Determines if the device supports a requested GPS configuration

Parameters:

config — (Position.Configuration) — A CONFIGURATION_* enum value specifying what configuration to enable. Only available with ConnectIQ 3.3.6 and later.
Supported Devices:

[View devices]
Since:

API Level 3.3.6

parse(string as Lang.String, format as Position.CoordinateFormat) as Position.Location
Convert a String to a Location object.

The input String must be in one of the four formats described by the Position.GEO_* constants.

Parameters:

string — (Lang.String) — The String to parse
format — (Position.CoordinateFormat) — A Position.GEO_* value
Example:

using Toybox.Position;
using Toybox.System;
var locString = "38.856147, -94.800953";
var myLocation = Position.parse(locString, Position.GEO_DEG);
System.println(myLocation.toRadians()); // [0.678168, -1.654589]
Returns:

Position.Location — A Location object representing the position described by the input String
Since:

API Level 1.0.0

Class: Toybox.Position.Info
Inherits:
Toybox.Lang.Objectshow all
Overview
The Position.Info class contains all of the information provided by the positioning system.

Position Info can be retrieved on every call of onUpdate() or it can be obtained on demand. Fields in this class may return null so should be checked for null values prior to use.

Since:

API Level 1.0.0

Supported Devices:

[View devices]
Instance Member Summary
collapse
accuracy as Position.Quality
The positional accuracy.
altitude as Lang.Float or Null
The elevation above mean sea level in meters (m).
heading as Lang.Float or Null
The true north referenced heading in radians.
position as Position.Location or Null
The latitude and longitude of the position.
speed as Lang.Float or Null
The horizontal speed in meters per second (mps).
when as Time.Moment or Null
The GPS time stamp of the obtained Location fix.
Instance Attribute Details
var accuracy as Position.Quality
The positional accuracy.

This is given as one of the following values: good, usable, poor, or not available, which corresponds with the Position.QUALITY_* constants. This cannot be null.

Since:

API Level 1.0.0

Returns:

Position.Quality — A Position.QUALITY_* value
var altitude as Lang.Float or Null
The elevation above mean sea level in meters (m).

Elevation is obtained from the GPS. If no GPS is present, then no valid elevation will be returned.

Since:

API Level 1.0.0

See Also:

Meters above sea level
Returns:

Lang.Float
var heading as Lang.Float or Null
The true north referenced heading in radians.

This provides the direction of travel when moving. If supported by the device, it provides compass orientation when stopped.

Since:

API Level 1.0.0

Returns:

Lang.Float
var position as Position.Location or Null
The latitude and longitude of the position.

If no GPS is available or is between GPS fix intervals (typically 1 second), the position is propagated (i.e. dead-reckoned) using the last known heading and last known speed. After a short period of time, the position will cease to be propagated to avoid excessive accumulation of position errors.

Since:

API Level 1.0.0

Returns:

Position.Location
var speed as Lang.Float or Null
The horizontal speed in meters per second (mps).

Speed is derived from the most accurate source in the following order:

GPS

Foot pod

Accelerometer

Since:

API Level 1.0.0

Returns:

Lang.Float
var when as Time.Moment or Null
The GPS time stamp of the obtained Location fix.

Since:

API Level 1.0.0

Returns:

Time.Moment

Class: Toybox.Position.Location
Inherits:
Toybox.Lang.Objectshow all
Overview
The Location object represents a specific position.

Location objects provide methods for retrieving position coordinates in various formats.

Since:

API Level 1.0.0

Instance Method Summary
collapse
getProjectedLocation(angle as Lang.Numeric, distance as Lang.Numeric) as Position.Location
Get a Location object that is offset from the current position by a given distance and angle.
initialize(options as { :latitude as Lang.Numeric, :longitude as Lang.Numeric, :format as Lang.Symbol })
Constructor Create a Location based on a set of coordinates.
toDegrees() as [ Lang.Double, Lang.Double ]
Get a Location object's coordinates in degrees.
toGeoString(format as Position.CoordinateFormat) as Lang.String
Get a String representation a Location object's coordinates.
toRadians() as [ Lang.Double, Lang.Double ]
Get a location object's coordinates in radians.
Instance Method Details
getProjectedLocation(angle as Lang.Numeric, distance as Lang.Numeric) as Position.Location
Get a Location object that is offset from the current position by a given distance and angle.

Parameters:

angle — (Lang.Float) — The angle in radians from north.
distance — (Lang.Float) — The distance from the current position in meters (m).
Returns:

Position.Location — The projected location.
Since:

API Level 3.0.0

initialize(options as { :latitude as Lang.Numeric, :longitude as Lang.Numeric, :format as Lang.Symbol })
Constructor Create a Location based on a set of coordinates.

Parameters:

options — (Lang.Array) — An Array of options
:latitude — (Lang.Number) — The latitude
:longitude — (Lang.Number) — The longitude
:format — (Lang.Symbol) — The format of the provided latitude and longitude as one of three possible values:
:degrees
:radians
:semicircles
Example:

using Toybox.Position;
var myLocation = new Position.Location(
    {
        :latitude => 38.856147,
        :longitude => -94.800953,
        :format => :degrees
    }
);
Since:

API Level 1.0.0

toDegrees() as [ Lang.Double, Lang.Double ]
Get a Location object's coordinates in degrees.

Example:

using Toybox.Position;
using Toybox.System;
Position.enableLocationEvents(Position.LOCATION_ONE_SHOT, method(:onPosition));

function onPosition(info) {
    var myLocation = info.position.toDegrees();
    System.println(myLocation[0]); // latitude (e.g. 38.856147)
    System.println(myLocation[1]); // longitude (e.g -94.800953)
}
Returns:

Lang.Array — An Array containing the latitude and longitude as Doubles in a degree format
Since:

API Level 1.0.0

toGeoString(format as Position.CoordinateFormat) as Lang.String
Get a String representation a Location object's coordinates.

Parameters:

format — (Position.CoordinateFormat) — A Position.GEO_* value
Example:

using Toybox.Position;
using Toybox.System;
var myLocation = new Position.Location(
    {
        :latitude => 38.856147,
        :longitude => -94.800953,
        :format => :degrees
    }
);
var locString = myLocation.toGeoString(Position.GEO_DMS); // N 38 51'22.13" W 94 45' 3.44"
Returns:

Lang.String — A formatted coordinate String in the specified format
Since:

API Level 1.0.0

toRadians() as [ Lang.Double, Lang.Double ]
Get a location object's coordinates in radians.

Example:

using Toybox.Position;
using Toybox.System;
Position.enableLocationEvents(Position.LOCATION_ONE_SHOT, method(:onPosition));

function onPosition(info) {
    var myLocation = info.position.toRadians();
    System.println(myLocation[0]); // latitude (e.g. 0.678197)
    System.println(myLocation[1]); // longitude (e.g -1.654588)
}
Returns:

Lang.Array — An Array containing latitude and longitude as Doubles in a radian format
Since:

API Level 1.0.0

Module: Toybox.Sensor
Overview
The Sensor module provides access to sensor data.

Sensor allows Apps to register for updates to the current sensor data. It also enables apps to control the ANT+ sensors supported natively by the device, which are described by the provided SENSOR_* constants.

Example:

Using heart rate sensors to display current heart rate
using Toybox.Sensor;
function initialize() {
    Sensor.setEnabledSensors([Sensor.SENSOR_HEARTRATE]);
    Sensor.enableSensorEvents(method(:onSensor));
}

function onSensor(sensorInfo) {
    System.println("Heart Rate: " + sensorInfo.heartRate);
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Background
Data Field
Glance
Watch App
Widget
Supported Devices:

[View devices]
Requires Permission:

Sensor
Classes Under Namespace
Classes: AccelerometerData, GyroscopeData, HeartRateData, Info, MagnetometerData, SensorData, SensorDelegate, SensorInfo, SensorInfoIterator, TooManySensorDataListenersException

Constant Summary
RemoteSensorType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
SENSOR_BIKESPEED	0	
API Level 1.0.0

SENSOR_BIKECADENCE	1	
API Level 1.0.0

SENSOR_BIKEPOWER	2	
API Level 1.0.0

SENSOR_FOOTPOD	3	
API Level 1.0.0

SENSOR_HEARTRATE	4	
API Level 1.0.0

SENSOR_TEMPERATURE	5	
API Level 1.0.0

SENSOR_GENERIC	9	
API Level 5.1.0

OnboardSensorType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
SENSOR_PULSE_OXIMETRY	6	
API Level 3.2.0

SENSOR_ONBOARD_PULSE_OXIMETRY	7	
API Level 3.2.0

SENSOR_ONBOARD_HEARTRATE	8	
API Level 3.2.0

SensorTechnology
The sensor technology

Describes the technology used to communicate with the sensor.

Since:

API Level 3.2.0

Name	Value	Since	Description	See Also
SENSOR_TECHNOLOGY_ANT	0	
API Level 3.2.0

ANT Sensor

SENSOR_TECHNOLOGY_BLE	1	
API Level 3.2.0

Bluetooth Low Energy Sensor

SENSOR_TECHNOLOGY_ONBOARD	2	
API Level 3.2.0

Onboard Sensor

Typedef Summary
collapse
SensorType as Sensor.RemoteSensorType or Sensor.OnboardSensorType
Instance Method Summary
collapse
disableSensorType(sensorType as Sensor.SensorType) as Lang.Boolean
Disable the given sensor type for use.
enableSensorEvents(listener as Null or Lang.Method(info as Sensor.Info) as Void) as Void
Request sensor events from enabled sensors.
enableSensorType(sensorType as Sensor.SensorType) as Lang.Boolean
Enable the given sensor type for use.
getInfo() as Sensor.Info
Get the current Sensor Sensor.Info.
getMaxSampleRate() as Lang.Number
Get the maximum sample rate supported by the system.
getMaxSampleRateForSensorType(sensorDataType as Lang.Symbol) as Lang.Number
Get the maximum sample rate supported for given sensor data type.
getRegisteredSensors(sensorType as Sensor.SensorType or Null) as Sensor.SensorInfoIterator
Retrieve the sensors that are currently registered.
notifyError(string as Lang.String or Null) as Void
Let the system know the app has encountered an error.
notifyNewSensor(sensor as Sensor.SensorInfo, configurationRequired as Lang.Boolean) as Void
Let the system know the app has discovered a new sensor.
notifyPairComplete(sensor as Sensor.SensorInfo) as Void
Let the system know the app has finished pairing a sensor.
notifyScanComplete() as Void
Let the system know the app has finished scanning for sensors.
notifyUnpairComplete(sensor as Sensor.SensorInfo) as Void
Let the system know the app has finished unpairing a sensor.
registerSensorDataListener(listener as Lang.Method(data as Sensor.SensorData) as Void, options as { :period as Lang.Number, :accelerometer as { :enabled as Lang.Boolean, :sampleRate as Lang.Number, :includePower as Lang.Boolean, :includePitch as Lang.Boolean, :includeRoll as Lang.Boolean }, :gyroscope as { :enabled as Lang.Boolean, :sampleRate as Lang.Number }, :magnetometer as { :enabled as Lang.Boolean, :sampleRate as Lang.Number }, :heartBeatIntervals as { :enabled as Lang.Boolean } }) as Void
Register a callback to fetch high-frequency data from various sensors.
setEnabledSensors(sensors as Lang.Array<Sensor.SensorType>) as Lang.Array<Sensor.SensorType>
Enable sensors for use.
unregisterSensorDataListener() as Void
Unregister a previously registered data listener.
Typedef Details
SensorType as Sensor.RemoteSensorType or Sensor.OnboardSensorType
Since:

API Level 1.0.0

Instance Method Details
disableSensorType(sensorType as Sensor.SensorType) as Lang.Boolean
Disable the given sensor type for use.

Unlike the existing setEnabledSensors() function, this will not enable/disable other sensor types.

Note:
Will cause an app crash if called from a data field app

Returns:

Lang.Boolean — true on success, otherwise false.
Since:

API Level 3.2.0

enableSensorEvents(listener as Null or Lang.Method(info as Sensor.Info) as Void) as Void
Request sensor events from enabled sensors.

Sensor events are retrieved from any enabled sensors at a rate of 1 Hz. The data retrieved from enabled sensors is passed to the listener Method provided as a parameter to this method.

Note:
Will cause an app crash if called from a data field app

Parameters:

listener — (Lang.Method) — A reference to a listener Method:
Called when sensor updates are received
Receives a Sensor.info object
Use null to specify no listener
Example:

using Toybox.Sensor;
// Given an onSensor listener method is defined
Sensor.enableSensorEvents(method(:onSensor));
Since:

API Level 1.0.0

enableSensorType(sensorType as Sensor.SensorType) as Lang.Boolean
Enable the given sensor type for use.

Unlike the existing setEnabledSensors() function, this will not enable/disable other sensor types.

Note:
Will cause an app crash if called from a data field app

Note:
Multitasking: Sensor states can not be changed while in inacitve mode and sensor enabled during active mode will be disabled when app becomes inactive, and re-enabled automatically when is active again. These state changes are denoted by calls to AppBase.onActive() and AppBase.onInactive().

Returns:

Lang.Boolean — true on success, otherwise false.
Since:

API Level 3.2.0

getInfo() as Sensor.Info
Get the current Sensor Sensor.Info.

This is useful for retrieving the current sensor info either on demand or periodically within a Timer.

Note:
Will cause an app crash if called from a data field app

Example:

Get accelerometer data once per second
using Toybox.Sensor;
using Toybox.System;
using Toybox.Timer;
var dataTimer = new Timer.Timer();
dataTimer.start(method(:timerCallback), 1000, true); // A one-second timer
function timerCallback() {
    var sensorInfo = Sensor.getInfo();
    if (sensorInfo has :accel && sensorInfo.accel != null) {
        var accel = sensorInfo.accel;
        var xAccel = accel[0];
        var yAccel = accel[1];
        System.println("x: " + xAccel + ", y: " + yAccel);
    }
}
Returns:

Sensor.Info
See Also:

Toybox.Timer.Timer
Since:

API Level 1.0.0

getMaxSampleRate() as Lang.Number
Get the maximum sample rate supported by the system.

Note:
Will cause an app crash if called from a data field app

Note:
This function can produce different results after the app transitions to the active state after being inactive. These state changes are denoted by calls to AppBase.onActive() and AppBase.onInactive().

Example:

using Toybox.Sensor;
var maxSample = Sensor.getMaxSampleRate();
Supported Devices:

[View devices]
Returns:

Lang.Number — The max sample rate as a number
Since:

API Level 2.3.0

getMaxSampleRateForSensorType(sensorDataType as Lang.Symbol) as Lang.Number
Get the maximum sample rate supported for given sensor data type.

Note:
Will cause an app crash if called from a data field app

Note:
This function can produce different results after the app transitions to the active state after being inactive. These state changes are denoted by calls to AppBase.onActive() and AppBase.onInactive().

Parameters:

sensorDataType — (Lang.Symbol) — Symbol of the sensor data type to get the max rate for, allowed symbols are accelerometer, gyroscope, and magnetometer.
Example:

using Toybox.Sensor;
var maxSample = Sensor.getMaxSampleRateForSensorType(:accelerometer);
Supported Devices:

[View devices]
Returns:

Lang.Number — The max sample rate as a Number
Since:

API Level 3.4.5

getRegisteredSensors(sensorType as Sensor.SensorType or Null) as Sensor.SensorInfoIterator
Retrieve the sensors that are currently registered.

This function returns an iterator for the sensors that are considered to be `registered` if pairing information has been provided for it in Sensor settings.

Parameters:

sensorType — (Lang.Number, null) — A SENSOR_* value that describes the sensor type to enumerate, or null to get all sensors.
Returns:

Sensor.SensorInfoIterator — An iterator of the sensors that are currently registered.
Since:

API Level 3.2.0

notifyError(string as Lang.String or Null) as Void
Let the system know the app has encountered an error

Supported Devices:

[View devices]
Since:

API Level 5.1.0

notifyNewSensor(sensor as Sensor.SensorInfo, configurationRequired as Lang.Boolean) as Void
Let the system know the app has discovered a new sensor

Parameters:

sensor — (Sensor.SensorInfo) — A sensorinfo object containing the information about the sensor.
configurationRequired — (Lang.Boolean) — flag indicating whether or not the sensor require custom configuration. A value of True will prompt the app for a custom configuration view through AppBase.getSensorConfigurationView() during the pairing process.
Supported Devices:

[View devices]
Since:

API Level 5.1.0

notifyPairComplete(sensor as Sensor.SensorInfo) as Void
Let the system know the app has finished pairing a sensor

Parameters:

sensor — (Sensor.SensorInfo) — A sensorinfo object containing the information about the sensor.
Supported Devices:

[View devices]
Since:

API Level 5.1.0

notifyScanComplete() as Void
Let the system know the app has finished scanning for sensors

Supported Devices:

[View devices]
Since:

API Level 5.1.0

notifyUnpairComplete(sensor as Sensor.SensorInfo) as Void
Let the system know the app has finished unpairing a sensor

Parameters:

sensor — (Sensor.SensorInfo) — A sensorinfo object containing the information about the sensor.
Supported Devices:

[View devices]
Since:

API Level 5.1.0

registerSensorDataListener(listener as Lang.Method(data as Sensor.SensorData) as Void, options as { :period as Lang.Number, :accelerometer as { :enabled as Lang.Boolean, :sampleRate as Lang.Number, :includePower as Lang.Boolean, :includePitch as Lang.Boolean, :includeRoll as Lang.Boolean }, :gyroscope as { :enabled as Lang.Boolean, :sampleRate as Lang.Number }, :magnetometer as { :enabled as Lang.Boolean, :sampleRate as Lang.Number }, :heartBeatIntervals as { :enabled as Lang.Boolean } }) as Void
Register a callback to fetch high-frequency data from various sensors.

The callback will get invoked each time a new set of sensor data over the length of time specified in the period option is available.

Note:
Only one data request is allowed to be registered at a time. Subsequent calls to this function for the same sensor type will override previously registered requests.

Note:
Will cause an app crash if called from a data field app

Parameters:

listener — (Lang.Method) — A method that takes a single SensorData object as a parameter that will contain the requested data.
options — (Lang.Dictionary) — A Dictionary of options. The allowed values depend on sensor type.
:period — (Lang.Number) — Period of time to request samples in seconds. Maximum is 4 seconds.
:accelerometer — (Lang.Dictionary) — Options for accelerometer data.
:enabled (Toybox::Lang::Boolean) Set to true to fetch data from the accelerometer.
:sampleRate (Toybox::Lang::Number) Samples per second to request in Hz.
:includePower (Toybox::Lang::Boolean) Valid only when :accelerometer=>:enabled is set to true. Requests that the power Array be computed.
:includePitch (Toybox::Lang::Boolean) Valid only when :accelerometer=>:enabled is set to true. Requests that the pitch Array be computed.
:includeRoll (Toybox::Lang::Boolean) Valid only when :accelerometer=>:enabled is set to true. Requests that the roll Array be computed.
:heartBeatIntervals — (Lang.Dictionary) — Options for Heart Beat Interval data.
:enabled (Toybox::Lang::Boolean) Set to true to fetch heart beat interval data.
:gyroscope — (Lang.Dictionary) — Options for gyroscope data.
:enabled (Toybox::Lang::Boolean) Set to true to fetch data from the gyroscope.
:sampleRate (Toybox::Lang::Number) Samples per second to request in Hz.
:magnetometer — (Lang.Dictionary) — Options for magnetometer data.
:enabled (Toybox::Lang::Boolean) Set to true to fetch data from the magnetometer.
:sampleRate (Toybox::Lang::Number) Samples per second to request in Hz.
Example:

using Toybox.Sensor;
// initialize accelerometer
var options = {
    :period => 1,               // 1 second sample time
    :accelerometer => {
        :enabled => true,       // Enable the accelerometer
        :sampleRate => 25       // 25 samples
    },
    :heartBeatIntervals => {
        :enabled => true
    }
};
// Using the callback setup in Toybox.SensorHistory.SensorData
Sensor.registerSensorDataListener(method(:accelCallback), options);
Supported Devices:

[View devices]
See Also:

ActivityRecording.createSession()
Toybox.Sensor.SensorData
Since:

API Level 2.3.0

Throws:

Toybox::Sensor::TooManySensorDataListenersException Thrown if more than one listener is tried to register for sensor data.
Toybox::Lang::InvalidOptionsException Thrown if any required options are excluded, if provided options are out of range, or are of the wrong type.
setEnabledSensors(sensors as Lang.Array<Sensor.SensorType>) as Lang.Array<Sensor.SensorType>
Enable sensors for use.

This will enable both connected ANT+ sensors and system sensors if possible.

Note:
Will cause an app crash if called from a data field app

Note:
Multitasking: Sensor states can not be changed while in inacitve mode and sensor enabled during active mode will be disabled when app becomes inactive, and re-enabled automatically when is active again. These state changes are denoted by calls to AppBase.onActive() and AppBase.onInactive().

Parameters:

sensors — (Lang.Array) — The sensors to enable:
An Array of SENSOR_* types to enable
An empty array ([]) to disable all sensors
Example:

Enable a heart rate sensor
using Toybox.Sensor;
Sensor.setEnabledSensors([Sensor.SENSOR_HEARTRATE]);
Returns:

Lang.Array — An Array of requested sensors that are available
Since:

API Level 1.0.0

unregisterSensorDataListener() as Void
Unregister a previously registered data listener.

Note:
Will cause an app crash if called from a data field app

Example:

// Assuming use of registerSensorDataListener() example and mSession
using Toybox.Sensor;

Sensor.unregisterSensorDataListener(); // Unregister Listener
mSession.stop();                       // Stop Activity Recording
Supported Devices:

[View devices]
See Also:

Sensor.registerSensorDataListener()
Since:

API Level 2.3.0

Class: Toybox.Sensor.AccelerometerData
Inherits:
Toybox.Lang.Objectshow all
Overview
A class to store accelerometer sample data.

Each field specified is an Array of Float or Number values. The values for the x, y, and z axes are in Milli G units. For reference, 1000 Milli G = 1 G. If not null, all fields are of equal size. This is typically used in a callback method used by registerSensorDataListener()

See Also:
Toybox.Sensor.SensorData
G-Force Basic Overview
Since:

API Level 2.3.0

Supported Devices:

[View devices]
Instance Member Summary
collapse
pitch as Lang.Array<Lang.Float> or Null
The Array of pitch values as Floats in degrees.
power as Lang.Array<Lang.Number> or Null
The Array of vector power values as Numbers in millig-units.
roll as Lang.Array<Lang.Float> or Null
The Array of roll values as Floats in degrees.
x as Lang.Array<Lang.Number>
The Array of x axis values as Numbers in millig-units.
y as Lang.Array<Lang.Number>
The Array of y axis values as Numbers in millig-units.
z as Lang.Array<Lang.Number>
The Array of z axis values as Numbers in millig-units.
Instance Attribute Details
var pitch as Lang.Array<Lang.Float> or Null
The Array of pitch values as Floats in degrees. Can be null.

Pitch values are calculated with the equation atan2(y, sqrt(x^2 + z^2)).

Since:

API Level 2.3.0

See Also:

Tilt Sensing Using a Three-Axis Accelerometer
Returns:

Lang.Array
var power as Lang.Array<Lang.Number> or Null
The Array of vector power values as Numbers in millig-units. Can be null.

Since:

API Level 2.3.0

Returns:

Lang.Array
var roll as Lang.Array<Lang.Float> or Null
The Array of roll values as Floats in degrees. Can be null.

Roll values are calculated with the equation atan2(-x, z).

Since:

API Level 2.3.0

See Also:

Tilt Sensing Using a Three-Axis Accelerometer
Returns:

Lang.Array
var x as Lang.Array<Lang.Number>
The Array of x axis values as Numbers in millig-units.

Since:

API Level 2.3.0

Returns:

Lang.Array
var y as Lang.Array<Lang.Number>
The Array of y axis values as Numbers in millig-units.

Since:

API Level 2.3.0

Returns:

Lang.Array
var z as Lang.Array<Lang.Number>
The Array of z axis values as Numbers in millig-units.

Since:

API Level 2.3.0

Returns:

Lang.Array

Class: Toybox.Sensor.GyroscopeData
Inherits:
Toybox.Lang.Objectshow all
Overview
A class to store gyroscope sample data.

Each field specified is an Array of Float values. The values for the x, y, and z axes are in deg/sec units. This is typically used in a callback method used by registerSensorDataListener()

See Also:
Toybox.Sensor.SensorData
Since:

API Level 3.3.0

Supported Devices:

[View devices]
Instance Member Summary
collapse
x as Lang.Array<Lang.Float>
The Array of x axis values as Float in deg/sec.
y as Lang.Array<Lang.Float>
The Array of y axis values as Float in deg/sec.
z as Lang.Array<Lang.Float>
The Array of z axis values as Float in deg/sec.
Instance Attribute Details
var x as Lang.Array<Lang.Float>
The Array of x axis values as Float in deg/sec.

Since:

API Level 3.3.0

Returns:

Lang.Array
var y as Lang.Array<Lang.Float>
The Array of y axis values as Float in deg/sec.

Since:

API Level 3.3.0

Returns:

Lang.Array
var z as Lang.Array<Lang.Float>
The Array of z axis values as Float in deg/sec.

Since:

API Level 3.3.0

Returns:

Lang.Array


Class: Toybox.Sensor.HeartRateData
Inherits:
Toybox.Lang.Objectshow all
Overview
A class to store granular heart rate data.

This class provides granular heart rate data like beat-to-beat intervals. This is typically used in a callback method used by registerSensorDataListener().

See Also:
Toybox.Sensor.Info
Toybox.Sensor.SensorData
Beat-to-beat interval or "Interbeat interval"
Since:

API Level 3.0.0

Supported Devices:

[View devices]
Instance Member Summary
collapse
heartBeatIntervals as Lang.Array<Lang.Number>
The most recent beat-to-beat interval data as an Array of Number objects in milliseconds (ms).
Instance Attribute Details
var heartBeatIntervals as Lang.Array<Lang.Number>
The most recent beat-to-beat interval data as an Array of Number objects in milliseconds (ms).

Since:

API Level 3.0.0

Returns:

Lang.Array

Class: Toybox.Sensor.Info
Inherits:
Toybox.Lang.Objectshow all
Overview
The Sensor.Info class contains all of the information provided by enabled sensors.

Sensor.Info can be retrieved on every call of onUpdate() or it can be obtained on demand. Fields in this class may return null so should be checked for null values prior to use.

Since:

API Level 1.0.0

Instance Member Summary
collapse
accel as Lang.Array<Lang.Number> or Null
The accelerometer reading of the x, y, and z axes as an Array of Number values in millig-units.
altitude as Lang.Float or Null
The altitude above mean sea level in meters (m).
cadence as Lang.Number or Null
The cadence in revolutions per minute (rpm).
heading as Lang.Float or Null
The true north referenced heading in radians.
heartRate as Lang.Number or Null
The heart rate in beats per minute (bpm).
mag as Lang.Array<Lang.Number> or Null
The magnetometer reading of the x, y, and z axes as an Array of Number values in milliGauss (mG).
oxygenSaturation as Lang.Number or Null
The current oxygen saturation in percent (%).
power as Lang.Number or Null
The power in Watts (W).
pressure as Lang.Float or Null
The barometric pressure in Pascals (Pa).
speed as Lang.Float or Null
The speed in meters per second (m/s).
temperature as Lang.Float or Null
The temperature in degrees Celsius (C).
Instance Attribute Details
var accel as Lang.Array<Lang.Number> or Null
The accelerometer reading of the x, y, and z axes as an Array of Number values in millig-units.

Note:
Some devices do not enable the accelerometer at startup. To get valid data from this field on such devices, applications must enable the sensor with a call to registerSensorDataListener.

Since:

API Level 1.2.0

Supported Devices:

[View devices]
Returns:

Lang.Array
var altitude as Lang.Float or Null
The altitude above mean sea level in meters (m).

Elevation is derived from the most accurate source: Barometer or GPS in order of descending accuracy. If no GPS is present, then barometer readings will be used.

Since:

API Level 1.0.0

See Also:

Meters above sea level
Positional Altitude
Returns:

Lang.Float
var cadence as Lang.Number or Null
The cadence in revolutions per minute (rpm).

Cadence is derived from (in order of priority):

Bike sensors (cadence or speed must be enabled)

Advanced running dynamics sensors (e.g. heart strap with running dynamics enabled)

Foot pod

Watch-based cadence calculations

Since:

API Level 1.0.0

Returns:

Lang.Number
var heading as Lang.Float or Null
The true north referenced heading in radians.

This provides compass orientation if it is supported by the device.

Since:

API Level 1.0.0

Returns:

Lang.Float
var heartRate as Lang.Number or Null
The heart rate in beats per minute (bpm).

Since:

API Level 1.0.0

Returns:

Lang.Number
var mag as Lang.Array<Lang.Number> or Null
The magnetometer reading of the x, y, and z axes as an Array of Number values in milliGauss (mG).

Note:
Some devices do not enable the magnetometer at startup. To get valid data from this field on such devices, applications must enable the sensor with a call to registerSensorDataListener.

Since:

API Level 1.2.0

Supported Devices:

[View devices]
Returns:

Lang.Array
var oxygenSaturation as Lang.Number or Null
The current oxygen saturation in percent (%)

Since:

API Level 3.2.0

Supported Devices:

[View devices]
Returns:

Lang.Number
var power as Lang.Number or Null
The power in Watts (W).

Since:

API Level 1.0.0

Returns:

Lang.Number
var pressure as Lang.Float or Null
The barometric pressure in Pascals (Pa).

This returns barometric pressure calibrated to sea level. Since pressure varies dues to several factors, a GPS-based altitude must first be obtained, then the ambient (local) pressure is measured by the pressure sensor before conversion to a calibrated barometric pressure value.

Since:

API Level 1.0.0

Returns:

Lang.Float
var speed as Lang.Float or Null
The speed in meters per second (m/s).

Since:

API Level 1.0.0

See Also:

Positional Speed
Returns:

Lang.Float
var temperature as Lang.Float or Null
The temperature in degrees Celsius (C).

Since:

API Level 1.0.0

Returns:

Lang.Float

Class: Toybox.Sensor.MagnetometerData
Inherits:
Toybox.Lang.Objectshow all
Overview
A class to store magnetometerData sample data.

Each field specified is an Array of Number values. The values for the x, y, and z axes are in milliGauss (mG) This is typically used in a callback method used by registerSensorDataListener()

See Also:
Toybox.Sensor.SensorData
Since:

API Level 3.3.0

Supported Devices:

[View devices]
Instance Member Summary
collapse
x as Lang.Array<Lang.Number>
The Array of x axis values as Numbers in milliGauss.
y as Lang.Array<Lang.Number>
The Array of y axis values as Numbers in milliGauss.
z as Lang.Array<Lang.Number>
The Array of z axis values as Numbers in milliGauss.
Instance Attribute Details
var x as Lang.Array<Lang.Number>
The Array of x axis values as Numbers in milliGauss.

Since:

API Level 3.3.0

Returns:

Lang.Array
var y as Lang.Array<Lang.Number>
The Array of y axis values as Numbers in milliGauss.

Since:

API Level 3.3.0

Returns:

Lang.Array
var z as Lang.Array<Lang.Number>
The Array of z axis values as Numbers in milliGauss.

Since:

API Level 3.3.0

Returns:

Lang.Array


Class: Toybox.Sensor.SensorData
Inherits:
Toybox.Lang.Objectshow all
Overview
A class to encapsulate all high-frequency sensor data that can be retrieved.

Example:

Setting up an accel data callback
using Toybox.Sensor;

// Initialize accel data variables
var mX = [0]
var mY = [0]
var mZ = [0]

// Callback to receive accel data
function accel_callback(sensorData) {
    mX = sensorData.accelerometerData.x;
    mY = sensorData.accelerometerData.y;
    mZ = sensorData.accelerometerData.z;
    onAccelData();
}
// This method can now be used with registerSensorDataListener()
Since:

API Level 2.3.0

Supported Devices:

[View devices]
Instance Member Summary
collapse
accelerometerData as Sensor.AccelerometerData or Null
An AccelerometerData object.
gyroscopeData as Sensor.GyroscopeData or Null
An GyroscopeData object.
heartRateData as Sensor.HeartRateData or Null
A HeartRateData object.
magnetometerData as Sensor.MagnetometerData or Null
An MagnetometerData object.
Instance Attribute Details
var accelerometerData as Sensor.AccelerometerData or Null
An AccelerometerData object.

Can be null if accelerometer data was not requested.

Since:

API Level 2.3.0

Supported Devices:

[View devices]
var gyroscopeData as Sensor.GyroscopeData or Null
An GyroscopeData object.

Can be null if gyroscope data was not requested.

Since:

API Level 3.3.0

Supported Devices:

[View devices]
Returns:

Toybox::Sensor::GyroscopeData
var heartRateData as Sensor.HeartRateData or Null
A HeartRateData object.

Can be null if heart rate interval data is not available.

Example:

using Toybox.Sensor;

var heartBeatIntervals = [];

function heartBeatIntervalsCallback(sensorData) {
    if (sensorData has :heartRateData && sensorData.heartRateData != null) {
         heartBeatIntervals = sensorData.heartRateData.heartBeatIntervals;
    }
}
Since:

API Level 3.0.0

See Also:

Toybox.Sensor.SensorData
Supported Devices:

[View devices]
var magnetometerData as Sensor.MagnetometerData or Null
An MagnetometerData object.

Can be null if MagnetometerData data was not requested.

Since:

API Level 3.3.0

Supported Devices:

[View devices]
Returns:

Toybox::Sensor::MagnetometerData

Class: Toybox.Sensor.SensorDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
Delegate for handling native sensor pairing process.

The members of this object get called by the system to delegate scanning and pairing of different sensors.

Since:

API Level 5.1.0

Supported Devices:

[View devices]
Instance Method Summary
collapse
onPair(sensor as Sensor.SensorInfo) as Lang.Boolean
Pair the sensor.
onScan() as Lang.Boolean
Start the sensor scan process.
onUnpair(sensor as Sensor.SensorInfo) as Lang.Boolean
Unpair the sensor.
pairingRequired() as Lang.Boolean
Is sensor pairing required? Is called by the system to check if sensor pairing is required.
Instance Method Details
onPair(sensor as Sensor.SensorInfo) as Lang.Boolean
Pair the sensor.

Is called by the system to pair the sensor, during the native sensor pairing process.

Parameters:

sensor — Toybox::Sensor::SensorInfo object
Returns:

Lang.Boolean — true if the sensor was paired successfully, false otherwise
Since:

API Level 5.1.0

onScan() as Lang.Boolean
Start the sensor scan process.

Is called by the system to start the sensor scan process, during the native sensor pairing process.

Returns:

Lang.Boolean — true if the scan was started successfully, false otherwise
Since:

API Level 5.1.0

onUnpair(sensor as Sensor.SensorInfo) as Lang.Boolean
Unpair the sensor.

Is called by the system to unpair the sensor, during the native sensor removing process.

Parameters:

sensor — Toybox::Sensor::SensorInfo object
Returns:

Lang.Boolean — true if the sensor was paired successfully, false otherwise
Since:

API Level 5.1.0

pairingRequired() as Lang.Boolean
Is sensor pairing required?

Is called by the system to check if sensor pairing is required.

Returns:

Lang.Boolean — true if sensor pairing is required, false otherwise
Since:

API Level 5.1.0

Class: Toybox.Sensor.SensorInfo
Inherits:
Toybox.Lang.Objectshow all
Overview
A class describing a Sensor

The SensorInfo provides access to the attributes of a Sensor.

Since:

API Level 3.2.0

Instance Member Summary
collapse
data as Lang.Dictionary or Null
The Sensor-specific data A dictionary of sensor-specific attributes.
enabled as Lang.Boolean
The Sensor enabled flag.
manufacturerId as Lang.Number
The Sensor manufacturer.
name as Lang.String
The Sensor name.
partNumber as Lang.Number
The Sensor part number.
softwareVersion as Lang.Number
The Sensor software version.
technology as Sensor.SensorTechnology
The Sensor technology The technology used to communicate with this sensor.
type as Sensor.SensorType
The Sensor type.
Instance Attribute Details
var data as Lang.Dictionary or Null
The Sensor-specific data

A dictionary of sensor-specific attributes. Currently supported attributes include:

:bleAddress - The mac address of the BLE sensor (e.g., 01:02:03:04:05:06) as a ByteArray, if available.

:antSerialNumber - The 20-bit ANT sensor serial number as a Number

:bleScanResult - The scanresult of a discovered BLE device as a ScanResult.

:antMessage - The ANT message of a discovered ANT device as a Message

Note:
:bleScanResult and :antMessage are used for native sensor pairing process only.

Since:

API Level 3.2.0

Returns:

Lang.Dictionary
var enabled as Lang.Boolean
The Sensor enabled flag.

An indicator of whether or not the sensor is enabled for pairing.

Since:

API Level 3.2.0

Returns:

Lang.Boolean
var manufacturerId as Lang.Number
The Sensor manufacturer.

The manufacturer id of the sensor. May be null.

Since:

API Level 3.2.0

Returns:

Lang.Number
var name as Lang.String
The Sensor name.

The name of the sensor.

Since:

API Level 3.2.0

Returns:

Lang.String
var partNumber as Lang.Number
The Sensor part number.

The part number the sensor. May be null.

Since:

API Level 3.2.0

Returns:

Lang.Number
var softwareVersion as Lang.Number
The Sensor software version.

The software version of the sensor. May be null.

Since:

API Level 3.2.0

Returns:

Lang.Number
var technology as Sensor.SensorTechnology
The Sensor technology

The technology used to communicate with this sensor.

Since:

API Level 3.2.0

Returns:

Sensor.SensorTechnology — The sensor type as a Sensor.SENSOR_TECHNOLOGY_*
var type as Sensor.SensorType
The Sensor type.

The type of the sensor.

Since:

API Level 3.2.0

Returns:

Sensor.SensorType — The sensor type as a Sensor.SENSOR_*

Class: Toybox.Sensor.SensorInfoIterator
Inherits:
Toybox.Lang.Objectshow all
Overview
A class encapsulating a collection of Sensors

The SensorIterator describes a collection of SensorInfo objects that describe actual sensors. Such an iterator is retrieved using the appropriate "get*Sensors' methods found in Sensor at the module level.

Example:

Gets a SensorIterator object for all registered external heart rate sensors on the device
using Toybox.Sensor;

function getHeartRateSensorIterator() {
    if (Sensor has :getRegisteredSensors) {
        return Sensor.getRegisteredSensors(Sensor.SENSOR_HEARTRATE);
    }
    return null;
}

Since:

API Level 3.2.0

Instance Method Summary
collapse
next() as Sensor.SensorInfo or Null
Get the current SensorInfo and advance.
Instance Method Details
next() as Sensor.SensorInfo or Null
Get the current SensorInfo and advance.

Get the current SensorInfo and advance self to refer to the next.

Returns:

SensorInfo
Since:

API Level 3.2.0

Class: Toybox.Sensor.TooManySensorDataListenersException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
This exception indicates more than one listener is tried to register for sensor data.

Since:

API Level 2.3.0

Instance Method Summary
collapse
initialize(msg as Lang.String)
Constructor.
Instance Method Details
initialize(msg as Lang.String)
Constructor

Parameters:

msg — (Lang.String) — The exception message
Since:

API Level 2.3.0

Module: Toybox.SensorLogging
Overview
The SensorLogging module contains the interface for logging sensor data.

Since:

API Level 2.3.0

App Types:

Audio Content Provider
Background
Data Field
Glance
Watch App
Supported Devices:

[View devices]
Requires Permission:

SensorLogging
Classes Under Namespace
Classes: SensorLogger, SensorLoggingStats

Class: Toybox.SensorLogging.SensorLogger
Inherits:
Toybox.Lang.Objectshow all
Overview
Class for the SensorLogger object. This object gets passed to FIT session to start recording sensor data.

Since:

API Level 2.3.0

Instance Method Summary
collapse
getStats() as SensorLogging.SensorLoggingStats or Null
Get statistics for the data gathered in the current session.
getStats2(sensor as Lang.Symbol or Null) as SensorLogging.SensorLoggingStats or { :accelerometer as SensorLogging.SensorLoggingStats, :gyroscope as SensorLogging.SensorLoggingStats, :magnetometer as SensorLogging.SensorLoggingStats }
Get statistics for the sensor data gathered in the current session.
initialize(options as { :accelerometer as { :enabled as Lang.Boolean }, :gyroscope as { :enabled as Lang.Boolean }, :magnetometer as { :enabled as Lang.Boolean } })
Constructor.
Instance Method Details
getStats() as SensorLogging.SensorLoggingStats or Null
Get statistics for the data gathered in the current session.

Returns:

SensorLogging.SensorLoggingStats — Returns a SensorLoggingStats object.
Since:

API Level 2.3.0

getStats2(sensor as Lang.Symbol or Null) as SensorLogging.SensorLoggingStats or { :accelerometer as SensorLogging.SensorLoggingStats, :gyroscope as SensorLogging.SensorLoggingStats, :magnetometer as SensorLogging.SensorLoggingStats }
Get statistics for the sensor data gathered in the current session.

Parameters:

sensor — Symbol for the sensor type to get the logging stats for or null to get stats about all the enabled sensors.
Returns:

SensorLogging.SensorLoggingStats, Lang.Dictionary — Returns a SensorLoggingStats for the requested sensor type or the Toybox::Lang::Dictionary with stats of all the enabled sensors if null is passed.
Since:

API Level 3.3.0

Throws:

Toybox::Lang::InvalidValueException Thrown if provided argument are out of range or are of the wrong type.
initialize(options as { :accelerometer as { :enabled as Lang.Boolean }, :gyroscope as { :enabled as Lang.Boolean }, :magnetometer as { :enabled as Lang.Boolean } })
Constructor

Note:
A SensorLogger may be initialized with the same dictionary of options provided to registerSensorDataListener(), but only the options documented below will be used.

Parameters:

options — (Lang.Dictionary) — A Dictionary of logging options
:accelerometer — (Lang.Dictionary) — Options for accelerometer data.
:enabled (Toybox::Lang::Boolean) Set to true to fetch data from the accelerometer.
:gyroscope — (Lang.Dictionary) — Options for gyroscope data.
:enabled (Toybox::Lang::Boolean) Set to true to fetch data from the gyroscope.
:magnetometer — (Lang.Dictionary) — Options for magnetometer data.
:enabled (Toybox::Lang::Boolean) Set to true to fetch data from the magnetometer.
Since:

API Level 2.3.0

Class: Toybox.SensorLogging.SensorLoggingStats
Inherits:
Toybox.Lang.Objectshow all
Overview
Class for the sensor logging status.

Since:

API Level 2.3.0

Instance Member Summary
collapse
sampleCount as Lang.Number
The total number of logged samples.
samplePeriod as Lang.Number
The total number of seconds of logged data.
Instance Method Summary
collapse
initialize()
Constructor.
Instance Attribute Details
var sampleCount as Lang.Number
The total number of logged samples

Since:

API Level 2.3.0

Returns:

Lang.Number
var samplePeriod as Lang.Number
The total number of seconds of logged data

Since:

API Level 2.3.0

Returns:

Lang.Number
Instance Method Details
initialize()
Constructor

Since:

API Level 2.3.0

Module: Toybox.StringUtil
Overview
The StringUtil module contains String utility functions

Since:

API Level 1.3.0

Classes Under Namespace
Classes: InvalidHexStringException

Constant Summary
CharacterEncoding
Since:

API Level 1.3.0

Name	Value	Since	Description	See Also
CHAR_ENCODING_UTF8	0	
API Level 3.0.0

Representation
Since:

API Level 1.3.0

Name	Value	Since	Description	See Also
REPRESENTATION_STRING_BASE64	0	
API Level 3.0.0

REPRESENTATION_STRING_HEX	1	
API Level 3.0.0

REPRESENTATION_STRING_PLAIN_TEXT	2	
API Level 3.0.0

REPRESENTATION_BYTE_ARRAY	3	
API Level 3.0.0

Instance Method Summary
collapse
charArrayToString(charArray as Lang.Array<Lang.Char>) as Lang.String
Given an Array of Char objects, return the String equivalent.
convertEncodedString(input as Lang.String or Lang.ByteArray, options as { :fromRepresentation as StringUtil.Representation, :toRepresentation as StringUtil.Representation, :encoding as StringUtil.CharacterEncoding }) as Lang.String or Lang.ByteArray
Convert a String or ByteArray representation to a String or ByteArray representation whose underlying byte format corresponds to the provided input options.
encodeBase64(string as Lang.String) as Lang.String
Encodes a String in base64.
utf8ArrayToString(utf8Array as Lang.Array<Lang.Number>) as Lang.String
Given an Array of UTF-8 bytes, return the String equivalent.
Instance Method Details
charArrayToString(charArray as Lang.Array<Lang.Char>) as Lang.String
Given an Array of Char objects, return the String equivalent

Parameters:

charArray — (Lang.Array) — An Array of Char objects
Returns:

Lang.String — The String representation of the input Array
Since:

API Level 1.3.0

convertEncodedString(input as Lang.String or Lang.ByteArray, options as { :fromRepresentation as StringUtil.Representation, :toRepresentation as StringUtil.Representation, :encoding as StringUtil.CharacterEncoding }) as Lang.String or Lang.ByteArray
Convert a String or ByteArray representation to a String or ByteArray representation whose underlying byte format corresponds to the provided input options.

Parameters:

input — (Lang.String, Lang.ByteArray) — Input that needs to be converted.
options — (Lang.Dictionary)
:fromRepresentation — (StringUtil.Representation) — Required. A REPRESENTATION_* enum value indicating the representation from which the input should be converted.
:toRepresentation — (StringUtil.Representation) — Required. A REPRESENTATION_* enum value indicating the representation to which the input should be converted.
:encoding — (StringUtil.CharacterEncoding) — A CHAR_ENCODING_* value indicating the String encoding to use when generating a hex string or ByteArray when either the fromRepresentation or toRepresentation is set to REPRESENTATION_STRING_PLAIN_TEXT. Defaults to CHAR_ENCODING_UTF8 if not specified.
Returns:

Lang.String, Lang.ByteArray — The converted String or ByteArray based on the provided options
Since:

API Level 3.0.0

Throws:

(Lang.InvalidOptionsException) — Thrown if a required option is not set with a valid enumeration value.
encodeBase64(string as Lang.String) as Lang.String
Encodes a String in base64

Parameters:

string — (Lang.String) — The string to encode
Returns:

Lang.String — A base64 encoded String
Since:

API Level 1.3.0

utf8ArrayToString(utf8Array as Lang.Array<Lang.Number>) as Lang.String
Given an Array of UTF-8 bytes, return the String equivalent

Parameters:

utf8Array — (Lang.Array) — An Array of UTF-8 bytes
Returns:

Lang.String — The String representation of the input Array
Since:

API Level 1.3.0

Throws:

(Lang.InvalidValueException) — Thrown if a the provided bytes contain an invalid UTF-8 sequence.

Class: Toybox.StringUtil.InvalidHexStringException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
Thrown if an invalid hex string is provided.

See Also:
Toybox.Lang.Exception
Since:

API Level 3.0.0

Instance Method Summary
collapse
initialize(msg as Lang.String)
Constructor.
Instance Method Details
initialize(msg as Lang.String)
Constructor

Parameters:

msg — (Lang.String) — The exception message
Since:

API Level 3.0.0

Module: Toybox.System
Overview
The System module provides basic system information, including access to the clock time, device settings, battery level, and memory use.

Since:

API Level 1.0.0

Classes Under Namespace
Classes: AppNotInstalledException, ClockTime, ConnectionInfo, DeviceSettings, Intent, PreviousOperationNotCompleteException, ServiceDelegate, Stats, UnexpectedAppTypeException

Constant Summary
UnitsSystem
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
UNIT_METRIC	0	
API Level 1.0.0

Display units in metric units

UNIT_STATUTE	1	
API Level 1.0.0

Display units in statute units

ScreenShape
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
SCREEN_SHAPE_ROUND	1	
API Level 1.2.0

SCREEN_SHAPE_SEMI_ROUND	2	
API Level 1.2.0

SCREEN_SHAPE_RECTANGLE	3	
API Level 1.2.0

SCREEN_SHAPE_SEMI_OCTAGON	4	
API Level 3.3.0

ButtonInputs
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
BUTTON_INPUT_SELECT	0x00000001	
API Level 1.2.0

BUTTON_INPUT_UP	0x00000002	
API Level 1.2.0

BUTTON_INPUT_DOWN	0x00000004	
API Level 1.2.0

BUTTON_INPUT_MENU	0x00000008	
API Level 1.2.0

BUTTON_INPUT_CLOCK	0x00000010	
API Level 3.1.0

BUTTON_INPUT_DOWN_LEFT	0x00000020	
API Level 3.1.0

BUTTON_INPUT_DOWN_RIGHT	0x00000040	
API Level 3.1.0

BUTTON_INPUT_ESC	0x00000080	
API Level 3.1.0

BUTTON_INPUT_FIND	0x00000100	
API Level 3.1.0

BUTTON_INPUT_LAP	0x00000200	
API Level 3.1.0

BUTTON_INPUT_LEFT	0x00000400	
API Level 3.1.0

BUTTON_INPUT_LIGHT	0x00000800	
API Level 3.1.0

BUTTON_INPUT_MODE	0x00001000	
API Level 3.1.0

BUTTON_INPUT_PAGE	0x00002000	
API Level 3.1.0

BUTTON_INPUT_POWER	0x00004000	
API Level 3.1.0

BUTTON_INPUT_RESET	0x00008000	
API Level 3.1.0

BUTTON_INPUT_RIGHT	0x00010000	
API Level 3.1.0

BUTTON_INPUT_SPORT	0x00020000	
API Level 3.1.0

BUTTON_INPUT_START	0x00040000	
API Level 3.1.0

BUTTON_INPUT_UP_LEFT	0x00080000	
API Level 3.1.0

BUTTON_INPUT_UP_RIGHT	0x00100000	
API Level 3.1.0

BUTTON_INPUT_ZIN	0x00200000	
API Level 3.1.0

BUTTON_INPUT_ZOUT	0x00400000	
API Level 3.1.0

ConnectionState
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
CONNECTION_STATE_NOT_INITIALIZED	0	
API Level 3.0.0

Indicates that the connection is not setup or is inactive.

CONNECTION_STATE_NOT_CONNECTED	1	
API Level 3.0.0

Indicates that the connection has been setup but is not in range.

CONNECTION_STATE_CONNECTED	2	
API Level 3.0.0

Indicates that the connection is available for use.

Language
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
LANGUAGE_ARA	8389920	
API Level 3.1.0

Arabic

LANGUAGE_BUL	8389921	
API Level 3.1.0

Bulgarian

LANGUAGE_CES	8389352	
API Level 3.1.0

Czech

LANGUAGE_CHS	8389372	
API Level 3.1.0

Chinese (Simplified)

LANGUAGE_CHT	8389371	
API Level 3.1.0

Chinese (Traditional)

LANGUAGE_DAN	8389353	
API Level 3.1.0

Danish

LANGUAGE_DEU	8389358	
API Level 3.1.0

German

LANGUAGE_DUT	8389354	
API Level 3.1.0

Dutch

LANGUAGE_ENG	8389355	
API Level 3.1.0

English

LANGUAGE_EST	8390796	
API Level 3.1.0

Estonian

LANGUAGE_FIN	8389356	
API Level 3.1.0

Finnish

LANGUAGE_FRE	8389357	
API Level 3.1.0

French

LANGUAGE_GRE	8389359	
API Level 3.1.0

Greek

LANGUAGE_HEB	8389919	
API Level 3.1.0

Hebrew

LANGUAGE_HRV	8389361	
API Level 3.1.0

Croatian

LANGUAGE_HUN	8389360	
API Level 3.1.0

Hungarian

LANGUAGE_IND	8389578	
API Level 3.1.0

Bahasa Indonesia

LANGUAGE_ITA	8389362	
API Level 3.1.0

Italian

LANGUAGE_JPN	8389373	
API Level 3.1.0

Japanese

LANGUAGE_KOR	8389696	
API Level 3.1.0

Korean

LANGUAGE_LAV	8390797	
API Level 3.1.0

Latvian

LANGUAGE_LIT	8390798	
API Level 3.1.0

Lithuanian

LANGUAGE_NOB	8389363	
API Level 3.1.0

Norwegian

LANGUAGE_POL	8389364	
API Level 3.1.0

Polish

LANGUAGE_POR	8389365	
API Level 3.1.0

Portuguese

LANGUAGE_RON	8390799	
API Level 3.1.0

Romanian

LANGUAGE_RUS	8389366	
API Level 3.1.0

Russian

LANGUAGE_SLO	8389367	
API Level 3.1.0

Slovak

LANGUAGE_SLV	8389368	
API Level 3.1.0

Slovenian

LANGUAGE_SPA	8389369	
API Level 3.1.0

Spanish

LANGUAGE_SWE	8389370	
API Level 3.1.0

Swedish

LANGUAGE_THA	8389548	
API Level 3.1.0

Thai

LANGUAGE_TUR	8389774	
API Level 3.1.0

Turkish

LANGUAGE_UKR	8390800	
API Level 3.1.0

Ukrainian

LANGUAGE_VIE	8390206	
API Level 3.1.0

Vietnamese

LANGUAGE_ZSM	8389579	
API Level 3.1.0

Standard (Bahasa) Malay

DisplayMode
Enum class for display mode

Since:

API Level 5.0.0

Name	Value	Since	Description	See Also
DISPLAY_MODE_HIGH_POWER	0	
API Level 5.0.0

Display in high power mode. View.onUpdate are not subject to burn-in protection.

DISPLAY_MODE_LOW_POWER	1	
API Level 5.0.0

Display in low power mode, including watch face always-on mode. View.onUpdate subject to burn-in protection.

DISPLAY_MODE_OFF	2	
API Level 5.0.0

Display is off.

PhoneOperatingSystem
The platform associated with a connected phone.

Since:

API Level 5.1.0

Name	Value	Since	Description	See Also
PHONE_OS_NOT_KNOWN	0	
API Level 5.1.0

PHONE_OS_ANDROID	1	
API Level 5.1.0

PHONE_OS_IOS	2	
API Level 5.1.0

Instance Method Summary
collapse
error(msg as Lang.String) as Void
Write an error to the console and exit the system.
exit() as Void
End execution of the current app.
exitTo(intent as System.Intent) as Void
Exit the current app and launch a new app.
getClockTime() as System.ClockTime
Get the current clock time.
getDeviceSettings() as System.DeviceSettings
Get the current device settings.
getDisplayMode() as System.DisplayMode
Get the current display mode, only available in devices with AMOLED or LCD screens.
getSystemStats() as System.Stats
Get the current system stats.
getTimer() as Lang.Number
Get the current millisecond timer value.
isAppInstalled(uri as Lang.String) as Lang.Boolean
Check the installation status of an app.
print(output as Lang.Object or Null) as Void
Print to the console.
println(output as Lang.Object or Null) as Void
Print to the console with a line terminator.
Instance Method Details
error(msg as Lang.String) as Void
Write an error to the console and exit the system.

Note:
There are never really too many bananas.

Parameters:

msg — (Lang.String) — The error message to output
Example:

using Toybox.System;
const MAX_BANANAS = 8;
var bananasInBunch = 10;
if (bananasInBunch > MAX_BANANAS) {
    System.error("Too many bananas!")
}
Since:

API Level 1.0.0

exit() as Void
End execution of the current app.

This will exit the system cleanly from any point within an app.

Since:

API Level 1.0.0

exitTo(intent as System.Intent) as Void
Exit the current app and launch a new app.

This may only be called by watch-apps and widgets, and may only target watch-apps (both native activities and Connect IQ apps) and widgets. This is an asynchronous request that presents a confirmation dialog to launch the Intent. If confirmed, the current app will exit. Otherwise, the app will continue to run without exiting.

Parameters:

intent — (System.Intent) — The Intent to trigger
Example:

using Toybox.System;
var targetApp = new System.Intent(
    "manifest-id://12345678-1234-1234-1234-123412341234",
    {"arg"=>"CurrentAppName"}
);
System.exitTo(targetApp);
See Also:

Toybox.System.Intent
Since:

API Level 2.2.0

Throws:

(System.UnexpectedAppTypeException) — Indicates the intended application is not a device app or widget
(System.AppNotInstalledException) — Indicates the intended application is not installed
(System.PreviousOperationNotCompleteException) — Indicates exitTo() is called a second time before the initial call completes
getClockTime() as System.ClockTime
Get the current clock time.

Returns:

System.ClockTime
Since:

API Level 1.0.0

getDeviceSettings() as System.DeviceSettings
Get the current device settings.

Example:

using Toybox.System;
var mySettings = System.getDeviceSettings();
Returns:

System.DeviceSettings
Since:

API Level 1.0.0

getDisplayMode() as System.DisplayMode
Get the current display mode, only available in devices with AMOLED or LCD screens.

Supported Devices:

[View devices]
Since:

API Level 5.0.0

getSystemStats() as System.Stats
Get the current system stats.

Example:

using Toybox.System;
var myStats = System.getSystemStats();
Returns:

System.Stats
Since:

API Level 1.0.0

getTimer() as Lang.Number
Get the current millisecond timer value.

Note:
The returned value typically starts at zero on device boot and will roll over periodically. Assuming the timer starts at zero, this will happen ~25 days after a reboot, and every ~50 days thereafter.

Returns:

Lang.Number
Since:

API Level 1.0.0

isAppInstalled(uri as Lang.String) as Lang.Boolean
Check the installation status of an app.

Parameters:

uri — (Lang.String) — The URI that specifies an app
Example:

Valid URI formats
manifest-id://[manifest ID in the form xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]
store-id://[app store ID in the form xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]
Returns:

Lang.Boolean — true if the app is installed, otherwise false
Since:

API Level 3.2.0

Throws:

(Lang.InvalidValueException) — Thrown if an invalid URI format is provided
print(output as Lang.Object or Null) as Void
Print to the console.

Parameters:

output — (Lang.Object) — The item to print, typically a String.
Since:

API Level 1.0.0

println(output as Lang.Object or Null) as Void
Print to the console with a line terminator.

Parameters:

output — (Lang.Object) — The item to print, typically a String.
Example:

using Toybox.System;
System.println("Hello Monkey C!");
Since:

API Level 1.0.0



Class: Toybox.System.ClockTime
Inherits:
Toybox.Lang.Objectshow all
Overview
Represents the current local time.

ClockTime is a convenient way to get the current time in an easy-to-use format without the need to perform time zone conversions or time-based arithmetic. Values provided by ClockTime may require formatting for proper display within an app.

See Also:
Toybox.Time
Number.format()
Example:

Get the time and print it to the console
using Toybox.System;
var myTime = System.getClockTime(); // ClockTime object
System.println(
    myTime.hour.format("%02d") + ":" +
    myTime.min.format("%02d") + ":" +
    myTime.sec.format("%02d")
);
Since:

API Level 1.0.0

Instance Member Summary
collapse
dst as Lang.Number
The daylight savings time offset.
hour as Lang.Number
The hour of the day based on a 24-hour clock.
min as Lang.Number
The minute of the current hour.
sec as Lang.Number
The second of the current minute.
timeZoneOffset as Lang.Number
The time offset from UTC in seconds.
Instance Attribute Details
var dst as Lang.Number
The daylight savings time offset.

Since:

API Level 1.0.0

Returns:

Lang.Number
var hour as Lang.Number
The hour of the day based on a 24-hour clock.

Since:

API Level 1.0.0

Returns:

Lang.Number
var min as Lang.Number
The minute of the current hour.

Since:

API Level 1.0.0

Returns:

Lang.Number
var sec as Lang.Number
The second of the current minute.

Since:

API Level 1.0.0

Returns:

Lang.Number
var timeZoneOffset as Lang.Number
The time offset from UTC in seconds.

Since:

API Level 1.0.0

Returns:

Lang.Number


Class: Toybox.System.ConnectionInfo
Inherits:
Toybox.Lang.Objectshow all
Overview
Represents the state of a communications channel connection.

Since:

API Level 3.0.0

Instance Member Summary
collapse
state as System.ConnectionState
The state of the connection.
Instance Attribute Details
var state as System.ConnectionState
The state of the connection.

Since:

API Level 3.0.0

Returns:

System.ConnectionState — A CONNECTION_STATE_* value
Generated Jun 12, 2025, 9:09:52 AM

Class: Toybox.System.DeviceSettings
Inherits:
Toybox.Lang.Objectshow all
Overview
Represents various settings available on a device.

See Also:
getDeviceSettings()
Lang.format()
Example:

using Toybox.System;
var mySettings = System.getDeviceSettings();
var clockMode = mySettings.is24Hour;
var phone = mySettings.phoneConnected;
var version = mySettings.monkeyVersion;
var versionString = Lang.format("$1$.$2$.$3$", version);
System.println(versionString); //e.g. 2.2.5
Since:

API Level 1.0.0

Instance Member Summary
collapse
activityTrackingOn as Lang.Boolean
The activity tracking setting mode.
alarmCount as Lang.Number
The number of alarms set on the device.
connectionAvailable as Lang.Boolean
Indicates if any communication channel is connected and available for use.
connectionInfo as Lang.Dictionary<Lang.Symbol, System.ConnectionInfo>
The state of connections available to the device.
distanceUnits as System.UnitsSystem
The distance unit setting mode.
doNotDisturb as Lang.Boolean
The Do Not Disturb setting mode.
elevationUnits as System.UnitsSystem
The elevation unit setting mode.
firmwareVersion as [ Lang.Number, Lang.Number ]
The current firmware version of the device.
firstDayOfWeek as Gregorian.DayOfWeek
The first day of the week.
fontScale as Lang.Float
Scale factor to be used for displayed text.
heightUnits as System.UnitsSystem
The height unit setting mode.
inputButtons as System.ButtonInputs
The physical buttons supported by the device.
is24Hour as Lang.Boolean
The clock mode mode.
isEnhancedReadabilityModeEnabled as Lang.Boolean
Indicates the device is currently using Enhanced Readability Mode.
isGlanceModeEnabled as Lang.Boolean
Indicates if widget glances are enabled on the device.
isNightModeEnabled as Lang.Boolean
Indicates the device is currently using night mode colors.
isTouchScreen as Lang.Boolean
The availability of a touch screen on the device.
monkeyVersion as [ Lang.Number, Lang.Number, Lang.Number ]
The Connect IQ version supported by the device.
notificationCount as Lang.Number
The number of active notifications.
paceUnits as System.UnitsSystem
The pace unit setting mode.
partNumber as Lang.String
The part number of the device.
phoneConnected as Lang.Boolean
The phone connection status mode.
phoneOperatingSystem as System.PhoneOperatingSystem or Null
Operating System of the BLE-connected mobile device.
requiresBurnInProtection as Lang.Boolean
This flag indicates whether the device screen requires burn-in protection.
screenHeight as Lang.Number
The height of the device screen in pixels.
screenShape as System.ScreenShape
The screen shape of the device.
screenWidth as Lang.Number
The width of the device screen in pixels.
systemLanguage as System.Language
The language being used by the system.
temperatureUnits as System.UnitsSystem
The temperature unit setting mode.
tonesOn as Lang.Boolean
The tone setting mode.
uniqueIdentifier as Lang.String or Null
A unique alphanumeric device identifier.
vibrateOn as Lang.Boolean
The vibration setting mode.
weightUnits as System.UnitsSystem
The weight unit setting mode.
Instance Attribute Details
var activityTrackingOn as Lang.Boolean
The activity tracking setting mode.

Since:

API Level 1.2.0

Returns:

Lang.Boolean — true if activity tracking is enabled on the device, otherwise false
var alarmCount as Lang.Number
The number of alarms set on the device.

Since:

API Level 1.2.0

Returns:

Lang.Number
var connectionAvailable as Lang.Boolean
Indicates if any communication channel is connected and available for use.

Since:

API Level 3.0.0

Returns:

Lang.Boolean
var connectionInfo as Lang.Dictionary<Lang.Symbol, System.ConnectionInfo>
The state of connections available to the device.

Since:

API Level 3.0.0

Returns:

Lang.Dictionary — A Dictionary that contains the state of each available connection. The keys, :bluetooth, :wifi, and :lte indicate the connection type. If a key is not present then it means that connection type is not available to the device. The values are a ConnectionInfo object, which contain the state of the connection type.
var distanceUnits as System.UnitsSystem
The distance unit setting mode.

Since:

API Level 1.0.0

Returns:

System.UnitsSystem — One of two System.UNIT_* constant values:
UNIT_METRIC if distance is set to display in kilometers (km)
UNIT_STATUTE if distance is set to display in miles (mi)
var doNotDisturb as Lang.Boolean
The Do Not Disturb setting mode.

Not all devices support Do Not Disturb, so it's a good idea to perform a has check when attempting to use this value.

Example:

using Toybox.System;
var mySettings = System.getDeviceSettings();
if (deviceSettings has :doNotDisturb) {
    var doNotDisturb = deviceSettings.doNotDisturb;
}
Since:

API Level 2.1.0

Returns:

Lang.Boolean — true if enabled on the device, otherwise false
var elevationUnits as System.UnitsSystem
The elevation unit setting mode.

Since:

API Level 1.0.0

Returns:

System.UnitsSystem — One of two System.UNIT_* constant values:
UNIT_METRIC if elevation is set to display in meters (m)
UNIT_STATUTE if elevation is set to display in feet (ft)
var firmwareVersion as [ Lang.Number, Lang.Number ]
The current firmware version of the device.

Example:

using Toybox.System;
var mySettings = System.getDeviceSettings();
var version = mySettings.firmwareVersion;
var versionString = Lang.format("$1$.$2$", version);
System.println(versionString minor); // e.g. 2.50
Since:

API Level 1.2.0

See Also:

Lang.format()
Returns:

Lang.Array — A two element Array containing the major and minor version numbers as Number objects
var firstDayOfWeek as Gregorian.DayOfWeek
The first day of the week.

Since:

API Level 3.0.0

Returns:

Gregorian.DayOfWeek — A Gregorian::DAY_* value
var fontScale as Lang.Float
Scale factor to be used for displayed text.

Since:

API Level 5.0.1

Supported Devices:

[View devices]
Returns:

Lang.Float — Scaling factor configured by user. Values will always be positive, and are typically in the range of 0.8 to 1.2.
var heightUnits as System.UnitsSystem
The height unit setting mode.

Since:

API Level 1.0.0

Returns:

System.UnitsSystem — One of two UNIT_* constant values:
UNIT_METRIC if height is set to display in meters (m)
UNIT_STATUTE if height is set to display inSystem. feet (ft)
var inputButtons as System.ButtonInputs
The physical buttons supported by the device.

This returns a bitwise binary of the enumerated values defined by the System.BUTTON_INPUT_* constants that match the available buttons on a particular device. For example, a vivoactive HR returns a value of 9, which indicates Select (1) and Menu (8) button support. A fenix 5, however, returns 11, indicating support for all available button types.

Example:

using Toybox.System;
var mySettings = System.getDeviceSettings();
if ((mySettings.inputButtons & System.BUTTON_INPUT_MENU) != 0) {
    // Allow the use of the Menu button
}
Since:

API Level 1.2.0

See Also:

Toybox.System
Returns:

System.ButtonInputs — A System.BUTTON_INPUT_* value
var is24Hour as Lang.Boolean
The clock mode mode.

Since:

API Level 1.0.0

Returns:

Lang.Boolean — true if the device is set to 24 hour mode, false if it is set to 12 hour mode
var isEnhancedReadabilityModeEnabled as Lang.Boolean
Indicates the device is currently using Enhanced Readability Mode.

Since:

API Level 4.2.3

Supported Devices:

[View devices]
Returns:

Lang.Boolean — true if Enhanced Readability Mode is enabled, otherwise false.
var isGlanceModeEnabled as Lang.Boolean
Indicates if widget glances are enabled on the device.

If glance mode is enabled, the system will pass up / down key events to a widget base page. Otherwise, the system will mask them out.

Since:

API Level 3.1.4

Supported Devices:

[View devices]
Returns:

Lang.Boolean — true if glance mode is enabled, otherwise false
var isNightModeEnabled as Lang.Boolean
Indicates the device is currently using night mode colors

Since:

API Level 4.1.2

Supported Devices:

[View devices]
Returns:

Lang.Boolean — true if night colors are currently in use, otherwise false.
var isTouchScreen as Lang.Boolean
The availability of a touch screen on the device.

Since:

API Level 1.2.0

Returns:

Lang.Boolean — true if the device has a touch screen and it is enabled in settings, otherwise false
var monkeyVersion as [ Lang.Number, Lang.Number, Lang.Number ]
The Connect IQ version supported by the device.

Example:

using Toybox.System;
var mySettings = System.getDeviceSettings();
var version = mySettings.monkeyVersion;
var versionString = Lang.format("$1$.$2$.$3$", version);
System.println(versionString); //e.g. 2.2.5
Since:

API Level 1.2.0

See Also:

Lang.format()
Returns:

Lang.Array — A three element Array containing the major, minor, and micro version numbers as Number objects
var notificationCount as Lang.Number
The number of active notifications.

Since:

API Level 1.2.0

Returns:

Lang.Number
var paceUnits as System.UnitsSystem
The pace unit setting mode.

Since:

API Level 1.0.0

Returns:

System.UnitsSystem — One of two System.UNIT_* constant values:
UNIT_METRIC if pace is set to display in kilometers per hour (km/hr)
UNIT_STATUTE if pace is set to display in miles per hour (mph)
var partNumber as Lang.String
The part number of the device.

Since:

API Level 1.2.0

Returns:

Lang.String
var phoneConnected as Lang.Boolean
The phone connection status mode.

Since:

API Level 1.1.0

Returns:

Lang.Boolean — true if a mobile phone is connected to the device, otherwise false
var phoneOperatingSystem as System.PhoneOperatingSystem or Null
Operating System of the BLE-connected mobile device.

Since:

API Level 5.0.1

Supported Devices:

[View devices]
Returns:

System.PhoneOperatingSystem — The operating system, if available, or null.
var requiresBurnInProtection as Lang.Boolean
This flag indicates whether the device screen requires burn-in protection.

Some screens require special drawing behavior when rendering content in always-on mode. If a screen requires burn-in protection the following rules must be followed: A maximum of ten-percent of the total available screen pixels can be in use at one time. Individual pixels can be on for no more than three update cycles when updating at once-per-minute intervals. If either condition is violated all screen pixels will be turned off until the device goes into high-power mode.

Since:

API Level 3.0.12

Returns:

Lang.Boolean — true if the screen type needs burn-in protection, false otherwise.
var screenHeight as Lang.Number
The height of the device screen in pixels.

In some cases, this can be useful to determine the device type at runtime. However, to get the height of the screen area currently available to an app, use Graphics.Dc.getHeight().

Since:

API Level 1.2.0

See Also:

Graphics.Dc.getHeight()
Returns:

Lang.Number
var screenShape as System.ScreenShape
The screen shape of the device.

Since:

API Level 1.2.0

Returns:

System.ScreenShape — A System.SCREEN_SHAPE_* value
var screenWidth as Lang.Number
The width of the device screen in pixels.

In some cases, this can be useful to determine the device type at runtime. However, to get the width of the screen area currently available to an app, use Graphics.Dc.getWidth().

Since:

API Level 1.2.0

See Also:

Graphics.Dc.getWidth()
Returns:

Lang.Number
var systemLanguage as System.Language
The language being used by the system

Since:

API Level 3.1.0

Returns:

System.Language — LANGUAGE_* enum
var temperatureUnits as System.UnitsSystem
The temperature unit setting mode.

Since:

API Level 1.0.0

Returns:

System.UnitsSystem — One of two System.UNIT_* constant values:
UNIT_METRIC if temperature is set to display in degrees Celsius (C)
UNIT_STATUTE if temperature is set to display in degrees Fahrenheit (F)
var tonesOn as Lang.Boolean
The tone setting mode.

Since:

API Level 1.0.0

Returns:

Lang.Boolean — true if tones are enabled on the device, otherwise false
var uniqueIdentifier as Lang.String or Null
A unique alphanumeric device identifier.

The value is unique for every app, but is stable on a device across uninstall and reinstall. Any use of this value for tracking user information must be in compliance with international privacy law.

Example:

using Toybox.System;
var mySettings = System.getDeviceSettings();
var id = mySettings.uniqueIdentifier;
if (id != null) {
    System.println(id); //e.g. ac915d426451c88e8ea691fa412f9af9c21b4d12
}
Since:

API Level 2.4.1

Returns:

Lang.String — An identifier that can be used to identify the host device or null on error.
var vibrateOn as Lang.Boolean
The vibration setting mode.

Since:

API Level 1.0.0

Returns:

Lang.Boolean — true if vibration is enabled on the device, otherwise false
var weightUnits as System.UnitsSystem
The weight unit setting mode.

Since:

API Level 1.0.0

Returns:

System.UnitsSystem — One of two System.UNIT_* constant values:
UNIT_METRIC if weight is set to display in kilograms (kg)
UNIT_STATUTE if weight is set to display in pounds (lbs)


Class: Toybox.System.Intent
Inherits:
Toybox.Lang.Objectshow all
Overview
An Intent sends content from one app to another app.

Strictly speaking, content is sent to a URI by an Intent, which can either be a native activity (e.g. Run, Bike, etc.) or another Connect IQ app. Used in conjunction with System.exitTo(), Intents can exit the current app and launch a second app, passing information from the originating app to the newly open app.

For example, a widget might collect data from a service via a Communications call and pass that data to a device app via Intent for use during an activity.

See Also:
System.exitTo()
Example:

using Toybox.System;
var targetApp = new System.Intent(
    "manifest-id://12345678-1234-1234-1234-123412341234",
    {"arg"=>"CurrentAppName"}
);
System.exitTo(targetApp);
Example:

Valid Intent URI formats
manifest-id://[manifest ID in the form xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]
store-id://[app store ID in the form xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]

// Launch sensor scan page to pair with a sensor. API level 5.1.0 and later.
system://pairing

Since:

API Level 2.2.0

App Types:

Audio Content Provider
Glance
Watch App
Widget
Instance Member Summary
collapse
arguments as Lang.Dictionary or Null
uri as Lang.String
Instance Method Summary
collapse
initialize(aURI as Lang.String, aArgs as Lang.Dictionary or Null)
Constructor.
Instance Attribute Details
var arguments as Lang.Dictionary or Null
Since:

API Level 2.2.0

var uri as Lang.String
Since:

API Level 2.2.0

Instance Method Details
initialize(aURI as Lang.String, aArgs as Lang.Dictionary or Null)
Constructor

Parameters:

aURI — (Lang.String) — The URI that specifies receiver of the Intent
aArgs — (Lang.Dictionary) — Parameters to pass to the target URI
Since:

API Level 2.2.0

Class: Toybox.System.PreviousOperationNotCompleteException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
This exception indicates that a call cannot be executed because a prior operation has not completed.

See Also:
Toybox.Lang.Exception
Since:

API Level 2.2.0

Instance Method Summary
collapse
initialize(msg as Lang.String)
Constructor.
Instance Method Details
initialize(msg as Lang.String)
Constructor

Parameters:

msg — (Lang.String) — The exception message
Since:

API Level 2.2.0

Class: Toybox.System.ServiceDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
ServiceDelegate is a class used to service Background events.

This class is used as the main entry point for background processes. A callback function within the delegate can be used to initiate other system events (e.g. Communications), but only the delegate function is guaranteed to complete. The Background process may be shut down at any time to handle higher priority processes.

See Also:
Toybox.Background
Example:

using Toybox.Background;
using Toybox.Communications;
using Toybox.System;

(:background)
class MyServiceDelegate extends System.ServiceDelegate {
    // When a scheduled background event triggers, make a request to
    // a service and handle the response with a callback function
    // within this delegate.
    function onTemporalEvent() {
        Communications.makeWebRequest(
            "https://myrequesturl.com",
            {},
            {},
            method(:responseCallback)
        );
    }

    function responseCallback(responseCode, data) {
        // Do stuff with the response data here and send the data
        // payload back to the app that originated the background
        // process.
        Background.exit(backgroundData);
    }
}
Since:

API Level 2.3.0

Instance Method Summary
collapse
onActivityCompleted(activity as { :sport as Activity.Sport, :subSport as Activity.SubSport }) as Void
The callback method that is triggered when an activity is completed.
onGoalReached(goalType as Application.GoalType) as Void
A callback method that is triggered in the background when a fitness goal is reached.
onOAuthResponse() as Void
The callback method that is triggered in the background when an OAuth response is received from the system.
onPhoneAppMessage(msg as Communications.PhoneAppMessage) as Void
The callback method that is triggered when a phone app message arrives for this app.
onSleepTime() as Void
The callback method that is triggered in the background at the configured sleep time.
onSteps() as Void
The callback method that is triggered in the background when a step goal is reached.
onTemporalEvent() as Void
A callback method that is triggered in the background when time-based events occur.
onWakeTime() as Void
A callback method that is triggered in the background at the configured wake time.
Instance Method Details
onActivityCompleted(activity as { :sport as Activity.Sport, :subSport as Activity.SubSport }) as Void
The callback method that is triggered when an activity is completed

Parameters:

activity — (Lang.Dictionary) — A dictionary containing information about the completed activity.
:sport — (Activity.Sport) — The primary sport of the completed activity.
:subSport — (Activity.SubSport) — The sport subcategory of the completed activity.
Since:

API Level 3.0.10

onGoalReached(goalType as Application.GoalType) as Void
A callback method that is triggered in the background when a fitness goal is reached.

Parameters:

goalType — (Application.GoalType) — An Application.GOAL_TYPE_* value, representing the goal type that is being registered.
Since:

API Level 2.3.0

onOAuthResponse() as Void
The callback method that is triggered in the background when an OAuth response is received from the system

Since:

API Level 2.3.0

onPhoneAppMessage(msg as Communications.PhoneAppMessage) as Void
The callback method that is triggered when a phone app message arrives for this app

Parameters:

msg — (Communications.PhoneAppMessage) — The message received.
Supported Devices:

[View devices]
Since:

API Level 3.2.0

onSleepTime() as Void
The callback method that is triggered in the background at the configured sleep time.

Since:

API Level 2.3.0

onSteps() as Void
The callback method that is triggered in the background when a step goal is reached.

Step goals occur at 1000 step increments.

Since:

API Level 2.3.0

onTemporalEvent() as Void
A callback method that is triggered in the background when time-based events occur.

Since:

API Level 2.3.0

onWakeTime() as Void
A callback method that is triggered in the background at the configured wake time.

Since:

API Level 2.3.0

Class: Toybox.System.Stats
Inherits:
Toybox.Lang.Objectshow all
Overview
Represents various statistics available on a device, such as the battery charge and memory use.

See Also:
System.getSystemStats()
Example:

using Toybox.System;
var myStats = System.getSystemStats();
System.println(myStats.battery);
System.println(myStats.totalMemory);
Since:

API Level 1.0.0

Instance Member Summary
collapse
battery as Lang.Float
The remaining battery life as a percentage.
batteryInDays as Lang.Float
The remaining battery life in days.
charging as Lang.Boolean
Battery charging indicator.
freeMemory as Lang.Number
The current free memory in bytes.
solarIntensity as Lang.Number or Null
A Toybox::Lang::Number value from 0-100 that describes the solar sensor's charge efficiency, if available.
totalMemory as Lang.Number
The total available memory in bytes.
usedMemory as Lang.Number
The memory used by the application in bytes.
Instance Attribute Details
var battery as Lang.Float
The remaining battery life as a percentage.

Note:
Some devices may report slightly less than 100% charge immediately after being removed from the charging cradle or cable. While the device is on the charger, the charger will disable itself after the battery charges to 100%. The battery will then very slowly discharge until it hits a hysteresis threshold, at which point the charger will reactivate. This is intentionally done to extend the life of the battery if the device is left on the charger for a long time. Garmin artificially locks the charge indicator on the charge page to 100% once the unit reaches full charge to mask this minor charge cycle fluctuation.

Since:

API Level 1.0.0

Returns:

Lang.Float
var batteryInDays as Lang.Float
The remaining battery life in days.

Since:

API Level 3.3.0

Supported Devices:

[View devices]
Returns:

Lang.Float
var charging as Lang.Boolean
Battery charging indicator. This will be set to true if the device is connected to the charging cradle or cable whether or not the device is fully charged.

Since:

API Level 3.0.0

See Also:

Stats.battery
Returns:

Lang.Boolean
var freeMemory as Lang.Number
The current free memory in bytes.

Since:

API Level 1.0.0

Returns:

Lang.Number
var solarIntensity as Lang.Number or Null
A Toybox::Lang::Number value from 0-100 that describes the solar sensor's charge efficiency, if available. Will be set to null if the device doesn't support solar or a negative number when the device is not currently charging.

Since:

API Level 3.2.0

Returns:

Lang.Number
var totalMemory as Lang.Number
The total available memory in bytes.

Since:

API Level 1.0.0

Returns:

Lang.Number
var usedMemory as Lang.Number
The memory used by the application in bytes.

Since:

API Level 1.0.0

Returns:

Lang.Number

Class: Toybox.System.UnexpectedAppTypeException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
This exception indicates that the app targeted by an Intent when exiting to the app is not an allowed app type.

Allowed app types currently include watch-apps (both native activities and Connect IQ apps) and widgets. Watch faces and data fields cannot be targeted. If a native activity that has a Connect IQ data field configured is targeted, the native app will receive the Intent, not the data field.

See Also:
Toybox.Lang.Exception
Since:

API Level 2.2.0

Instance Method Summary
collapse
initialize(msg as Lang.String)
Constructor.
Instance Method Details
initialize(msg as Lang.String)
Constructor

Parameters:

msg — (Lang.String) — The exception message
Since:

API Level 2.2.0

Module: Toybox.Test
Overview
The Test module provides a testing framework for Monkey C.

The test module provides the tools to implement your own unit test and asserts in your source code. Unit tests take a Logger object and allow for different levels of output. Unit tests are annotated with :test and ignored if testing is not run. Asserts do not require the :test annotation and will be compiled out in release versions or you Connect IQ Content. A test RESULTS section is printed to the console with the tests run, test status, and failure rates.

See Also:
Core Topics - Unit Testing
Example:

Testing Implementation
using Toybox.Test;
var x = 1;
var y = 2;

// Asserts can be called outside of test calls
function assertWithoutLogger(x, y) {
   Test.assertEqual(x, y);
}

(:test)
function aDebugTest(logger) {
   logger.debug("This is a debug message.");
   return true;
}

(:test)
function aTestOfAssert(logger) {
   logger.debug("This tests the assert() function.");
   Test.assert(true);
   logger.debug("Test.assert(true) didn't throw an Exception which is a very good thing.");
   Test.assert(false);
   logger.error("We should not be executing this statement.");
   return true;
}
Example:

Console Output for above example
// Output:
------------------------------------------------------------------------------
Executing test aDebugTest...
DEBUG (9:21): This is a debug message.
PASS
------------------------------------------------------------------------------
Executing test aTestOfAssert...
DEBUG (9:21): This tests the assert() function.
DEBUG (9:21): Test.assert(true) didn't throw an Exception which is a very good thing.
Unhandled Exception
ASSERTION FAILED
aTestOfAssert in C:\workspace\RunNoEvil\source\RunNoEvil.mc:21
runTest in UnitTests:33
ERROR

==============================================================================
RESULTS
Test:                                Status:
aDebugTest                           PASS
aTestOfAssert                        ERROR
Ran 2 tests

FAILED (passed=1, failed=0, errors=1)
Since:

API Level 2.1.0

Classes Under Namespace
Classes: AssertException, Logger

Instance Method Summary
collapse
assert(test as Lang.Boolean) as Void
Throws an exception if the test is false.
assertEqual(value1 as Lang.Object, value2 as Lang.Object or Null) as Void
Throws an exception if value1 and value2 are not equal.
assertEqualMessage(value1 as Lang.Object, value2 as Lang.Object or Null, message as Lang.String) as Void
Throws an exception if value1 and value2 are not equal followed by a String defined by the developer.
assertMessage(test as Lang.Boolean, message as Lang.String) as Void
Throws an exception if the test is false followed by a String defined by the developer.
assertNotEqual(value1 as Lang.Object, value2 as Lang.Object or Null) as Void
Throws an exception if value1 and value2 are equal.
assertNotEqualMessage(value1 as Lang.Object, value2 as Lang.Object or Null, message as Lang.String) as Void
Throws an exception if value1 and value2 are equal followed by a String defined by the developer.
Instance Method Details
assert(test as Lang.Boolean) as Void
Throws an exception if the test is false.

Parameters:

test — (Lang.Boolean) — The expression to test for true
Example:

using Toybox.Test;
(:test)
function anAssertTest(logger) {
   var x = false;
   Test.assert(x);
   return true;
}
// Output:
ASSERTION FAILED
Unhandled Exception
Since:

API Level 2.1.0

Throws:

(Test.AssertException)
assertEqual(value1 as Lang.Object, value2 as Lang.Object or Null) as Void
Throws an exception if value1 and value2 are not equal.

The objects passed to this function must implement the Object.equals() method which compares both type and value.

Parameters:

value1 — (Lang.Object) — The first value to test for equality
value2 — (Lang.Object) — The second value to test for equality
Example:

using Toybox.Test;
(:test)
function anAssertEqualTest(logger) {
   var x = 1;
   var y = 2;
   Test.assertEqual(x, y);
   return true;
}
// Output:
ASSERTION FAILED
Unhandled Exception
Since:

API Level 2.1.0

Throws:

(Test.AssertException)
assertEqualMessage(value1 as Lang.Object, value2 as Lang.Object or Null, message as Lang.String) as Void
Throws an exception if value1 and value2 are not equal followed by a String defined by the developer.

The objects passed to this function must implement the Object.equals() method which compares both type and value.

Parameters:

value1 — (Lang.Object) — The value to test for equality
value2 — (Lang.Object) — The value to test for equality
message — (Lang.String) — The identifying message for the assert
Example:

using Toybox.Test;
(:test)
function anAssertEqualMessageTest(logger) {
   var x = 1;
   var y = 2;
   Test.assertEqual(x, y, "x and y are not equal!");
   return true;
}
// Output:
ASSERTION FAILED: x and y are not equal!
Unhandled Exception
Since:

API Level 2.1.0

Throws:

(Test.AssertException)
assertMessage(test as Lang.Boolean, message as Lang.String) as Void
Throws an exception if the test is false followed by a String defined by the developer.

Parameters:

test — (Lang.Boolean) — Expression to test for true
message — (Lang.String) — The identifying message for the assert
Example:

using Toybox.Test;
(:test)
function anAssertMessageTest(logger) {
   var x = false;
   Test.assertMessage(x, "The assert is False for x.");
   return true;
}
// Output:
ASSERTION FAILED: The assert is False for x.
Unhandled Exception
Since:

API Level 2.1.0

Throws:

(Test.AssertException)
assertNotEqual(value1 as Lang.Object, value2 as Lang.Object or Null) as Void
Throws an exception if value1 and value2 are equal.

The objects passed to this function must implement the Object.equals() method which compares both type and value.

Parameters:

value1 — (Lang.Object) — The value to test for equality
value2 — (Lang.Object) — The value to test for equality
Example:

using Toybox.Test;
(:test)
function anAssertNotEqualTest(logger) {
   var x = 1;
   var y = 1;
   Test.assertNotEqual(x, y);
   return true;
}
// Output:
ASSERTION FAILED
Unhandled Exception
Since:

API Level 2.1.0

Throws:

(Test.AssertException)
assertNotEqualMessage(value1 as Lang.Object, value2 as Lang.Object or Null, message as Lang.String) as Void
Throws an exception if value1 and value2 are equal followed by a String defined by the developer.

The objects passed to this function must implement the Object.equals() method which compares both type and value.

Parameters:

value1 — (Lang.Object) — The value to test for equality
value2 — (Lang.Object) — The value to test for equality
message — (Lang.String) — The identifying message for the assert
Example:

using Toybox.Test;
(:test)
function anAssertNotEqualMessageTest(logger) {
   var x = 1;
   var y = 2;
   Test.assertNotEqual(x, y, "x and y are equal!");
   return true;
}
// Output:
ASSERTION FAILED: x and y are equal!
Unhandled Exception
Since:

API Level 2.1.0

Throws:

(Test.AssertException)

Class: Toybox.Test.AssertException
Inherits:
Toybox.Lang.Exceptionshow all
Overview
Since:

API Level 2.1.0

Instance Method Summary
collapse
initialize(message as Lang.String or Null)
Constructor.
Instance Method Details
initialize(message as Lang.String or Null)
Constructor

Parameters:

message — (Lang.String) — The exception message
Since:

API Level 2.1.0

Class: Toybox.Test.Logger
Inherits:
Toybox.Lang.Objectshow all
Overview
The Logger class provides output capabilities to tests.

It is not necessary to instantiate the Logger class. This is done automatically behind the scenes.

Since:

API Level 2.1.0

Instance Method Summary
collapse
debug(str as Lang.Object) as Void
Write a debug String to the output stream.
error(str as Lang.Object) as Void
Write an error String to the output stream.
warning(str as Lang.Object) as Void
Write a warning String to the output stream.
Instance Method Details
debug(str as Lang.Object) as Void
Write a debug String to the output stream.

The String is prefixed with DEBUG and a time stamp.

Parameters:

str — (Lang.String) — The String output to the console
Example:

using Toybox.Test;
(:test)
function aDebugTest(logger) {
   logger.debug("This is a debug message.");
   return true;
}
// Output:
DEBUG (9:23): This is a debug message.
Since:

API Level 2.1.0

error(str as Lang.Object) as Void
Write an error String to the output stream.

The String is prefixed with ERROR and time stamp.

Parameters:

str — (Lang.String) — The String output to the console
Example:

using Toybox.Test;
(:test)
function anErrorTest(logger) {
   logger.error("This is an error message.");
   return true;
}
// Output:
ERROR (9:24): This is an error message.
Since:

API Level 2.1.0

warning(str as Lang.Object) as Void
Write a warning String to the output stream.

The String is prefixed with WARNING and a time stamp.

Parameters:

str — (Lang.String) — The String output to the console
Example:

using Toybox.Test;
(:test)
function aWarningTest(logger) {
   logger.warning("This is a warning message.");
   return true;
}
// Output:
WARNING (9:23): This is a warning message.
Since:

API Level 2.1.0

Module: Toybox.Time
Overview
The Time module provides functionality for dealing with times and dates.

There are two main concepts used by Monkey C when working with time: the Moment and Duration. A Moment is a single point in time, while a Duration is a span of time. Moments and Durations can be used together for time calculations in the following ways:


  Expression           Method               Result    Notes
  ---------------------------------------------------------------------------
  Moment + Moment      -                    -         Invalid
  Moment + Duration    Moment.add()         Moment    A later Moment
  Moment - Moment      Moment.subtract()    Duration  The span between Moments
  Moment - Duration    Moment.subtract()    Moment    An earlier Moment

  Duration + Duration  Duration.add()       Duration  A longer Duration
  Duration + Moment    Duration.add()       Moment    A later Moment
  Duration - Duration  Duration.subtract()  Duration  A shorter Duration
  Duration - Moment    -                    -         Invalid

Dates and times are generally represented in UTC time from the UNIX epoch, with the exception of the Gregorian Moment, which are created relative to the current local time.

Date and time formatting in Monkey C is relatively open-ended, providing some formatting constants for short, medium, and long formatting (long and medium formatting are currently equivalent).


  Constant          Seconds  Minutes  Hours  Day of Week  Day  Month  Year
  ---------------------------------------------------------------------------
  FORMAT_SHORT   |  0        0        0      4            1    3      2017
  FORMAT_MEDIUM  |  0        0        0      Wed          1    Mar    2017
  FORMAT_LONG    |  0        0        0      Wed          1    Mar    2017
See Also:
UTC Time
UNIX Time
Example:

Formatting and printing a date
using Toybox.System;
using Toybox.Time;
using Toybox.Time.Gregorian;
var today = Gregorian.info(Time.now(), Time.FORMAT_MEDIUM);
var dateString = Lang.format(
    "$1$:$2$:$3$ $4$ $5$ $6$ $7$",
    [
        today.hour,
        today.min,
        today.sec,
        today.day_of_week,
        today.day,
        today.month,
        today.year
    ]
);
System.println(dateString); // e.g. "16:28:32 Wed 1 Mar 2017"
Example:

Creating a Moment representing May 16, 2003
using Toybox.System;
using Toybox.Time;
using Toybox.Time.Gregorian;
var options = {
    :year   => 2003,
    :month  => 5,
    :day    => 16,
    :hour   => 6    // UTC offset, in this case for CST
};
var birthday = Gregorian.moment(options);
Since:

API Level 1.0.0

Modules Under Namespace
Modules: Time.Gregorian

Classes Under Namespace
Classes: Duration, LocalMoment, Moment, RealTimeClockNotValidException

Constant Summary
DateFormat
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
FORMAT_SHORT	0	
API Level 1.0.0

Short formatting is a numerical representation of date/time.

FORMAT_MEDIUM	1	
API Level 1.0.0

Medium formatting is a mix of Numbers and Strings depending on which function is called. If formatted as a String, the result is an abbreviated form of the time or date.

FORMAT_LONG	2	
API Level 1.0.0

Long formatting is a mix of Numbers and Strings depending on which function is called. If formatted as a String, the result is an abbreviated form of the time or date.

CurrentTime
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
CURRENT_TIME_DEFAULT	0	
API Level 3.0.10

The default system clock, which may be user-modified.

CURRENT_TIME_GPS	1	
API Level 3.0.10

The clock time based on your current GPS location if a GPS signal is available.

CURRENT_TIME_RTC	2	
API Level 3.0.10

The system's real-time clock that cannot be overridden by user settings, and can only be updated by trusted sources such as GPS.

Instance Method Summary
collapse
getCurrentTime(options as { :currentTimeType as Time.CurrentTime }) as Time.Moment
Get a Moment for the current time based on the specified source.
now() as Time.Moment
Get a Moment for the current time.
today() as Time.Moment
Get a Moment for midnight today.
Instance Method Details
getCurrentTime(options as { :currentTimeType as Time.CurrentTime }) as Time.Moment
Get a Moment for the current time based on the specified source.

This method behaves the same as Time.now(), but accepts an options argument that allows the time source to be selected.

Parameters:

options — (Lang.Dictionary) — Clock options
:currentTimeType — (Time.CurrentTime) — A Time.CURRENT_TIME_* value, which defaults to Time.CURRENT_TIME_DEFAULT if no time type is provided
See Also:

Time.now()
Since:

API Level 3.0.10

Throws:

(Time.RealTimeClockNotValidException) — Thrown if Time.CURRENT_TIME_RTC is passed as an option and the real-time clock value is not valid, i.e. synced with trusted source such as GPS.
now() as Time.Moment
Get a Moment for the current time.

Example:

Using now() on December 31, 1989 at 5:00 pm CST
using Toybox.Time;
var now = new Time.Moment(Time.now().value()); // UNIX epoch 631148400
Returns:

Time.Moment — A Moment representing the current moment in time.
See Also:

UTC Time
UNIX Time
Since:

API Level 1.0.0

today() as Time.Moment
Get a Moment for midnight today.

Example:

Using today() on December 31, 1989 at 5:00 pm CST
using Toybox.Time;
var now = new Time.Moment(Time.today().value()); // UNIX epoch 631087200
Returns:

Time.Moment — A Moment representing the the beginning of the current day.
See Also:

UTC Time
UNIX Time
Since:

API Level 1.0.0

Class: Toybox.Time.Duration
Inherits:
Toybox.Lang.Objectshow all
Overview
A Duration is an immutable period of time.

Duration objects are closely related to Moment objects, and are frequently used together for time calculations. While a Moment represents a single point in time, a Duration represents a span of time such as seven days.

Duration objects are stored as a the number of seconds that compose the span of time the Duration represents.

Since:

API Level 1.0.0

Instance Method Summary
collapse
add(time as Time.Moment or Time.Duration) as Time.Moment or Time.Duration
Add a Moment or another Duration to a Duration.
compare(duration as Time.Duration) as Lang.Number
Determine if a Duration is shorter or longer than another Duration.
divide(value as Lang.Number or Lang.Float) as Time.Duration
Divide a Duration by a value.
greaterThan(duration as Time.Duration) as Lang.Boolean
Determine if a Duration is longer than another Duration.
initialize(value as Lang.Number) Time.Duration
Constructor.
lessThan(duration as Time.Duration) as Lang.Boolean
Determine if a Duration is shorter than another Duration.
multiply(value as Lang.Number or Lang.Float) as Time.Duration
Multiply a Duration by a value.
subtract(duration as Time.Duration) as Time.Duration
Get the absolute difference between two Duration objects.
value() as Lang.Number
Get the value of a Duration.
Instance Method Details
add(time as Time.Moment or Time.Duration) as Time.Moment or Time.Duration
Add a Moment or another Duration to a Duration.

When adding a Moment to a Duration, this method functions the same as the Moment.add() method.

Parameters:

time — (Time.Duration, Time.Moment) — The Duration or Moment to add to Duration
Example:

Add two Duration objects
using Toybox.Time;
var oneHour    = new Time.Duration(3600);
var twoHours   = new Time.Duration(7200);
var threeHours = oneHour.add(twoHours);
Returns:

Time.Duration, Time.Moment — A Duration or Moment object that is the sum of self and the provided object:
Duration + Moment = Moment
Duration + Duration = Duration
See Also:

Moment.add()
Since:

API Level 1.0.0

compare(duration as Time.Duration) as Lang.Number
Determine if a Duration is shorter or longer than another Duration.

This computes a Number representing the difference between the two Duration objects in seconds. The subtract() method can also be used to get the absolute difference between two Duration objects.

Parameters:

duration — (Time.Duration) — The Duration to compare to this Duration
Example:

using Toybox.System;
using Toybox.Time;
var oneHour    = new Time.Duration(3600);
var twoHours   = new Time.Duration(7200);

System.println(oneHour.compare(twoHours)); // -3600, or one minute in the past
System.println(twoHours.compare(oneHour)); //  3600, or one minute in the future
Returns:

Lang.Number — The Number of seconds difference between the two Duration objects. If the Duration supplied for comparison is longer than this Duration, the value will be negative.
Since:

API Level 1.0.0

divide(value as Lang.Number or Lang.Float) as Time.Duration
Divide a Duration by a value.

Parameters:

value — (Lang.Number, Lang.Float) — The value by which to divide the Duration
Example:

using Toybox.Time;
var fourHours  = new Time.Duration(Gregorian.SECONDS_PER_HOUR * 4);
var twoHours = fourHours.divide(2);
Returns:

Time.Duration — The quotient of the Duration and the supplied value
Since:

API Level 1.0.0

greaterThan(duration as Time.Duration) as Lang.Boolean
Determine if a Duration is longer than another Duration.

Parameters:

duration — (Time.Duration) — The Duration to compare to this Duration
Example:

using Toybox.System;
using Toybox.Time;
var oneHour    = new Time.Duration(3600);
var twoHours   = new Time.Duration(7200);

System.println(oneHour.greaterThan(twoHours)); // false
System.println(twoHours.greaterThan(oneHour)); // true
Returns:

Lang.Boolean — true if this Duration is longer than the Duration supplied for comparison, otherwise false
Since:

API Level 1.0.0

initialize(value as Lang.Number) Time.Duration
Constructor

Parameters:

value — (Lang.Number) — The Number of seconds with which to initialize the Duration
Example:

Create a Duration of one day with a number of seconds
using Toybox.Time;
var oneDay = new Time.Duration(86400);
Returns:

Time.Duration — A Duration representing the specified Number of seconds
See Also:

Gregorian.duration()
Since:

API Level 1.0.0

lessThan(duration as Time.Duration) as Lang.Boolean
Determine if a Duration is shorter than another Duration.

Parameters:

duration — (Time.Duration) — The Duration to compare to this Duration
Example:

using Toybox.System;
using Toybox.Time;
var oneHour    = new Time.Duration(3600);
var twoHours   = new Time.Duration(7200);

System.println(oneHour.lessThan(twoHours)); // true
System.println(twoHours.lessThan(oneHour)); // false
Returns:

Lang.Boolean — true if this Duration is shorter than the Duration supplied for comparison, otherwise false
Since:

API Level 1.0.0

multiply(value as Lang.Number or Lang.Float) as Time.Duration
Multiply a Duration by a value.

Parameters:

value — (Lang.Number, Lang.Float) — The value by which to multiply the Duration
Example:

using Toybox.Time;
var twoHours  = new Time.Duration(7200);
var fourHours = twoHours.multiply(2);
Returns:

Time.Duration — The product of the Duration and the supplied value
Since:

API Level 1.0.0

subtract(duration as Time.Duration) as Time.Duration
Get the absolute difference between two Duration objects.

The computed Duration is always a positive value. The compare() method can also be used to get the difference between two Duration objects.

Parameters:

duration — (Time.Duration) — The Duration to subtract from this Duration
Example:

using Toybox.Time;
var twoHours   = new Time.Duration(7200);
var threeHours = new Time.Duration(10800);
var oneHour = threeHours.subtract(twoHours);
Returns:

Time.Duration — The difference between the two Duration objects
Since:

API Level 1.0.0

value() as Lang.Number
Get the value of a Duration.

Returns:

Lang.Number — The value of the Duration in seconds
Since:

API Level 1.0.0

Module: Toybox.Time.Gregorian
Overview
The Gregorian module provides an interface for getting Moment objects and Duration objects based on the Gregorian calendar.

For convenience, several time constants are defined that represent the number of seconds per year, per day, per hour, and per minute.

See Also:
The Gregorian Calendar
Since:

API Level 1.0.0

Classes Under Namespace
Classes: Info

Constant Summary
Constant Variables
Type	Name	Value	Since	Description
Type	SECONDS_PER_DAY	86400	
API Level 1.0.0

The number of seconds in one day

Type	SECONDS_PER_HOUR	3600	
API Level 1.0.0

The number of seconds in one hour

Type	SECONDS_PER_MINUTE	60	
API Level 1.0.0

The number of seconds in one minute

Type	SECONDS_PER_YEAR	31557600	
API Level 1.0.0

The number of seconds in one year

DayOfWeek
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
DAY_SUNDAY	1	
API Level 3.0.0

Sunday

DAY_MONDAY	2	
API Level 3.0.0

Monday

DAY_TUESDAY	3	
API Level 3.0.0

Tuesday

DAY_WEDNESDAY	4	
API Level 3.0.0

Wednesday

DAY_THURSDAY	5	
API Level 3.0.0

Thursday

DAY_FRIDAY	6	
API Level 3.0.0

Friday

DAY_SATURDAY	7	
API Level 3.0.0

Saturday

Month
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
MONTH_JANUARY	1	
API Level 3.0.0

January

MONTH_FEBRUARY	2	
API Level 3.0.0

February

MONTH_MARCH	3	
API Level 3.0.0

March

MONTH_APRIL	4	
API Level 3.0.0

April

MONTH_MAY	5	
API Level 3.0.0

May

MONTH_JUNE	6	
API Level 3.0.0

June

MONTH_JULY	7	
API Level 3.0.0

July

MONTH_AUGUST	8	
API Level 3.0.0

August

MONTH_SEPTEMBER	9	
API Level 3.0.0

September

MONTH_OCTOBER	10	
API Level 3.0.0

October

MONTH_NOVEMBER	11	
API Level 3.0.0

November

MONTH_DECEMBER	12	
API Level 3.0.0

December

Instance Method Summary
collapse
duration(options as { :years as Lang.Number, :days as Lang.Number, :hours as Lang.Number, :minutes as Lang.Number, :seconds as Lang.Number }) as Time.Duration
Create a Duration from a Dictionary of options.
info(moment as Time.Moment or Time.LocalMoment, format as Time.DateFormat) as Gregorian.Info
Get Info for a Moment in local time.
localMoment(location as Position.Location, moment as Time.Moment) as Time.LocalMoment or Null
Create a LocalMoment from a Moment and a Location.
moment(options as { :year as Lang.Number, :month as Lang.Number or Lang.Symbol, :day as Lang.Number, :hour as Lang.Number, :minute as Lang.Number, :second as Lang.Number }) as Time.Moment
Create a Moment from a Dictionary of options.
utcInfo(moment as Time.Moment, format as Time.DateFormat) as Gregorian.Info
Get Info for a Moment in UTC time.
Instance Method Details
duration(options as { :years as Lang.Number, :days as Lang.Number, :hours as Lang.Number, :minutes as Lang.Number, :seconds as Lang.Number }) as Time.Duration
Create a Duration from a Dictionary of options.

This is an alternative to Duration.initialize() that allows the Duration to be made more easily, using familiar units, which can be handy when building a Duration manually.

Option values are represented as signed 32-bit integers.

Parameters:

options — (Lang.Dictionary) — A dictionary of options
:years — (Lang.Number) — The number of years (max 69)
:days — (Lang.Number) — The number of days (max 24855)
:hours — (Lang.Number) — The number of hours (max 596523)
:minutes — (Lang.Number) — The number of minutes (max 35791394)
:seconds — (Lang.Number) — The number of seconds (max 2147483647)
Example:

Create a Duration of one day with Gregorian.duration()
using Toybox.Time.Gregorian;
var oneDay = Gregorian.duration({:days => 1});
Returns:

Time.Duration — The Duration representing the specified span of time
See Also:

Duration.initialize()
Since:

API Level 1.0.0

info(moment as Time.Moment or Time.LocalMoment, format as Time.DateFormat) as Gregorian.Info
Get Info for a Moment in local time.

Parameters:

moment — (Time.Moment, Time.LocalMoment) — A Moment or LocalMoment object for which to get Info
format — (Time.DateFormat) — A Time.FORMAT_* type
Example:

Get Info for today in local time (assume CST)
using Toybox.System;
using Toybox.Time;
using Toybox.Time.Gregorian;
var options = {
    :year   => 2003,
    :month  => 5, // 3.x devices can also use :month => Gregorian.MONTH_MAY
    :day    => 16,
    :hour   => 0
};
var date = Gregorian.moment(options);
var birthday = Gregorian.info(date, Time.FORMAT_MEDIUM);
System.println(birthday.year);  // 2003
System.println(birthday.month); // May
System.println(birthday.day);   // 16
System.println(birthday.hour);  // 19
Returns:

Gregorian.Info — Info for the supplied Moment formatted according to the specified format type in local time.
Since:

API Level 1.0.0

localMoment(location as Position.Location, moment as Time.Moment) as Time.LocalMoment or Null
Create a LocalMoment from a Moment and a Location

Parameters:

location — (Position.Location) — The location to use to determine the time zone offset and daylight saving time rules.
moment — (Time.Moment) — The UTC time to find the local time for.
Supported Devices:

[View devices]
Returns:

Time.LocalMoment — A LocalMoment object for the local time at the given location, or null if an error occurred.
Since:

API Level 3.3.0

moment(options as { :year as Lang.Number, :month as Lang.Number or Lang.Symbol, :day as Lang.Number, :hour as Lang.Number, :minute as Lang.Number, :second as Lang.Number }) as Time.Moment
Create a Moment from a Dictionary of options.

  Each option value is assumed to be in the UTC time zone.

Unlike Moment.initialize(), which is based on the UNIX epoch, a Moment created with Gregorian.moment() is based on today(). The result is determined by taking the result of today() and overlaying the options provided.

Parameters:

options — (Lang.Dictionary) — A dictionary of options; values that would not result in a valid date are not allowed
:year — (Lang.Number) — The year (1970-2106)
:month — (Lang.Number, Lang.Symbol) — The month (1-12) or a Symbol (:january, :february, ...)
:day — (Lang.Number) — The day of month (1-31)
:hour — (Lang.Number) — The hour (0-23)
:minute — (Lang.Number) — The minute (0-59)
:second — (Lang.Number) — The second (0-59)
Example:

Create a Moment representing midnight on the first day of the current month.
using Toybox.Time;
var oneDay = Gregorian.moment({:day => 1});
Returns:

Time.Moment — A Moment representing the specified moment in time
See Also:

Moment.initialize()
UTC Time
Since:

API Level 1.0.0

utcInfo(moment as Time.Moment, format as Time.DateFormat) as Gregorian.Info
Get Info for a Moment in UTC time.

  Info
Parameters:

format — (Time.DateFormat) — A Time.FORMAT_* type
Example:

Get Info for today in UTC
using Toybox.System;
using Toybox.Time;
using Toybox.Time.Gregorian;
var options = {
    :year   => 2003,
    :month  => 5, // 3.x devices can also use :month => Gregorian.MONTH_MAY
    :day    => 16,
    :hour   => 0
};
var date = Gregorian.moment(options);
var birthday = Gregorian.utcInfo(date, Time.FORMAT_MEDIUM);
System.println(birthday.year);  // 2003
System.println(birthday.month); // May
System.println(birthday.day);   // 16
System.println(birthday.hour);  // 0
Returns:

Gregorian.Info — Info for the supplied Moment formatted according to the specified format type in UTC time.
See Also:

UTC Time
Since:

API Level 2.1.0



Class: Toybox.Time.Gregorian.Info
Inherits:
Toybox.Lang.Objectshow all
Overview
The Gregorian.Info class contains all of the necessary information to represent a Gregorian date.

The types of some returned values depend on the Time.FORMAT_* value specified when calling info() or utcInfo().

Since:

API Level 1.0.0

Instance Member Summary
collapse
day as Lang.Number
The date, indicating the day of the month.
day_of_week as Lang.Number or Lang.String
The day of the week (e.g.
hour as Lang.Number
The hour of the day based on a 24-hour clock.
min as Lang.Number
The minutes within an hour.
month as Lang.Number or Lang.String
The month of the year (e.g.
sec as Lang.Number
The seconds within a minute.
year as Lang.Number
The year.
Instance Attribute Details
var day as Lang.Number
The date, indicating the day of the month.

Since:

API Level 1.0.0

Returns:

Lang.Number
var day_of_week as Lang.Number or Lang.String
The day of the week (e.g. Monday, Tuesday, Wednesday, etc,).

Note:
The String values returned are language and device dependent.

Since:

API Level 1.0.0

Returns:

Lang.Number, Lang.String — The day of the week in the specified format:
FORMAT_SHORT (Toybox::Lang::Number): A number in the range 1 to 7. 1 = Sunday, 2 = Monday, ..., 7 = Saturday
FORMAT_MEDIUM (Toybox::Lang::String): The abbreviated day of the week: "Sun", "Mon", ... "Sat"
FORMAT_LONG (Toybox::Lang::String): Currently the same as FORMAT_MEDIUM
var hour as Lang.Number
The hour of the day based on a 24-hour clock.

Since:

API Level 1.0.0

Returns:

Lang.Number
var min as Lang.Number
The minutes within an hour.

Since:

API Level 1.0.0

Returns:

Lang.Number
var month as Lang.Number or Lang.String
The month of the year (e.g. January, February, March, etc.).

Note:
The String values returned are language and device dependent.

Since:

API Level 1.0.0

Returns:

Lang.Number, Lang.String — The month of the year in the specified format:
FORMAT_SHORT (Toybox::Lang::Number): A number in the range 1 to 12. 1 = January, 2= February, ..., 12 = December
FORMAT_MEDIUM (Toybox::Lang::String): The abbreviated month: "Jan", "Feb", ..., "Dec"
FORMAT_LONG (Toybox::Lang::String): Currently the same as FORMAT_MEDIUM
var sec as Lang.Number
The seconds within a minute.

Since:

API Level 1.0.0

Returns:

Lang.Number
var year as Lang.Number
The year.

Since:

API Level 1.0.0

Returns:

Lang.Number

Class: Toybox.Time.LocalMoment
Inherits:
Toybox.Lang.Objectshow all
Overview
A LocalMoment is an immutable moment in time.

LocalMoment represents a single point in time at a specific location. It differs from Moment in that it also keeps time zone information in addition to the time.

Example:

// This code will print the following
// to the console:
// 2018-02-23 18:12:00
// day_of_week=6 month=2
// day_of_week=Fri month=Feb

// Saturday Feb 24th, 2018 12:12am UTC
var options = {
    :year   => 2018,
    :month  => 2,
    :day    => 24,
    :hour   => 0,
    :min    => 12
};

var when = Gregorian.moment(options);

var where = new Position.Location({
    :latitude  =>  38.85391,
    :longitude => -94.79630,
    :format    => :degrees,
});

var local = Gregorian.localMoment(where, when);

var info = Gregorian.info(local, Time.FORMAT_SHORT);

// Friday Feb 23th, 2018 6:12pm
Sys.println(Lang.format("$1$-$2$-$3$ $4$:$5$:$6$", [
    info.year.format("%04u"),
    info.month.format("%02u"),
    info.day.format("%02u"),
    info.hour.format("%02u"),
    info.min.format("%02u"),
    info.sec.format("%02u"),
]));

Sys.println(Lang.format("day_of_week=$1$ month=$2$", [
    info.day_of_week,
    info.month
]));

info = Gregorian.info(now, Time.FORMAT_LONG);

Sys.println(Lang.format("day_of_week=$1$ month=$2$", [
    info.day_of_week,
    info.month
]));

Since:

API Level 3.3.0

Supported Devices:

[View devices]
Instance Method Summary
collapse
add(addend as Time.Duration) as Time.LocalMoment
Add a Duration to a LocalMoment.
compare(moment as Time.LocalMoment) as Lang.Number
Determine if a LocalMoment is before or after another LocalMoment This computes a Number representing the difference between the two LocalMoment objects in seconds.
getDaylightSavingsTimeOffset() as Lang.Number
Get the daylight saving time offset from UTC time in seconds.
getOffset() as Lang.Number
Get the total time offset from UTC time in seconds.
getTimeZoneOffset() as Lang.Number
Get the time zone offset from UTC time in seconds.
greaterThan(moment as Time.LocalMoment) as Lang.Boolean
Determine if a LocalMoment is greater than another LocalMoment.
isDaylightSavingsTime() as Lang.Boolean
Get whether the daylight saving time offset is in effect.
lessThan(moment as Time.LocalMoment) as Lang.Boolean
Determine if a LocalMoment is less than another LocalMoment.
subtract(subtrahend as Time.Duration or Time.LocalMoment) as Time.Duration or Time.LocalMoment
Subtract a Duration or LocalMoment from a LocalMoment.
toMoment() as Time.Moment
Get a Moment for this.
value() as Lang.Number
Get the UTC value of a LocalMoment.
Instance Method Details
add(addend as Time.Duration) as Time.LocalMoment
Add a Duration to a LocalMoment.

Parameters:

addend — (Time.Duration) — The Duration to add to this LocalMoment.
Returns:

Time.LocalMoment — A LocalMoment object that is the sum of self and the provided Duration object.
Since:

API Level 3.3.0

compare(moment as Time.LocalMoment) as Lang.Number
Determine if a LocalMoment is before or after another LocalMoment

This computes a Number representing the difference between the two LocalMoment objects in seconds. The subtract() method can also be used to get the absolute Duration between two LocalMoment objects.

Parameters:

moment — (Time.LocalMoment) — The LocalMoment to compare to this LocalMoment
Example:

using Toybox.System;
using Toybox.Time;
using Toybox.Time.Gregorian;
using Toybox.Position;

var where = new Position.Location({
    :latitude  =>  38.85391,
    :longitude => -94.79630,
    :format    => :degrees,
});
var today = Gregorian.localMoment(where, Time.today());
var oneDay = new Time.Duration(Gregorian.SECONDS_PER_DAY);
var tomorrow = today.add(oneDay);

System.println(today.compare(tomorrow)); // -86400, or one day in the past
System.println(tomorrow.compare(today)); //  86400, or one day in the future
Returns:

Lang.Number — The Number of seconds difference between the two LocalMoment objects, without considering time zone rules. If the LocalMoment supplied for comparison is after this LocalMoment, the value will be negative.
See Also:

LocalMoment.subtract()
SECONDS_PER_DAY
Since:

API Level 3.3.0

getDaylightSavingsTimeOffset() as Lang.Number
Get the daylight saving time offset from UTC time in seconds.

Returns:

Lang.Number — The daylight saving time offset in seconds.
Since:

API Level 3.3.0

getOffset() as Lang.Number
Get the total time offset from UTC time in seconds

Returns:

Lang.Number — The total offset from UTC time in seconds.
Since:

API Level 3.3.0

getTimeZoneOffset() as Lang.Number
Get the time zone offset from UTC time in seconds.

This is the time zone offset without the daylight saving time offset.

Returns:

Lang.Number — The time zone offset from UTC in seconds. Positive values are East of UTC.
Since:

API Level 3.3.0

greaterThan(moment as Time.LocalMoment) as Lang.Boolean
Determine if a LocalMoment is greater than another LocalMoment.

Parameters:

moment — (Time.LocalMoment) — The LocalMoment to compare to this LocalMoment
Returns:

Lang.Boolean — true if this LocalMoment is greater than the LocalMoment supplied for comparison, otherwise false
Since:

API Level 3.3.0

isDaylightSavingsTime() as Lang.Boolean
Get whether the daylight saving time offset is in effect

Returns:

Lang.Boolean — true if daylight saving time is in effect for this time.
Since:

API Level 3.3.0

lessThan(moment as Time.LocalMoment) as Lang.Boolean
Determine if a LocalMoment is less than another LocalMoment.

Parameters:

moment — (Time.LocalMoment) — The LocalMoment to compare to this LocalMoment
Returns:

Lang.Boolean — true if this LocalMoment is less than the LocalMoment supplied for comparison, otherwise false
Since:

API Level 3.3.0

subtract(subtrahend as Time.Duration or Time.LocalMoment) as Time.Duration or Time.LocalMoment
Subtract a Duration or LocalMoment from a LocalMoment.

Parameters:

subtrahend — (Time.LocalMoment, Time.Duration) — The LocalMoment or Duration to subtract from this LocalMoment
Returns:

Time.Duration, Time.LocalMoment — The Duration between the two LocalMoment objects or the LocalMoment offset by a Duration. When subtracting LocalMoments, the computed Duration is always a positive value. The compare() method can be used to determine whether one LocalMoment is before or after another LocalMoment.
Since:

API Level 3.3.0

toMoment() as Time.Moment
Get a Moment for this.

Returns:

Time.Moment — The UTC time of the LocalMoment as a Moment
Since:

API Level 3.3.0

value() as Lang.Number
Get the UTC value of a LocalMoment.

Returns:

Lang.Number — The UTC time of the LocalMoment in seconds since the UNIX epoch
See Also:

UTC Time
UNIX Time
Since:

API Level 3.3.0

Class: Toybox.Time.Moment
Inherits:
Toybox.Lang.Objectshow all
Overview
A Moment is an immutable moment in time.

Moment objects are closely related to Duration objects, and are frequently used together for time calculations. While a Duration represents a span of time, a Moment represents a single point in time such as a specific date.

Internally, Moment objects are stored as 32-bit integers representing the number of seconds since the UNIX epoch (January 1, 1970 at 00:00:00 UTC).

See Also:
UTC Time
UNIX Time
Example:

using Toybox.System;
using Toybox.Time.Gregorian;

// Options for Saturday February 24th, 2018 12:12am
var options = {
    :year   => 2018,
    :month  => 2,
    :day    => 24,
    :hour   => 0,
    :minute => 12
};

var now = Gregorian.moment(options);
var info;
info = Gregorian.utcInfo(now, Time.FORMAT_SHORT);

// Prints "2018-02-24" to the console
System.println(Lang.format("$1$-$2$-$3$", [
    info.year.format("%04u"),
    info.month.format("%02u"),
    info.day.format("%02u")
]));

// Prints "day_of_week=7 month=2" to the console
System.println(Lang.format("day_of_week=$1$ month=$2$", [
    info.day_of_week,
    info.month
]));

info = Gregorian.utcInfo(now, Time.FORMAT_LONG);

// Prints "day_of_week=Sat month=Feb" to the console
System.println(Lang.format("day_of_week=$1$ month=$2$", [
    info.day_of_week,
    info.month
]));

Since:

API Level 1.0.0

Instance Method Summary
collapse
add(duration as Time.Duration) as Time.Moment
Add a Duration to a Moment.
compare(moment as Time.Moment) as Lang.Number
Determine if a Moment is before or after another Moment.
greaterThan(moment as Time.Moment) as Lang.Boolean
Determine if a Moment is greater than another Moment.
initialize(seconds as Lang.Number) Time.Moment
Constructor.
lessThan(moment as Time.Moment) as Lang.Boolean
Determine if a Moment is less than another Moment.
subtract(subtrahend as Time.Moment or Time.Duration) as Time.Moment or Time.Duration
Subtract a Duration or Moment from a Moment.
value() as Lang.Number
Get the UTC value of a Moment.
Instance Method Details
add(duration as Time.Duration) as Time.Moment
Add a Duration to a Moment.

This method functions the same as the Duration.add() method when adding a Duration to a Moment.

Parameters:

duration — (Time.Duration) — The Duration to add to this Moment
Example:

Add one day to today
using Toybox.Time;
using Toybox.Time.Gregorian;
var today = new Time.Moment(Time.today().value());
var oneDay = new Time.Duration(Gregorian.SECONDS_PER_DAY);
var tomorrow = today.add(oneDay);
Returns:

Time.Moment — A Moment object that is the sum of self and the provided Duration object
See Also:

Duration.add()
SECONDS_PER_DAY
Since:

API Level 1.0.0

compare(moment as Time.Moment) as Lang.Number
Determine if a Moment is before or after another Moment.

This computes a Number representing the difference between the two Moment objects in seconds. The subtract() method can also be used to get the absolute Duration between two Moment objects.

Parameters:

moment — (Time.Moment) — The Moment to compare to this Moment
Example:

using Toybox.System;
using Toybox.Time;
using Toybox.Time.Gregorian;
var today = new Time.Moment(Time.today().value());
var oneDay = new Time.Duration(Gregorian.SECONDS_PER_DAY);
var tomorrow = today.add(oneDay);

System.println(today.compare(tomorrow)); // -86400, or one day in the past
System.println(tomorrow.compare(today)); //  86400, or one day in the future
Returns:

Lang.Number — The Number of seconds difference between the two Moment objects. If the Moment supplied for comparison is after this Moment, the value will be negative.
See Also:

Moment.subtract()
SECONDS_PER_DAY
Since:

API Level 1.0.0

greaterThan(moment as Time.Moment) as Lang.Boolean
Determine if a Moment is greater than another Moment.

Parameters:

moment — (Time.Moment) — The Moment to compare to this Moment
Example:

using Toybox.System;
using Toybox.Time;
using Toybox.Time.Gregorian;
var today = new Time.Moment(Time.today().value());
var oneDay = new Time.Duration(Gregorian.SECONDS_PER_DAY);
var tomorrow = today.add(oneDay);

System.println(today.greaterThan(tomorrow)); // false
System.println(tomorrow.greaterThan(today)); // true
Returns:

Lang.Boolean — true if this Moment is greater than the Moment supplied for comparison, otherwise false
See Also:

SECONDS_PER_DAY
Since:

API Level 1.0.0

initialize(seconds as Lang.Number) Time.Moment
Constructor

Parameters:

seconds — (Lang.Number) — The Number of seconds with which to initialize the Moment
Example:

Create a Moment with a UNIX time stamp
using Toybox.Time;
var garminFounded = new Time.Moment(631065600);
Example:

Create a Moment representing today
using Toybox.Time;
var today = new Time.Moment(Time.today().value());
Returns:

Time.Moment — A Moment representing the specified moment in time
See Also:

UTC Time
UNIX Time
Since:

API Level 1.1.2

lessThan(moment as Time.Moment) as Lang.Boolean
Determine if a Moment is less than another Moment.

Parameters:

moment — (Time.Moment) — The Moment to compare to this Moment
Example:

using Toybox.System;
using Toybox.Time;
using Toybox.Time.Gregorian;
var today = new Time.Moment(Time.today().value());
var oneDay = new Time.Duration(Gregorian.SECONDS_PER_DAY);
var tomorrow = today.add(oneDay);

System.println(today.lessThan(tomorrow)); // true
System.println(tomorrow.lessThan(today)); // false
Returns:

Lang.Boolean — true if this Moment is less than the Moment supplied for comparison, otherwise false
See Also:

SECONDS_PER_DAY
Since:

API Level 1.0.0

subtract(subtrahend as Time.Moment or Time.Duration) as Time.Moment or Time.Duration
Subtract a Duration or Moment from a Moment.

Note:
Subtracting a Duration from a Moment was not supported until ConnectIQ 3.0.0. If backward compatibility is a concern, it may be best to add a negative Duration instead.

Parameters:

subtrahend — (Time.Moment, Time.Duration) — The Moment or Duration to subtract from this Moment
Example:

using Toybox.System;
using Toybox.Time;
using Toybox.Time.Gregorian;
var today = new Time.Moment(Time.today().value());
var oneDay = new Time.Duration(Gregorian.SECONDS_PER_DAY);
var tomorrow = today.add(oneDay);

var duration1 = today.subtract(tomorrow);
var duration2 = tomorrow.subtract(today);

System.println(duration1.value()); // 86400, or one day
System.println(duration2.value()); // 86400, or one day
Returns:

Time.Duration, Time.Moment — The Duration between the two Moment objects or the Moment offset by a Duration. When subtracting Moments, the computed Duration is always a positive value. The compare() method can be used to determine whether one Moment is before or after another Moment.
See Also:

Moment.compare()
SECONDS_PER_DAY
Since:

API Level 1.0.0

value() as Lang.Number
Get the UTC value of a Moment.

Returns:

Lang.Number — The UTC date of the Moment in seconds since the UNIX epoch
See Also:

UTC Time
UNIX Time
Since:

API Level 1.0.0

Module: Toybox.Timer
Overview
The Timer module allows access to a Timer object.

This Timer can be used to run code at some point in the future or at a regular interval.

Since:

API Level 1.0.0

App Types:

Audio Content Provider
Glance
Watch App
Watch Face
Widget
Classes Under Namespace
Classes: Timer

Class: Toybox.Timer.Timer
Inherits:
Toybox.Lang.Objectshow all
Overview
A Timer object will invoke a callback function after a specified number of milliseconds.

There are two types of timers: one-shot or repeating. A one-shot Timer will only run once after the Timer expires, while a repeating Timer will invoke the callback function every n milliseconds until stop() is called. If a repeating Timer fails to run before its next execution time, then any missed executions will be skipped.

The number of available timers (default 3) and the minimum time value (default 50 ms) depends on the host system. An error will occur if too many timers are set.

Example:

Create a counter that increments by one each second
using Toybox.Timer;
var myCount =  0;

function timerCallback() {
    myCount += 1;
    Ui.requestUpdate();
}

function onLayout(dc) {
    var myTimer = new Timer.Timer();
    myTimer.start(method(:timerCallback), 1000, true);
}
Since:

API Level 1.0.0

Instance Method Summary
collapse
start(callback as Lang.Method() as Void, time as Lang.Number, repeat as Lang.Boolean) as Void
Start the Timer.
stop() as Void
Stops the Timer from running.
Instance Method Details
start(callback as Lang.Method() as Void, time as Lang.Number, repeat as Lang.Boolean) as Void
Start the Timer.

Note:
Will cause an app crash if called from a watch face app while in low power mode

Parameters:

callback — (Lang.Method) — A function to call after the Timer completes
time — (Lang.Number) — The number of milliseconds to wait before invoking callback
repeat — (Lang.Boolean) — Set to true to have the Timer repeat until stop() is called
Since:

API Level 1.0.0

stop() as Void
Stops the Timer from running.

This only needs to be called for repeating timers. A Timer can be started again by calling start().

Since:

API Level 1.0.0

Module: Toybox.UserProfile
Overview
The UserProfile module will allow apps to access user information.

The module contains the GENDER_* enum to retrieve gender information from the user profile. The HR_ZONE_SPORT_* enum also provides constants for defining different sport type. This is used to retrieve Heart Rate Zones specific to that sport.

Example:

Simple UserProfile module use
using Toybox.UserProfile;

var profile = UserProfile.getProfile();
System.out.println("The user was born in " + profile.birthYear);
Since:

API Level 1.0.0

Requires Permission:

UserProfile
Classes Under Namespace
Classes: Profile, UserActivity, UserActivityHistoryIterator

Constant Summary
Gender
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
GENDER_FEMALE	0	
API Level 1.0.0

GENDER_MALE	1	
API Level 1.0.0

GENDER_UNSPECIFIED	2	
API Level 4.2.3

SportHrZone
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
HR_ZONE_SPORT_GENERIC	0	
API Level 1.2.6

HR_ZONE_SPORT_RUNNING	1	
API Level 1.2.6

HR_ZONE_SPORT_BIKING	2	
API Level 1.2.6

HR_ZONE_SPORT_SWIMMING	3	
API Level 1.2.6

Instance Method Summary
collapse
getCurrentSport() as UserProfile.SportHrZone
Return the sport for which the current activity retrieves heart rate zone thresholds.
getHeartRateZones(sport as UserProfile.SportHrZone) as Lang.Array<Lang.Number>
Retrieve an Array of the current heart rate zone threshold values in beats per minute (bpm) The returned Array contains zone values as follows: * min zone 1 - The minimum heart rate threshold for zone 1 * max zone 1 - The maximum heart rate threshold for zone 1 * max zone 2 - The maximum heart rate threshold for zone 2 * max zone 3 - The maximum heart rate threshold for zone 3 * max zone 4 - The maximum heart rate threshold for zone 4 * max zone 5 - The maximum heart rate threshold for zone 5.
getProfile() as UserProfile.Profile
Retrieve the current Profile object.
getUserActivityHistory() as UserProfile.UserActivityHistoryIterator
Get an iterator for Activity history for the user.
Instance Method Details
getCurrentSport() as UserProfile.SportHrZone
Return the sport for which the current activity retrieves heart rate zone thresholds.

If the active sport does not have sport specific zones, it will return HR_ZONE_SPORT_GENERIC.

Example:

using Toybox.UserProfile;
var profile = UserProfile.getCurrentSport();
Returns:

UserProfile.SportHrZone — The current HR zone sport from the HR_ZONE_SPORT_* enum.
Since:

API Level 1.2.6

getHeartRateZones(sport as UserProfile.SportHrZone) as Lang.Array<Lang.Number>
Retrieve an Array of the current heart rate zone threshold values in beats per minute (bpm)

The returned Array contains zone values as follows:

min zone 1 - The minimum heart rate threshold for zone 1

max zone 1 - The maximum heart rate threshold for zone 1

max zone 2 - The maximum heart rate threshold for zone 2

max zone 3 - The maximum heart rate threshold for zone 3

max zone 4 - The maximum heart rate threshold for zone 4

max zone 5 - The maximum heart rate threshold for zone 5

Parameters:

sport — (UserProfile.SportHrZone) — The sport that zones are being requested from. Should be a HR_ZONE_SPORT_* value.
Example:

Use the HR_ZONE_SPORT_* enum to get the zone for that specific sport
using Toybox.UserProfile;
var genericZoneInfo = UserProfile.getHeartRateZones(UserProfile.HR_ZONE_SPORT_GENERIC);
Returns:

Lang.Array — An Array of zone thresholds for the requested sport.
Since:

API Level 1.2.6

getProfile() as UserProfile.Profile
Retrieve the current Profile object.

Example:

using Toybox.UserProfile;
var profile = UserProfile.getProfile();
Returns:

UserProfile.Profile — The Profile object for the current user
Since:

API Level 1.0.0

getUserActivityHistory() as UserProfile.UserActivityHistoryIterator
Get an iterator for Activity history for the user

Example:

Shows the use of UserActivityHistoryIterator
using Toybox.UserProfile;
using Toybox.System;

// get a UserActivityHistoryIterator object
var userActivityIterator = UserProfile.getUserActivityHistory();
var sample = userActivityIterator.next();                        // get the user activity data

while (sample != null) {
    System.println("Sample: " + sample.userActivityData);        // print the current sample
    sample = userActivityIterator.next();
}
Returns:

UserProfile.UserActivityHistoryIterator — Iterator object
Since:

API Level 3.3.0

Class: Toybox.UserProfile.Profile
Inherits:
Toybox.Lang.Objectshow all
Overview
The profile object contains user information.

Values may be null if the value has not been configured or cannot be calculated.

Since:

API Level 1.0.0

Instance Member Summary
collapse
activityClass as Lang.Number or Null
Activity level as configured by the user.
averageRestingHeartRate as Lang.Number or Null
Average resting heart rate This value is calculated based on historical data.
birthYear as Lang.Number or Null
Birth year as configured by the user.
gender as UserProfile.Gender or Null
Gender as configured by the user.
height as Lang.Number or Null
Height as configured by the user.
restingHeartRate as Lang.Number or Null
Resting heart rate as configured by the user.
runningStepLength as Lang.Number or Null
Running step length as configured by the user.
sleepTime as Time.Duration or Null
Typical sleep time as configured by the user.
vo2maxCycling as Lang.Number or Null
Cycling VO2 Max This value is calculated based on historical data.
vo2maxRunning as Lang.Number or Null
Running VO2 Max This value is calculated based on historical data.
wakeTime as Time.Duration or Null
Typical wake time as configured by the user.
walkingStepLength as Lang.Number or Null
Walking step length as configured by the user.
weight as Lang.Number or Null
Weight as configured by the user.
Instance Attribute Details
var activityClass as Lang.Number or Null
Activity level as configured by the user

Since:

API Level 1.0.0

Returns:

Lang.Number — The activity level as a value from 0-100.
var averageRestingHeartRate as Lang.Number or Null
Average resting heart rate

This value is calculated based on historical data. It may be null if there is insufficient data to produce a result.

Since:

API Level 3.2.0

Supported Devices:

[View devices]
Returns:

Lang.Number — The seven day average resting heart rate. Units are beats/min (bpm).
var birthYear as Lang.Number or Null
Birth year as configured by the user

Since:

API Level 1.0.0

Returns:

Lang.Number — The birth year as a four digit Number.
var gender as UserProfile.Gender or Null
Gender as configured by the user

Since:

API Level 1.0.0

Returns:

UserProfile.Gender
var height as Lang.Number or Null
Height as configured by the user

Since:

API Level 1.0.0

Returns:

Lang.Number — Height of the user in centimeters (cm)
var restingHeartRate as Lang.Number or Null
Resting heart rate as configured by the user

Since:

API Level 1.0.0

Returns:

Lang.Number — The user's configured resting heart rate in beats per minute (bpm)
var runningStepLength as Lang.Number or Null
Running step length as configured by the user

Since:

API Level 1.0.0

Returns:

Lang.Number — Running step length in millimeters (mm)
var sleepTime as Time.Duration or Null
Typical sleep time as configured by the user

Since:

API Level 1.0.0

Returns:

Time.Duration — A Duration since local midnight
var vo2maxCycling as Lang.Number or Null
Cycling VO2 Max

This value is calculated based on historical data. It may be null if there is insufficient data to produce a result.

Since:

API Level 3.3.0

Supported Devices:

[View devices]
Returns:

Lang.Number — The VO2 Max value for cycling activity. Units are mL/kg/min.
var vo2maxRunning as Lang.Number or Null
Running VO2 Max

This value is calculated based on historical data. It may be null if there is insufficient data to produce a result.

Since:

API Level 3.3.0

Supported Devices:

[View devices]
Returns:

Lang.Number — The VO2 Max value for running activity. Units are mL/kg/min.
var wakeTime as Time.Duration or Null
Typical wake time as configured by the user

Since:

API Level 1.0.0

Returns:

Time.Duration — A Duration since local midnight
var walkingStepLength as Lang.Number or Null
Walking step length as configured by the user

Since:

API Level 1.0.0

Returns:

Lang.Number — Walking step length in millimeters (mm)
var weight as Lang.Number or Null
Weight as configured by the user

Since:

API Level 1.0.0

Returns:

Lang.Number — Weight in grams (g)

Class: Toybox.UserProfile.UserActivity
Inherits:
Toybox.Lang.Objectshow all
Overview
A class for storing user activity information.

Since:

API Level 3.3.0

Instance Member Summary
collapse
distance as Lang.Number or Null
Distance covered by the activity in meters.
duration as Time.Duration or Null
Duration of the activity.
startTime as Time.Moment or Null
Start time of the activity.
type as Activity.Sport or Null
Sport type of the activity.
Instance Attribute Details
var distance as Lang.Number or Null
Distance covered by the activity in meters

Since:

API Level 3.3.0

Returns:

Lang.Number — or null
var duration as Time.Duration or Null
Duration of the activity

Since:

API Level 3.3.0

Returns:

Time.Duration — or null
var startTime as Time.Moment or Null
Start time of the activity

Since:

API Level 3.3.0

Returns:

Time.Moment — or null
var type as Activity.Sport or Null
Sport type of the activity.

Since:

API Level 3.3.0

Returns:

Activity.Sport — SPORT_* enum value or null

Class: Toybox.UserProfile.UserActivityHistoryIterator
Inherits:
Toybox.Lang.Objectshow all
Overview
Get an iterator for Activity history for the user

Since:

API Level 3.3.0

Instance Method Summary
collapse
next() as UserProfile.UserActivity
Get the data and increment the iterator to next entry.
Instance Method Details
next() as UserProfile.UserActivity
Get the data and increment the iterator to next entry

Returns:

UserProfile.UserActivityHistoryIterator
Since:

API Level 3.3.0


Module: Toybox.WatchUi
Overview
The WatchUi module contains user interface elements available within apps.

WatchUi provides several classes that represent Views, or what is displayed on the screen of a device. Also available are UI elements like on-screen menus, progress bars, buttons, and various pickers. More abstract classes represent all drawable objects, such as bitmaps and text.

Note:
All keys in the key types enum listed after EXTENDED_KEYS (16) were added after ConnectIQ version 1.1.2. Before evaluating these keys, check for the availability of these keys with a has check: if (Toybox.WatchUi has :EXTENDED_KEYS) ...

Since:

API Level 1.0.0

App Types:

Audio Content Provider
Background (supported since API Level 5.1.0)
Data Field
Glance
Watch App
Watch Face
Widget
Classes Under Namespace
Classes: ActionMenu, ActionMenuDelegate, ActionMenuItem, AnimationDelegate, AnimationLayer, AnimationResource, BehaviorDelegate, Bitmap, BitmapResource, Button, CheckboxMenu, CheckboxMenuItem, ClickEvent, ComplicationDrawableRef, Confirmation, ConfirmationDelegate, CustomMenu, CustomMenuItem, DataField, DataFieldAlert, DragEvent, Drawable, FlickEvent, FontResource, GlanceView, GlanceViewDelegate, IconMenuItem, InputDelegate, InvalidMenuItemTypeException, InvalidPointException, InvalidSelectableStateException, KeyEvent, Layer, MapMarker, MapPolyline, MapTrackView, MapView, Menu, Menu2, Menu2InputDelegate, MenuInputDelegate, MenuItem, NumberPicker, NumberPickerDelegate, Picker, PickerDelegate, PickerFactory, ProgressBar, ReviewResponseToken, Selectable, SelectableEvent, SimpleDataField, SwipeEvent, Text, TextArea, TextPicker, TextPickerDelegate, ToggleMenuItem, View, ViewLoop, ViewLoopDelegate, ViewLoopFactory, WatchFace, WatchFaceDelegate, WatchFacePowerInfo

Constant Summary
Key
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
KEY_POWER	0	
API Level 1.0.0

The power key

KEY_LIGHT	1	
API Level 1.0.0

The light key

KEY_ZIN	2	
API Level 1.0.0

The zoom in key

KEY_ZOUT	3	
API Level 1.0.0

The zoom out key

KEY_ENTER	4	
API Level 1.0.0

The enter key

KEY_ESC	5	
API Level 1.0.0

The escape key

KEY_FIND	6	
API Level 1.0.0

The find key

KEY_MENU	7	
API Level 1.0.0

The menu key

KEY_DOWN	8	
API Level 1.0.0

The down key

KEY_DOWN_LEFT	9	
API Level 1.0.0

The down left key

KEY_DOWN_RIGHT	10	
API Level 1.0.0

The down key

KEY_LEFT	11	
API Level 1.0.0

The left key

KEY_RIGHT	12	
API Level 1.0.0

The right key

KEY_UP	13	
API Level 1.0.0

The up key

KEY_UP_LEFT	14	
API Level 1.0.0

The up-left

KEY_UP_RIGHT	15	
API Level 1.0.0

The up-right key

EXTENDED_KEYS	16	
API Level 1.1.2

Indicates extended key support

KEY_PAGE	17	
API Level 1.1.2

The page key

KEY_START	18	
API Level 1.1.2

The start key

KEY_LAP	19	
API Level 1.1.2

The lap key

KEY_RESET	20	
API Level 1.1.2

The reset key

KEY_SPORT	21	
API Level 1.1.2

The sport key

KEY_CLOCK	22	
API Level 1.1.2

The clock key

KEY_MODE	23	
API Level 1.1.2

The mode key

KEY_ACTION_MENU	24	
API Level 5.1.1

The action menu key

AnimationType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
ANIM_TYPE_LINEAR	0	
API Level 1.0.0

Animation with a constant speed

ANIM_TYPE_EASE_IN	1	
API Level 1.0.0

Animation that increases in speed from start to end

ANIM_TYPE_EASE_OUT	2	
API Level 1.0.0

Animation that decreases in speed from start to end

ANIM_TYPE_EASE_IN_OUT	3	
API Level 1.0.0

Animation that increases in speed from the start, then decreases in speed toward the end

KeyPressType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
PRESS_TYPE_DOWN	0	
API Level 1.1.2

The key is pressed down

PRESS_TYPE_UP	1	
API Level 1.1.2

The key is released

PRESS_TYPE_ACTION	2	
API Level 1.1.2

The key's action is performed

ClickType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
CLICK_TYPE_TAP	0	
API Level 1.0.0

A tap on the screen

CLICK_TYPE_HOLD	1	
API Level 1.0.0

A press and hold on the screen

CLICK_TYPE_RELEASE	2	
API Level 1.0.0

A release of a hold on the screen

MapMarkerIcon
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
MAP_MARKER_ICON_PIN	0	
API Level 3.0.0

The default Garmin map marker pin icon

MapMode
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
MAP_MODE_PREVIEW	0	
API Level 3.0.0

The preview mode for a MapView

MAP_MODE_BROWSE	1	
API Level 3.0.0

The browse mode for a MapView

SwipeDirection
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
SWIPE_UP	0	
API Level 1.0.0

A swipe in the upward direction

SWIPE_RIGHT	1	
API Level 1.0.0

A swipe towards the right

SWIPE_DOWN	2	
API Level 1.0.0

A swipe in the downward direction

SWIPE_LEFT	3	
API Level 1.0.0

A swipe towards the left

DragType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
DRAG_TYPE_START	0	
API Level 3.3.0

Start of a screen drag

DRAG_TYPE_CONTINUE	1	
API Level 3.3.0

Continuation of a screen drag

DRAG_TYPE_STOP	2	
API Level 3.3.0

Stop of a screen drag

ControlBarLeftButton
Since:

API Level 4.1.2

Name	Value	Since	Description	See Also
CONTROL_BAR_LEFT_BUTTON_BACK	0	
API Level 4.1.2

CONTROL_BAR_LEFT_BUTTON_CANCEL	1	
API Level 4.1.2

ControlBarRightButton
Since:

API Level 4.1.2

Name	Value	Since	Description	See Also
CONTROL_BAR_RIGHT_BUTTON_ACCEPT	2	
API Level 4.1.2

CONTROL_BAR_RIGHT_BUTTON_MENU	3	
API Level 4.1.2

AnalogClockState
Set the state for analog clock hands

Since:

API Level 3.3.0

Name	Value	Since	Description	See Also
ANALOG_CLOCK_STATE_RESTING	0	
API Level 3.3.0

Set the clock hands to resting position

ANALOG_CLOCK_STATE_SYSTEM_TIME	1	
API Level 3.3.0

Set the clock hands to system time

ANALOG_CLOCK_STATE_HOLDING	2	
API Level 3.3.0

Set the clock hands to the specified position

WatchFaceConfigType
WatchFace config types.

Since:

API Level 5.1.0

Name	Value	Since	Description	See Also
WATCH_FACE_CONFIG_TYPE_STYLE	0	
API Level 5.1.0

WATCH_FACE_CONFIG_TYPE_COMPLICATION	1	
API Level 5.1.0

WATCH_FACE_CONFIG_TYPE_ACCENT_COLOR	2	
API Level 5.1.0

WATCH_FACE_CONFIG_TYPE_COMPLICATION_COLOR	3	
API Level 5.1.0

MenuTheme
Menu theme for supported devices

Since:

API Level 4.1.8

Name	Value	Since	Description	See Also
MENU_THEME_DEFAULT	0	
API Level 4.1.8

The default theme color as specified by the device.

MENU_THEME_BLUE	1	
API Level 4.1.8

MENU_THEME_CYAN	2	
API Level 4.1.8

MENU_THEME_GREEN	3	
API Level 4.1.8

MENU_THEME_YELLOW	4	
API Level 4.1.8

MENU_THEME_ORANGE	5	
API Level 4.1.8

MENU_THEME_RED	6	
API Level 4.1.8

MENU_THEME_PINK	7	
API Level 4.1.8

MENU_THEME_PURPLE	8	
API Level 4.1.8

MENU_THEME_GREEN_YELLOW	9	
API Level 4.1.8

Confirm
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
CONFIRM_NO	0	
API Level 1.0.0

CONFIRM_YES	1	
API Level 1.0.0

NumberPickerMode
This has been deprecated This enum may be removed after System 3.
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
NUMBER_PICKER_DISTANCE	0	
API Level 1.0.0

A Float in meters (m)

NUMBER_PICKER_TIME	1	
API Level 1.0.0

A Duration

NUMBER_PICKER_TIME_MIN_SEC	2	
API Level 1.0.0

A Duration

NUMBER_PICKER_TIME_OF_DAY	3	
API Level 1.0.0

A Duration representing the number of seconds since midnight

NUMBER_PICKER_WEIGHT	4	
API Level 1.0.0

A Float in kilograms (kg)

NUMBER_PICKER_HEIGHT	5	
API Level 1.0.0

A Float in meters (m)

NUMBER_PICKER_CALORIES	6	
API Level 1.0.0

A Number

NUMBER_PICKER_BIRTH_YEAR	7	
API Level 1.0.0

A Number

SlideType
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
SLIDE_IMMEDIATE	0	
API Level 1.0.0

No transition.

SLIDE_LEFT	1	
API Level 1.0.0

The View slides to the left.

SLIDE_RIGHT	2	
API Level 1.0.0

The View slides to the right.

SLIDE_DOWN	3	
API Level 1.0.0

The View slides down.

SLIDE_UP	4	
API Level 1.0.0

The View slides up.

SLIDE_BLINK	5	
API Level 3.1.0

The View fades in.

LayoutVerticalAlignment
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
LAYOUT_VALIGN_TOP	-0x7FFFFFFF	
API Level 1.2.0

Set a Drawable object's locY property to this to align it to the top edge of the device context (Dc).

LAYOUT_VALIGN_BOTTOM	-0x7FFFFFFE	
API Level 1.2.0

Set a Drawable object's locY property to this to align it to the bottom edge of the device context (Dc).

LAYOUT_VALIGN_CENTER	-0x7FFFFFFD	
API Level 1.2.0

Set a Drawable object's locY property to this to center it vertically in the device context (Dc).

LAYOUT_VALIGN_START	-0x7FFFFFFC	
API Level 1.2.0

Set a Drawable object's locY property to this to make it equal to its parent's locY property.

LayoutHorizontalAlignment
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
LAYOUT_HALIGN_LEFT	-0x7FFFFFFF	
API Level 1.2.0

Set a Drawable object's locX property to this to align it along the left edge of the device context (Dc).

LAYOUT_HALIGN_RIGHT	-0x7FFFFFFE	
API Level 1.2.0

Set a Drawable object's locX property to this to align it along the right edge of the device context (Dc).

LAYOUT_HALIGN_CENTER	-0x7FFFFFFD	
API Level 1.2.0

Set a Drawable object's locX property to this to center it horizontally in the device context (Dc).

LAYOUT_HALIGN_START	-0x7FFFFFFC	
API Level 1.2.0

Set a Drawable object's locX property to this to make it equal to its parent's locX property.

AnimationEvent
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
ANIMATION_EVENT_COMPLETE	0	
API Level 3.1.0

Indicates the completion of an animation.

ANIMATION_EVENT_CANCELED	1	
API Level 3.1.0

Indicates the cancel of the animation playback

ActionMenuTheme
The theme for the ActionMenu

Since:

API Level 3.4.0

Name	Value	Since	Description	See Also
ACTION_MENU_THEME_DARK	0	
API Level 3.4.0

Dark theme for the action menu

ACTION_MENU_THEME_LIGHT	1	
API Level 3.4.0

Light theme for the action menu

ReviewRequestStatus
Enum class for makeReviewTokenRequest return status

Since:

API Level 3.4.2

Name	Value	Since	Description	See Also
REVIEW_REQUEST_STATUS_GRANTED	0	
API Level 3.4.2

REVIEW_REQUEST_STATUS_DENIED	1	
API Level 3.4.2

REVIEW_REQUEST_STATUS_FAILED	2	
API Level 3.4.2

Typedef Summary
collapse
InputDelegates as WatchUi.InputDelegate or WatchUi.BehaviorDelegate or WatchUi.ConfirmationDelegate or WatchUi.MenuInputDelegate or WatchUi.NumberPickerDelegate or WatchUi.PickerDelegate or WatchUi.TextPickerDelegate or WatchUi.WatchFaceDelegate or WatchUi.Menu2InputDelegate or WatchUi.ViewLoopDelegate
Resource as Lang.Array or Lang.Dictionary or Lang.String or WatchUi.AnimationResource or WatchUi.BitmapResource or WatchUi.FontResource or Graphics.BitmapReference or Graphics.FontReference
Views as WatchUi.View or WatchUi.Menu or WatchUi.TextPicker or WatchUi.ProgressBar or WatchUi.Confirmation or WatchUi.NumberPicker or WatchUi.ViewLoop
Instance Method Summary
collapse
animate(object as Lang.Object, property as Lang.Symbol, type as WatchUi.AnimationType, start as Lang.Numeric, stop as Lang.Numeric, period as Lang.Numeric, callback as Null or Lang.Method() as Void) as Void
Animate an Object.
cancelAllAnimations() as Void
Cancel animations started with WatchUi.animate() Stop all animations that were started with WatchUi.animate().
getCurrentView() as [ WatchUi.View or Null, WatchUi.InputDelegates or Null ]
Get the current view that is displayed in the UI.
getSubscreen() as Graphics.BoundingBox or Null
Get the subscreen area in the display.
loadResource(resource as Lang.ResourceId) as WatchUi.Resource
Load a resource from the executable.
makeReviewTokenRequest(callback as Lang.Method(responseStatus as WatchUi.ReviewRequestStatus, token as WatchUi.ReviewResponseToken or Null) as Void) as Void
Initiate a request to ask for this app to be reviewed.
popView(transition as WatchUi.SlideType) as Void
Pop the current View from the View stack.
pushView(view as WatchUi.Views, delegate as WatchUi.InputDelegates or Null, transition as WatchUi.SlideType) as Lang.Boolean
Push a View onto the View stack.
requestUpdate() as Void
Request a call to the onUpdate() method for the current View.
showActionMenu(menu as WatchUi.ActionMenu, delegate as WatchUi.ActionMenuDelegate) as Void
Push an action menu to the display.
showToast(text as Lang.String or Lang.ResourceId, options as { :icon as WatchUi.BitmapResource or Graphics.BitmapReference or Lang.ResourceId } or Null) as Void
Push a toast notification to the display.
startUserReview(token as WatchUi.ReviewResponseToken) as Void
Start the app review UI flow.
switchToView(view as WatchUi.Views, delegate as WatchUi.InputDelegates or Null, transition as WatchUi.SlideType) as Void
Pop the current View from the View stack and push a new one.
Typedef Details
InputDelegates as WatchUi.InputDelegate or WatchUi.BehaviorDelegate or WatchUi.ConfirmationDelegate or WatchUi.MenuInputDelegate or WatchUi.NumberPickerDelegate or WatchUi.PickerDelegate or WatchUi.TextPickerDelegate or WatchUi.WatchFaceDelegate or WatchUi.Menu2InputDelegate or WatchUi.ViewLoopDelegate
Since:

API Level 1.0.0

Resource as Lang.Array or Lang.Dictionary or Lang.String or WatchUi.AnimationResource or WatchUi.BitmapResource or WatchUi.FontResource or Graphics.BitmapReference or Graphics.FontReference
Since:

API Level 1.0.0

Views as WatchUi.View or WatchUi.Menu or WatchUi.TextPicker or WatchUi.ProgressBar or WatchUi.Confirmation or WatchUi.NumberPicker or WatchUi.ViewLoop
Since:

API Level 1.0.0

Instance Method Details
animate(object as Lang.Object, property as Lang.Symbol, type as WatchUi.AnimationType, start as Lang.Numeric, stop as Lang.Numeric, period as Lang.Numeric, callback as Null or Lang.Method() as Void) as Void
Animate an Object.

Animate works by changing an object property over time, such as the x-position of a Drawable. The animation starts after the call and runs the length of the specified period. During this time, the View object's onUpdate() method will be invoked at an increased rate to facilitate animation.

Note:
Will cause an app crash if called from background or data field app, or from watch face while in low power mode

Parameters:

object — (Lang.Object) — The object to animate
property — (Lang.Symbol) — The Symbol of the object's property to animate (e.g. :locX, :locY, etc.)
type — (WatchUi.AnimationType) — A WatchUi.ANIM_TYPE_* value
start — (Lang.Number) — The starting value of the property
stop — (Lang.Number) — The ending value of the property
period — (Lang.Float) — The duration of the animation in seconds
callback — (Lang.Method) — A Method to call when the animation is complete; this can be null
Example:

Move a bitmap across the screen from left to right
using System.WatchUi;

square = new Ui.Bitmap({
    :rezId=>Rez.Drawables.square,
    :locX=>10,
    :locY=>30
});
WatchUi.animate(square, :locX, Ui.ANIM_TYPE_LINEAR, 10, 200, 10, null);
See Also:

Toybox.WatchUi.Drawable
Toybox.WatchUi.Bitmap
Since:

API Level 1.0.0

cancelAllAnimations() as Void
Cancel animations started with WatchUi.animate()

Stop all animations that were started with WatchUi.animate(). This will leave all animations at their final frame, as if WatchUi.animate() ran to completion.

See Also:

WatchUi.animate()
Since:

API Level 3.1.7

getCurrentView() as [ WatchUi.View or Null, WatchUi.InputDelegates or Null ]
Get the current view that is displayed in the UI

Returns:

Lang.Array — An array containing the view and the delegate.
Since:

API Level 3.4.0

getSubscreen() as Graphics.BoundingBox or Null
Get the subscreen area in the display.

Supported Devices:

[View devices]
Returns:

Graphics.BoundingBox — object or null if no subscreen is present or if a virtual subscreen is present but not used for normal views.
Since:

API Level 3.2.7

loadResource(resource as Lang.ResourceId) as WatchUi.Resource
Load a resource from the executable.

Note:
Toybox::Graphics::BitmapReference and Toybox::Graphics::FontReference are returned for Toybox::WatchUi::BitmapResource and Toybox::WatchUi::FontResource in CIQ 4.0.0 and later.

Parameters:

resource — (Lang.ResourceId) — An identifier for a resource defined in the project's resources.xml file
Example:

Loading a String resource
// The resources.xml file contents:
// <resources>
//     <string id="AppName">APEELingApp</string>
// </resources>
using Toybox.WatchUi;

var banana = WatchUi.loadResource(Rez.Strings.AppName);
Returns:

Lang.Array, Lang.Dictionary, Lang.String, WatchUi.AnimationResource, WatchUi.BitmapResource, WatchUi.FontResource, Graphics.BitmapReference, Graphics.FontReference
Since:

API Level 1.0.0

makeReviewTokenRequest(callback as Lang.Method(responseStatus as WatchUi.ReviewRequestStatus, token as WatchUi.ReviewResponseToken or Null) as Void) as Void
Initiate a request to ask for this app to be reviewed

Parameters:

callback — (Lang.Method) — Callback to invoke when the review token request has completed.
Supported Devices:

[View devices]
Since:

API Level 3.4.2

popView(transition as WatchUi.SlideType) as Void
Pop the current View from the View stack.

Parameters:

transition — (WatchUi.SlideType) — A WatchUi.SLIDE_* value
Since:

API Level 1.0.0

Throws:

(Lang.OperationNotAllowedException) — Thrown if called from background, data field, glance, or watch face app; or of called from the base page of a widget
pushView(view as WatchUi.Views, delegate as WatchUi.InputDelegates or Null, transition as WatchUi.SlideType) as Lang.Boolean
Push a View onto the View stack.

Parameters:

view — (WatchUi.View) — View to push
delegate — (WatchUi.BehaviorDelegate, WatchUi.ConfirmationDelegate, WatchUi.InputDelegate, WatchUi.MenuInputDelegate, WatchUi.NumberPickerDelegate, WatchUi.PickerDelegate, WatchUi.TextPickerDelegate, WatchUi.WatchFaceDelegate) — The input delegate to handle input for the View
transition — (WatchUi.SlideType) — A WatchUi.SLIDE_* value
Since:

API Level 1.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown when view is type MapView and the visible map area parameters are invalid
(Lang.OperationNotAllowedException) — Thrown if called from background, data field, glance, or watch face app; or if the new view is a DataField, a GlanceView, or a WatchFace
requestUpdate() as Void
Request a call to the onUpdate() method for the current View.

See Also:

View.onUpdate()
Since:

API Level 1.0.0

showActionMenu(menu as WatchUi.ActionMenu, delegate as WatchUi.ActionMenuDelegate) as Void
Push an action menu to the display

Note:
An action menu will dismiss it self on either user selecting a menu item or pressing back button.

Parameters:

menu — (WatchUi.ActionMenu) — An action menu object.
delegate — (WatchUi.ActionMenuDelegate) — An action menu delegate object.
Supported Devices:

[View devices]
Since:

API Level 3.4.0

showToast(text as Lang.String or Lang.ResourceId, options as { :icon as WatchUi.BitmapResource or Graphics.BitmapReference or Lang.ResourceId } or Null) as Void
Push a toast notification to the display

Parameters:

text — (Lang.String, Lang.ResourceId) — The text to display in the notification toast.
options — (Lang.Dictionary) — A Dictionary of options.
:icon — (Graphics.BitmapReference, WatchUi.BitmapResource, Lang.ResourceId) — The icon to display with this notification. If no icon is provided and the system requires an icon for a toast, the app icon will be used.
Supported Devices:

[View devices]
Since:

API Level 3.4.0

startUserReview(token as WatchUi.ReviewResponseToken) as Void
Start the app review UI flow

Parameters:

token — (WatchUi.ReviewResponseToken) — The token that was passed as a parameter to a successful call to the callback parameter in makeReviewTokenRequest.
Supported Devices:

[View devices]
Since:

API Level 3.4.2

Throws:

(Lang.OperationNotAllowedException) — if token is not a ReviewResponseToken.
switchToView(view as WatchUi.Views, delegate as WatchUi.InputDelegates or Null, transition as WatchUi.SlideType) as Void
Pop the current View from the View stack and push a new one.

Note:
Prior to ConnectIQ 3.1, this method only supported switching to user-defined View objects, and would only accept InputDelegate or BehaviorDelegate objects as delegates for the given View.

Parameters:

view — (WatchUi.View) — The View object to push
delegate — (WatchUi.BehaviorDelegate, WatchUi.InputDelegate) — The input delegate to handle input for the View
transition — (WatchUi.SlideType) — A WatchUi.SLIDE_* value
Since:

API Level 1.0.0

Throws:

(Lang.OperationNotAllowedException) — Thrown if called from background, data field, glance, or watch face app; or of called from the base page of a widget and the new view is native; or if the new view is a DataField, a GlanceView, or a WatchFace


lass: Toybox.WatchUi.ActionMenu
Inherits:
Toybox.Lang.Objectshow all
Overview
Class that represents an action menu view.

Since:

API Level 3.4.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Typedef Summary
collapse
Options as { :theme as WatchUi.ActionMenuTheme }
Instance Method Summary
collapse
addItem(item as WatchUi.ActionMenuItem) as Void
Add Menuitem to an ActionMenu.
initialize(options as ActionMenu.Options or Null)
Constructor for the ActionMenu.
Typedef Details
Options as { :theme as WatchUi.ActionMenuTheme }
Since:

API Level 3.4.0

Instance Method Details
addItem(item as WatchUi.ActionMenuItem) as Void
Add Menuitem to an ActionMenu

Parameters:

item — (WatchUi.ActionMenuItem) — The ActionMenuItem to add to the ActionMenu
Since:

API Level 3.4.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if item is not an ActionMenuItem
initialize(options as ActionMenu.Options or Null)
Constructor for the ActionMenu.

Parameters:

options — (Lang.Dictionary) — Options for the ActionMenu.
:theme — (WatchUi.ActionMenuTheme) — theme for the action menu UI.
Since:

API Level 3.4.0

Throws:

(Lang.InvalidValueException) — If invalid theme is provided


Class: Toybox.WatchUi.ActionMenuDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
Class that represents an action menu delegate, which can be used to relay events regarding the action menu.

Since:

API Level 3.4.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
initialize()
Constructor for the ActionMenuDelegate.
onBack() as Void
An ActionMenu back key was pressed.
onSelect(item as WatchUi.ActionMenuItem) as Void
An ActionMenuItem was selected.
Instance Method Details
initialize()
Constructor for the ActionMenuDelegate

Since:

API Level 3.4.0

onBack() as Void
An ActionMenu back key was pressed.

Since:

API Level 3.4.0

onSelect(item as WatchUi.ActionMenuItem) as Void
An ActionMenuItem was selected.

Parameters:

item — (WatchUi.ActionMenuItem) — The selected ActionMenuItem.
Since:

API Level 3.4.0

Class: Toybox.WatchUi.ActionMenuItem
Inherits:
Toybox.Lang.Objectshow all
Overview
Class that represents an action menu item.

Since:

API Level 3.4.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Typedef Summary
collapse
Options as { :label as Lang.String or Lang.ResourceId }
Instance Method Summary
collapse
getId() as Lang.Object or Null
Get a MenuItem identifier.
getLabel() as Lang.String
Get a MenuItem label.
initialize(options as ActionMenuItem.Options, identifier as Lang.Object or Null)
Constructor.
Typedef Details
Options as { :label as Lang.String or Lang.ResourceId }
Since:

API Level 3.4.0

Instance Method Details
getId() as Lang.Object or Null
Get a MenuItem identifier.

Returns:

Lang.Object — The identifier for the MenuItem
Since:

API Level 3.4.0

getLabel() as Lang.String
Get a MenuItem label.

Returns:

Lang.String — The text label for the MenuItem
Since:

API Level 3.4.2

initialize(options as ActionMenuItem.Options, identifier as Lang.Object or Null)
Constructor

Parameters:

options — (Lang.Dictionary) — A Dictionary of options.
:label — (Lang.String, Lang.ResourceId) — label string or string ResourceId for the MenuItem
identifier — (Lang.Object) — The identifier for this MenuItem
Since:

API Level 3.4.0

Class: Toybox.WatchUi.AnimationDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
AnimationDelegate responds to an Animation event.

See Also:
AnimationLayer
Since:

API Level 3.1.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
onAnimationEvent(event as WatchUi.AnimationEvent, options as Lang.Dictionary) as Void
Handle an Animation event.
Instance Method Details
onAnimationEvent(event as WatchUi.AnimationEvent, options as Lang.Dictionary) as Void
Handle an Animation event.

Parameters:

event — (WatchUi.AnimationEvent) — The animation event, a WatchUi.ANIMATION_EVENT* value
options — (Lang.Dictionary) — A Dictionary of options
Since:

API Level 3.1.0

Class: Toybox.WatchUi.AnimationLayer
Inherits:
Toybox.WatchUi.Layershow all
Overview
The class that represents an Animation layer

Since:

API Level 3.1.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
getDc() as Graphics.Dc or Null
getDc will always return null, as the dc buffer of animations can not be updated by user.
getResource() as WatchUi.AnimationResource
Get the animation resource.
initialize(rez as Lang.ResourceId or WatchUi.AnimationResource, options as { :locX as Lang.Numeric, :locY as Lang.Numeric, :identifier as Lang.Object, :visibility as Lang.Boolean } or Null)
Constructor.
play(options as { :delegate as WatchUi.AnimationDelegate }) as Lang.Boolean
Play animation, animation must be added to and not abandoned by the view before it can be played.
stop() as Void
Stop a playing animation.
Instance Method Details
getDc() as Graphics.Dc or Null
getDc will always return null, as the dc buffer of animations can not be updated by user.

Since:

API Level 3.1.0

getResource() as WatchUi.AnimationResource
Get the animation resource

Returns:

WatchUi.AnimationResource — the WatchUi.AnimationResource
Since:

API Level 3.1.0

initialize(rez as Lang.ResourceId or WatchUi.AnimationResource, options as { :locX as Lang.Numeric, :locY as Lang.Numeric, :identifier as Lang.Object, :visibility as Lang.Boolean } or Null)
Constructor

Parameters:

rez — (Lang.ResourceId, WatchUi.AnimationResource) — either an animation ResourceId or a WatchUi.AnimationResource
options — (Lang.Dictionary) — A Dictionary of options, can be null
:locX — (Lang.Number) — The initial absolute, on-screen x-coordinate for the Animation object (optional defaults to 0)
:locY — (Lang.Number) — The initial absolute, on-screen y-coordinate for the Animation object (optional defaults to 0)
:identifier — (Lang.Object) — unique object for identification (optional)
:visibility — (Lang.Boolean) — true if the layer is visible, otherwise false (optional, default to +true+)
Since:

API Level 3.1.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if the rez is not an animation resource or ResourceId
play(options as { :delegate as WatchUi.AnimationDelegate }) as Lang.Boolean
Play animation, animation must be added to and not abandoned by the view before it can be played.

This will stop the existing playback first.

Parameters:

options — (Lang.Dictionary) — A Dictionary of options, can be null
:delegate — (WatchUi.AnimationDelegate) — An AnimationDelegate
Returns:

Lang.Boolean — true if playback started, otherwise false
Since:

API Level 3.1.0

stop() as Void
Stop a playing animation.

  The last frame of the animation will be persisted in the frame buffer.
Since:

API Level 3.1.0

Class: Toybox.WatchUi.AnimationResource
Inherits:
Toybox.Lang.Objectshow all
Overview
A representation of an animation resource.

AnimationResource objects are returned by the loadResource() method.

Since:

API Level 3.1.0

Supported Devices:

[View devices]
Instance Method Summary
collapse
getColorDepth() as Lang.Number
Get the color depth in terms of bit/pixel of the animation resource.
getFrameRate() as Lang.Number
Get the target frame rate of an animation resource.
getHeight() as Lang.Number
Get the height of an animation resource.
getNumberOfFrames() as Lang.Number
Get the number of frames of an animation resource.
getWidth() as Lang.Number
Get the width of an animation resource.
toString() as Lang.String
Get info about an animation resource as a String.
Instance Method Details
getColorDepth() as Lang.Number
Get the color depth in terms of bit/pixel of the animation resource.

Returns:

Lang.Number — Color depth in terms of bit/pixel
Since:

API Level 3.2.0

getFrameRate() as Lang.Number
Get the target frame rate of an animation resource.

Returns:

Lang.Number — Frame rate of the animation in seconds
Since:

API Level 3.1.0

getHeight() as Lang.Number
Get the height of an animation resource.

Returns:

Lang.Number — Height of the animation in pixels
Since:

API Level 3.1.0

getNumberOfFrames() as Lang.Number
Get the number of frames of an animation resource.

Returns:

Lang.Number — Number of frames
Since:

API Level 3.1.0

getWidth() as Lang.Number
Get the width of an animation resource.

Returns:

Lang.Number — Width of the animation in pixels
Since:

API Level 3.1.0

toString() as Lang.String
Get info about an animation resource as a String.

The info String is formatted as "Animation X x Y" where "X" is the width of the animation and "Y" is the height.

Returns:

Lang.String — A String representation of the AnimationResource object
Since:

API Level 3.1.0

Class: Toybox.WatchUi.Button
Inherits:
Toybox.WatchUi.Selectableshow all
Overview
A representation of a Selectable button.

Button objects are mappable to a BehaviorDelegate method on selection.

See Also:
Toybox.WatchUi.Selectable
Note:
See the Selectable sample distributed with the SDK for an example of the use of the Button class

Since:

API Level 2.1.0

App Types:

Audio Content Provider
Glance
Watch App
Watch Face
Widget
Instance Member Summary
collapse
background as Graphics.ColorType or WatchUi.Drawable or Null
The Button background A Drawable, Graphics.COLOR_* value, or 24-bit integer of the form 0xRRGGBB to be drawn before the current Selectable state is drawn.
behavior as Lang.Symbol or Null
A Symbol describing the behavior method executed when button is selected.
Instance Method Summary
collapse
draw(dc as Graphics.Dc) as Void
Draw the Button to the device context (Dc).
initialize(options as { :behavior as Lang.Symbol, :background as Graphics.ColorType or WatchUi.Drawable, :locX as Lang.Numeric, :locY as Lang.Numeric, :width as Lang.Numeric, :height as Lang.Numeric, :stateDefault as Graphics.ColorType or WatchUi.Drawable, :stateHighlighted as Graphics.ColorType or WatchUi.Drawable, :stateSelected as Graphics.ColorType or WatchUi.Drawable, :stateDisabled as Graphics.ColorType or WatchUi.Drawable, :identifier as Lang.Object, :visible as Lang.Boolean })
Constructor Initializes a Button object's foreground, background, and behavior.
Instance Attribute Details
var background as Graphics.ColorType or WatchUi.Drawable or Null
The Button background

A Drawable, Graphics.COLOR_* value, or 24-bit integer of the form 0xRRGGBB to be drawn before the current Selectable state is drawn.

Since:

API Level 2.1.0

Returns:

Lang.Object
var behavior as Lang.Symbol or Null
A Symbol describing the behavior method executed when button is selected.

This Symbol must be a member of the active View object's registered BehaviorDelegate, such as :onBack, but may also be a Symbol from an extended class. If the value is null, then a SelectableEvent will be issued.

Since:

API Level 2.1.0

See Also:

Toybox.WatchUi.SelectableEvent
Returns:

Lang.Symbol
Instance Method Details
draw(dc as Graphics.Dc) as Void
Draw the Button to the device context (Dc).

This method assumes that the device context has already been configured to the proper options.

Parameters:

dc — (Graphics.Dc) — The device context
Since:

API Level 2.1.0

initialize(options as { :behavior as Lang.Symbol, :background as Graphics.ColorType or WatchUi.Drawable, :locX as Lang.Numeric, :locY as Lang.Numeric, :width as Lang.Numeric, :height as Lang.Numeric, :stateDefault as Graphics.ColorType or WatchUi.Drawable, :stateHighlighted as Graphics.ColorType or WatchUi.Drawable, :stateSelected as Graphics.ColorType or WatchUi.Drawable, :stateDisabled as Graphics.ColorType or WatchUi.Drawable, :identifier as Lang.Object, :visible as Lang.Boolean })
Constructor Initializes a Button object's foreground, background, and behavior. The Button must be registered during setLayout() in order to be usable.

Parameters:

options — (Lang.Dictionary) — A Dictionary containing options for the Button object
:behavior — (Lang.Symbol) — A Symbol object to call when the Button is selected; set to null to use a SelectableEvent (optional)
:background — (Lang.Object) — A Drawable, Graphics.COLOR_* constant, or 24-bit integer of the form 0xRRGGBB (optional)
See Also:

Selectable.initialize()
Since:

API Level 2.1.0

Class: Toybox.WatchUi.CheckboxMenu
Inherits:
Toybox.WatchUi.Menu2show all
Overview
A representation of a check box menu.

A CheckboxMenu is a specialized Menu2 View that presents the user with a list of check box options. After an option is selected, the registered onSelect() method will be called. While a CheckboxMenu can be generated programmatically, they should generally be created as a resource.

A CheckboxMenu is pushed using pushView(), which provides a Menu2InputDelegate as the input delegate.

See Also:
Toybox.WatchUi.Menu2
Toybox.WatchUi.CheckboxMenuItem
Toybox.WatchUi.Menu2InputDelegate
Toybox.WatchUi.BehaviorDelegate
WatchUi.pushView()
Note:
The look and feel of a CheckboxMenu is device-specific.

Example:

Build a simple CheckboxMenu programmatically
using Toybox.WatchUi;

class MyBehaviorDelegate extends WatchUi.BehaviorDelegate {
    function initialize() {
        BehaviorDelegate.initialize();
    }

    function onMenu() {
        var menu = new WatchUi.CheckboxMenu({:title=>"My CheckboxMenu"});
        var delegate;
        menu.addItem(
            new CheckboxMenuItem(
                "Item 1 Label",
                "Item 1 subLabel",
                "itemOneId",
                true,
                {}
            )
        );
        menu.addItem(
            new CheckboxMenuItem(
                "Item 2 Label",
                "Item 2 subLabel",
                "itemTwoId",
                false,
                {}
            )
        );
        delegate = new MyMenu2Delegate(); // a WatchUi.Menu2InputDelegate
        WatchUi.pushView(menu, delegate, WatchUi.SLIDE_IMMEDIATE);
        return true;
    }
}
Since:

API Level 3.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
addItem(item as WatchUi.CheckboxMenuItem) as Void
Add a CheckboxMenuItem to a CheckboxMenu.
initialize(options as { :title as Lang.String or Lang.ResourceId or WatchUi.Drawable, :footer as Lang.String or Lang.ResourceId or WatchUi.Drawable, :focus as Lang.Number, :icon as Graphics.BitmapType or Lang.ResourceId or WatchUi.Drawable, :theme as WatchUi.MenuTheme or Null, :dividerType as Menu2.DividerType or Null } or Null)
Constructor.
Instance Method Details
addItem(item as WatchUi.CheckboxMenuItem) as Void
Add a CheckboxMenuItem to a CheckboxMenu.

Parameters:

item — (WatchUi.CheckboxMenuItem) — The CheckboxMenuItem to add to the CheckboxMenu
Since:

API Level 3.0.0

Throws:

(WatchUi.InvalidMenuItemTypeException) — Thrown if item is not a [Toybox::WatchUi::CheckboxMenuItem]
(Lang.UnexpectedTypeException) — Thrown if item is not a valid type
initialize(options as { :title as Lang.String or Lang.ResourceId or WatchUi.Drawable, :footer as Lang.String or Lang.ResourceId or WatchUi.Drawable, :focus as Lang.Number, :icon as Graphics.BitmapType or Lang.ResourceId or WatchUi.Drawable, :theme as WatchUi.MenuTheme or Null, :dividerType as Menu2.DividerType or Null } or Null)
Constructor

Note:
The :icon option is only used on ConnectIQ 3.4.0 devices with subscreen support.

Note:
The :theme option is only used on ConnectIQ 4.1.8 devices with menu theme support.

Note:
The :dividerType option is only used on ConnectIQ 5.0.1 devices with divider support.

Note:
The :footer option is only used on ConnectIQ 5.1.0 devices.

Parameters:

options — (Lang.Dictionary) — A Dictionary of options
Can be null
:title — (Lang.String, Lang.ResourceId, WatchUi.Drawable) — The menu title
:footer — (Lang.String, Lang.ResourceId, WatchUi.Drawable) — The menu footer
:focus — (Lang.Number) — The index of the CheckboxMenuItem that should have initial focus
:icon — (Graphics.BitmapType, WatchUi.Drawable, Lang.ResourceId) — the default icon for menu items
:theme — (WatchUi.MenuTheme) — The menu theme, or null for no theme. Defaults to MENU_THEME_DEFAULT.
:dividerType — (Menu2.DividerType) — The divider type, Defaults to DIVIDER_TYPE_DEFAULT or when null is passed as value.
See Also:

Toybox.WatchUi.Menu2.setDividerType
Since:

API Level 3.0.0

Class: Toybox.WatchUi.CheckboxMenuItem
Inherits:
Toybox.WatchUi.MenuItemshow all
Overview
A representation of a check box item in a CheckboxMenu.

A CheckboxMenuItem is a element of a CheckboxMenu View that represents one of the options in the menu, and can appear in one of two states: checked or unchecked. When selected, the state of the CheckboxMenuItem changes to the state opposite of the state prior to the onSelect delegate callback invocation.

A CheckboxMenuItem can be added to a CheckboxMenu using the addItem() method.

See Also:
Toybox.WatchUi.CheckboxMenu
Toybox.WatchUi.MenuItem
Since:

API Level 3.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
initialize(label as Lang.String or Lang.ResourceId, subLabel as Lang.String or Lang.ResourceId or Null, identifier as Lang.Object or Null, checked as Lang.Boolean, options as { :alignment as MenuItem.Alignment, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId } or Null)
Constructor.
isChecked() as Lang.Boolean
Get a CheckboxMenuItem state.
setChecked(checked as Lang.Boolean) as Void
Set a CheckboxMenuItem state.
Instance Method Details
initialize(label as Lang.String or Lang.ResourceId, subLabel as Lang.String or Lang.ResourceId or Null, identifier as Lang.Object or Null, checked as Lang.Boolean, options as { :alignment as MenuItem.Alignment, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId } or Null)
Constructor

Note:
The :icon option is only used on ConnectIQ 3.4.0 devices with subscreen support.

Parameters:

label — (Lang.String, Lang.ResourceId) — The string label for the CheckboxMenuItem
subLabel — (Lang.String, Lang.ResourceId) — The substring label for the CheckboxMenuItem, which can be null
identifier — (Lang.Object) — The identifier for this CheckboxMenuItem, which is typically a String
checked — (Lang.Boolean) — The initial state of the CheckboxMenuItem; checked if true, unchecked if false
options — (Lang.Dictionary) — A Dictionary of options
:alignment — (MenuItem.Alignment) — A WatchUi.MenuItem.MENU_ITEM_LABEL_ALIGN_* constant representing the label alignment, which defaults to the system default for check box menu items if not specified.
:icon — (Graphics.BitmapType, WatchUi.Drawable, Lang.ResourceId) — for the subscreen area when the menu item is in focus
Since:

API Level 3.0.0

isChecked() as Lang.Boolean
Get a CheckboxMenuItem state.

Returns:

Lang.Boolean — The current state of the CheckboxMenuItem
Since:

API Level 3.0.0

setChecked(checked as Lang.Boolean) as Void
Set a CheckboxMenuItem state.

Parameters:

checked — (Lang.Boolean) — The intended state of the CheckboxMenuItem; checked if true, unchecked if false
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if checked is not a valid type


Class: Toybox.WatchUi.ClickEvent
Inherits:
Toybox.Lang.Objectshow all
Overview
ClickEvent is an object sent to InputDelegate there is tap interaction with a device's touch screen.

See Also:
Toybox.WatchUi.InputDelegate
Example:

using Toybox.System;
using Toybox.WatchUi;

class InputDelegate extends WatchUi.BehaviorDelegate {
    function onTap(clickEvent) {
        System.println(clickEvent.getCoordinates()); // e.g. [36, 40]
        System.println(clickEvent.getType());        // CLICK_TYPE_TAP = 0
        return true;
    }
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Instance Method Summary
collapse
getCoordinates() as [ Lang.Number, Lang.Number ]
Get the coordinates of a click event.
getType() as WatchUi.ClickType
Get the type of click event.
Instance Method Details
getCoordinates() as [ Lang.Number, Lang.Number ]
Get the coordinates of a click event.

Returns:

Lang.Array — An array containing the x and y coordinates of the click event as Numbers
Since:

API Level 1.0.0

getType() as WatchUi.ClickType
Get the type of click event.

Returns:

WatchUi.ClickType — A WatchUi.CLICK_TYPE_* value
Since:

API Level 1.0.0

Class: Toybox.WatchUi.Confirmation
Inherits:
Toybox.Lang.Objectshow all
Overview
A representation of a confirmation dialog.

A Confirmation is a special View that presents the user with a yes/no question. After an option is selected, the registered onResponse() method will be called. A Confirmation is pushed using pushView(), which provides a ConfirmationDelegate as the input delegate.

See Also:
Toybox.WatchUi.ConfirmationDelegate
WatchUi.pushView()
Note:
The look and feel of a confirmation dialog is device-specific.

Example:

using Toybox.WatchUi;

var message = "Continue?";
dialog = new WatchUi.Confirmation(message);
WatchUi.pushView(
    dialog,
    new ConfirmationDelegate(),
    WatchUi.SLIDE_IMMEDIATE
);
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Instance Method Summary
collapse
initialize(message as Lang.String)
Constructor.
Instance Method Details
initialize(message as Lang.String)
Constructor

Parameters:

message — (Lang.String) — The confirmation message to display in the confirmation dialog
Since:

API Level 1.0.0



Class: Toybox.WatchUi.ConfirmationDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
ConfirmationDelegate responds to a Confirmation selection.

See Also:
Toybox.WatchUi.Confirmation
Example:

using Toybox.WatchUi;
using Toybox.System;

class MyConfirmationDelegate extends WatchUi.ConfirmationDelegate {
    function initialize() {
        ConfirmationDelegate.initialize();
    }

    function onResponse(response) {
        if (response == WatchUi.CONFIRM_NO) {
            System.println("Cancel");
        } else {
            System.println("Confirm");
        }
    }
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Instance Method Summary
collapse
onResponse(response as WatchUi.Confirm) as Lang.Boolean
A confirmation selection was made.
Instance Method Details
onResponse(response as WatchUi.Confirm) as Lang.Boolean
A confirmation selection was made.

This method is called when a Confirmation response is selected, and receives the response as an argument. The response is either a CONFIRM_NO or CONFIRM_YES value.

Parameters:

response — (WatchUi.Confirm) — The WatchUi.CONFIRM_* value from this Confirmation
See Also:

Toybox.WatchUi.Confirmation
Since:

API Level 1.0.0



Class: Toybox.WatchUi.CustomMenu
Inherits:
Toybox.WatchUi.Menu2show all
Overview
A representation of a custom menu.

A CustomMenu is a specialized Menu2 View that presents the user with a list of custom rendered options. After an option is selected, the registered onSelect() method will be called.

A CustomMenu is pushed using pushView(), which provides a Menu2InputDelegate as the input delegate.

See Also:
Toybox.WatchUi.Menu2
Toybox.WatchUi.CustomMenuItem
Toybox.WatchUi.Menu2InputDelegate
Toybox.WatchUi.BehaviorDelegate
WatchUi.pushView()
Example:

Build a CustomMenu programmatically
using Toybox.WatchUi;

class MyBehaviorDelegate extends WatchUi.BehaviorDelegate {
    function initialize() {
        BehaviorDelegate.initialize();
    }

    function onMenu() {
        var menu = new WatchUi.CustomMenu(80, Graphics.COLOR_BLACK, {});

        menu.addItem(
            new MyCustomMenuItem( // a WatchUi.CustomMenuItem
                :itemOne,
                {}
            )
        );
        menu.addItem(
            new MyCustomMenuItem( // a WatchUi.CustomMenuItem
                :itemTwo,
                {}
            )
        );
        var delegate = new MyMenu2Delegate(); // a WatchUi.Menu2InputDelegate
        WatchUi.pushView(menu, delegate, WatchUi.SLIDE_IMMEDIATE);
        return true;
    }
}
Since:

API Level 3.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
addItem(item as WatchUi.CustomMenuItem) as Void
Add a CustomMenuItem to a CustomMenu.
drawFooter(dc as Graphics.Dc) as Void
Draw the CustomMenu footer.
drawForeground(dc as Graphics.Dc) as Void
Draw the CustomMenu foreground.
drawTitle(dc as Graphics.Dc) as Void
Draw the CustomMenu title.
initialize(itemHeight as Lang.Number, backgroundColor as Graphics.ColorType, options as { :focus as Lang.Number, :focusItemHeight as Lang.Number or Null, :title as WatchUi.Drawable, :footer as WatchUi.Drawable, :foreground as WatchUi.Drawable, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId, :titleItemHeight as Lang.Number or Null, :footerItemHeight as Lang.Number or Null, :theme as WatchUi.MenuTheme or Null, :dividerType as Menu2.DividerType or Null } or Null)
Constructor.
setBackgroundColor(color as Graphics.ColorType) as Void
Set the background color.
setDividerType(divider as Menu2.DividerType or Null) as Void
Set or change the desired divider type.
setFooter(drawable as WatchUi.Drawable or Null) as Void
Set the footer drawable.
setForeground(drawable as WatchUi.Drawable or Null) as Void
Set the foreground drawable.
setTitle(drawable as WatchUi.Drawable or Null) as Void
Set the title drawable.
Instance Method Details
addItem(item as WatchUi.CustomMenuItem) as Void
Add a CustomMenuItem to a CustomMenu.

Parameters:

item — (WatchUi.CustomMenuItem) — The CustomMenuItem to add to the CustomMenu. Other MenuItem variants cannot be added to a Custom Menu.
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if item is not a MenuItem.
(WatchUi.InvalidMenuItemTypeException) — Thrown if item is not a CustomMenuItem.
drawFooter(dc as Graphics.Dc) as Void
Draw the CustomMenu footer.

This is called to render the menu footer region.

Parameters:

dc — (Graphics.Dc) — The menu's drawing context
Since:

API Level 3.0.0

drawForeground(dc as Graphics.Dc) as Void
Draw the CustomMenu foreground.

This is called after a menu's items and title have been rendered. It can be used to draw overlay content for the menu.

Parameters:

dc — (Graphics.Dc) — The menu's drawing context
Since:

API Level 3.0.0

drawTitle(dc as Graphics.Dc) as Void
Draw the CustomMenu title.

This is called to render the menu title region.

Parameters:

dc — (Graphics.Dc) — The menu's drawing context
Since:

API Level 3.0.0

initialize(itemHeight as Lang.Number, backgroundColor as Graphics.ColorType, options as { :focus as Lang.Number, :focusItemHeight as Lang.Number or Null, :title as WatchUi.Drawable, :footer as WatchUi.Drawable, :foreground as WatchUi.Drawable, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId, :titleItemHeight as Lang.Number or Null, :footerItemHeight as Lang.Number or Null, :theme as WatchUi.MenuTheme or Null, :dividerType as Menu2.DividerType or Null } or Null)
Constructor

Note:
The options :titleItemHeight and :footerItemHeight are only supported with ConnectIQ 4.0.0 and later.

Note:
The :icon option is only used on ConnectIQ 3.4.0 devices with subscreen support.

Note:
The :theme option is only used on ConnectIQ 4.1.8 devices with menu theme support. The background color will not be used if themes are supported and the theme is non-null.

Note:
The :dividerType option is only used on ConnectIQ 5.0.1 devices with divider support.

Parameters:

itemHeight — (Lang.Number) — The pixel height of menu items rendered by this menu.
backgroundColor — (Graphics.ColorType) — The color that will be used to fill the background of the menu.
options — (Lang.Dictionary) — A Dictionary of options. Can be null
:focus — (Lang.Number) — The index of the CheckboxMenuItem that should have initial focus. (optional)
:focusItemHeight — (Lang.Number) — The pixel height of the center menu item of this menu. This option is ignored on products with touch screens. (optional)
:title — (WatchUi.Drawable) — A Drawable that will render the title area. (optional)
:footer — (WatchUi.Drawable) — A Drawable that will render the area after the final item in the menu.(optional)
:foreground — (WatchUi.Drawable) — A Drawable to render on top of menu items. (optional)
:titleItemHeight — (Lang.Number) — The pixel height of the header menu item of this menu (optional)
:footerItemHeight — (Lang.Number) — The pixel height of the footer menu item of this menu. (optional)
:icon — (Graphics.BitmapType, WatchUi.Drawable, Lang.ResourceId) — the default icon for the menu incase menuitem do not have it populated
:theme — (WatchUi.MenuTheme) — The menu theme, or null for no theme. Defaults to MENU_THEME_DEFAULT.
:dividerType — (Menu2.DividerType) — The divider type, if null is passed as value, divider will be disabled (non-visible). Defaults to DIVIDER_TYPE_DEFAULT.
See Also:

Toybox.WatchUi.CustomMenu.setDividerType
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if either itemHeight or backgroundColor are not of the expected type
(Lang.UnexpectedTypeException) — Thrown if the :focusItemHeight, :titleItemHeight, :footerItemHeight, or :focus options are provided and are not Number objects
(Lang.UnexpectedTypeException) — Thrown if the :title, :footer, or :foreground options are provided and are not Drawable objects.
setBackgroundColor(color as Graphics.ColorType) as Void
Set the background color.

Parameters:

color — (Graphics.ColorType) — The color to fill the background of the menu with.
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if color is not a Number.
setDividerType(divider as Menu2.DividerType or Null) as Void
Set or change the desired divider type.

If set to Menu2.DIVIDER_TYPE_ICON. Icon from CustomMenuItem.setDividerIcon will be rendered on the left side of the divider.

Set to null to disable divider which may also disable MenuTheme, CustomMenuItem.draw will be called with full width of menu item.

Menu2.DIVIDER_TYPE_DEFAULT will be used if not set for devices that support divider.

Supported Devices:

[View devices]
Since:

API Level 5.0.1

Throws:

(WatchUi.InvalidValueException) — Thrown if divider is not an valid value.
(Lang.UnexpectedTypeException) — Thrown if divider is not a valid type.
setFooter(drawable as WatchUi.Drawable or Null) as Void
Set the footer drawable.

Parameters:

drawable — (WatchUi.Drawable, null) — A drawable that will render the footer area or null.
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if drawable is not a Drawable or null.
setForeground(drawable as WatchUi.Drawable or Null) as Void
Set the foreground drawable.

Parameters:

drawable — (WatchUi.Drawable, null) — A Drawable to render on top of the menu items or null.
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if drawable is not a Drawable or null.
setTitle(drawable as WatchUi.Drawable or Null) as Void
Set the title drawable.

Parameters:

drawable — (WatchUi.Drawable, null) — A drawable that will render the title area or null.
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if drawable is not a Drawable or null.


Class: Toybox.WatchUi.CustomMenuItem
Inherits:
Toybox.WatchUi.MenuItemshow all
Overview
A representation of a custom item in a CustomMenu.

A CustomMenuItem is a element of a CustomMenu View that represents one of the items in the menu. When selected, the onSelect() delegate callback will be invoked. The selected state of the item may change when it is being selected. This state can be evaluated using the isSelected() method and can be used to control the look of a selected item.

A CustomMenuItem can be added to a CustomMenu using the addItem() method.

See Also:
Toybox.WatchUi.CustomMenu
Toybox.WatchUi.MenuItem
Since:

API Level 3.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
draw(dc as Graphics.Dc) as Void
Draw method for a CustomMenuItem.
getDividerIcon() as Graphics.BitmapType or WatchUi.Drawable or Null
Get the divider icon.
initialize(identifier as Lang.Object or Null, options as { :alignment as MenuItem.Alignment, :drawable as WatchUi.Drawable, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId, :dividerIcon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId })
Constructor.
isFocused() as Lang.Boolean
Get the CustomMenuItem focus state.
isSelected() as Lang.Boolean
Get the CustomMenuItem selected state.
setDividerIcon(icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId or Null) as Void
Set or change the menu icon.
setDrawable(drawable as WatchUi.Drawable or Null) as Void
Set a CustomMenuItem Drawable.
Instance Method Details
draw(dc as Graphics.Dc) as Void
Draw method for a CustomMenuItem.

This is called when a menu item is rendering.

Parameters:

dc — (Graphics.Dc) — The item's drawing context
Since:

API Level 3.0.0

getDividerIcon() as Graphics.BitmapType or WatchUi.Drawable or Null
Get the divider icon.

Supported Devices:

[View devices]
Returns:

Graphics.BitmapType, Lang.Symbol, WatchUi.Drawable — The icon
See Also:

CustomMenuItem.setDividerIcon()
Since:

API Level 5.0.1

initialize(identifier as Lang.Object or Null, options as { :alignment as MenuItem.Alignment, :drawable as WatchUi.Drawable, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId, :dividerIcon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId })
Constructor

Note:
The :icon option is only used on ConnectIQ 3.4.0 devices with subscreen support.

Parameters:

identifier — (Lang.Object) — The identifier for this item which is typically a String
options — (Lang.Dictionary) — A Dictionary of options
:drawable — (WatchUi.Drawable) — A Drawable that draws the item. (required)
:icon — (Graphics.BitmapType, WatchUi.Drawable, Lang.ResourceId) — for the subscreen area when the menu item is in focus
:dividerIcon — (Graphics.BitmapType, WatchUi.Drawable, Lang.ResourceId) — icon for the divider area.
See Also:

MenuItem.initialize()
CustomMenuItem.setDividerIcon()
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if the :drawable option is not a Drawable or is null.
isFocused() as Lang.Boolean
Get the CustomMenuItem focus state.

Returns:

Lang.Boolean — The current focus state of the CustomMenuItem
Since:

API Level 3.0.0

isSelected() as Lang.Boolean
Get the CustomMenuItem selected state.

Returns:

Lang.Boolean — The current selected state of the CustomMenuItem
Since:

API Level 3.0.0

setDividerIcon(icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId or Null) as Void
Set or change the menu icon.

If device support Menu2.DividerType and parent menu is set to DIVIDER_TYPE_ICON, icon (if not +null+) will be rendered on the left side of the divider.

Parameters:

icon — (Graphics.BitmapType, WatchUi.Drawable) — The Drawable or ResourceId used to render the icon for this item
Supported Devices:

[View devices]
Since:

API Level 5.0.1

Throws:

(Lang.UnexpectedTypeException) — Thrown if icon is not a valid type.
setDrawable(drawable as WatchUi.Drawable or Null) as Void
Set a CustomMenuItem Drawable.

Parameters:

drawable — (WatchUi.Drawable) — A Drawable to render on top of the menu items, or null.
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if drawable is not a Drawable or is null.

Class: Toybox.WatchUi.DataField
Inherits:
Toybox.WatchUi.Viewshow all
Overview
Create a Data Field.

A DataField is a special View that automatically provides Activity.Info once per second via the compute() method. A DataField requires the implementation of the compute() method to handle the incoming Activity info, and otherwise provides a significant amount of flexibility regarding the way the information is displayed. If less complexity is required, consider a SimpleDataField.

See Also:
Toybox.WatchUi.SimpleDataField
Activity.Info
Toybox.Graphics
Note:
The system will call the onUpdate() method inherited from View when a Data Field is displayed by the system. Because compute() and onUpdate() are asynchronous, there is no guarantee that compute() will be called before onUpdate(). For this reason, variables should never be initialized in compute().

Example:

A DataField that displays current heart rate
using Toybox.WatchUi;
using Toybox.Graphics;

class MyHRField extends WatchUi.DataField {

    hidden var hrValue;

    function initialize() {
        DataField.initialize();
        hrValue = 0.0f;
    }

    // Get the field layout
    function onLayout(dc) {
        View.setLayout(Rez.Layouts.MainLayout(dc));
    }

    // Calculate the data to display in the field here
    function compute(info) {
        if (info has :currentHeartRate) {
            if (info.currentHeartRate != null) {
                hrValue = info.currentHeartRate;
            } else {
                hrValue = 0.0f;
            }
        }
    }

    // Update the field layout and display the field data
    function onUpdate(dc) {
        View.findDrawableById("Background").setColor(getBackgroundColor());
        var value = View.findDrawableById("value");
        value.setColor(Graphics.COLOR_BLACK);
        value.setText(hrValue.format("%.2f"));
        View.onUpdate(dc);
    }
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Direct Known Subclasses
WatchUi.SimpleDataField

Constant Summary
Obscurity
Since:

API Level 1.0.0

Name	Value	Since	Description	See Also
OBSCURE_LEFT	1	
API Level 1.0.0

Some of the left edge of the device context is obscured

OBSCURE_TOP	2	
API Level 1.0.0

Some of the top edge of the device context is obscured

OBSCURE_RIGHT	4	
API Level 1.0.0

Some of the right edge of the device context is obscured

OBSCURE_BOTTOM	8	
API Level 1.0.0

Some of the bottom edge of the device context is obscured

Instance Method Summary
collapse
compute(info as Activity.Info)
Retrieve Activity.Info in a DataField.
createField(name as Lang.String, fieldId as Lang.Number, type as FitContributor.DataType, options as { :count as Lang.Number, :mesgType as FitContributor.MessageType, :units as Lang.String }) as FitContributor.Field
Create a new custom FIT Field.
getBackgroundColor() as Graphics.ColorType
Get the current Data Field background color.
getObscurityFlags() as DataField.Obscurity
Get the screen regions that are obscured.
initialize()
Constructor.
onNextMultisportLeg() as Void
The device has transitioned to the next multisport leg.
onTimerLap() as Void
A lap event has occurred.
onTimerPause() as Void
The activity timer is paused.
onTimerReset() as Void
The current activity has ended.
onTimerResume() as Void
The activity time has resumed.
onTimerStart() as Void
The activity timer has started.
onTimerStop() as Void
The activity timer has stopped.
onWorkoutStarted() as Void
The current workout is started.
onWorkoutStepComplete() as Void
The current workout step is complete.
showAlert(alertView as WatchUi.DataFieldAlert) as Void
Show an alert.
Instance Method Details
compute(info as Activity.Info)
Retrieve Activity.Info in a DataField.

This method is called once per second and automatically provides Activity.Info to the DataField object for display or additional computation. It is necessary to override compute() when implementing a DataField.

Parameters:

info — (Activity.Info) — The updated Activity.Info object
Example:

function compute(info) {
    if (info has :currentHeartRate) {
        if (info.currentHeartRate != null) {
            hrValue = info.currentHeartRate;
        } else {
            hrValue = 0.0f;
        }
    }
}
See Also:

Activity.Info
Since:

API Level 1.0.0

createField(name as Lang.String, fieldId as Lang.Number, type as FitContributor.DataType, options as { :count as Lang.Number, :mesgType as FitContributor.MessageType, :units as Lang.String }) as FitContributor.Field
Create a new custom FIT Field.

To record custom activity data to a FIT file, a new Field must first be created to allow Data Fields access to FIT recording without allowing access to the session. Once created, a Field is updated in the FIT file by changing the value of the data within the Field.

Parameters:

name — (Lang.String) — The name of the Field
fieldId — (Lang.Number) — The unique Field identifier of the Field
type — (FitContributor.DataType) — A FitContributor.DATA_TYPE_* value representing the type definition of the Field
options — (Lang.Dictionary) — Optional parameters for field creation
:count — (Lang.Number) — The number of elements to add to the field if it is an Array. This is also the maximum combined size of the Strings plus their null terminators if the Field type is FitContributor.DATA_TYPE_STRING (Default 1).
:mesgType — (FitContributor.MessageType) — Optional. A FitContributor.MESG_TYPE_* value representing the Field message type. This defaults to FitContributor.MESG_TYPE_RECORD if not specified. Additionally, if FitContributor.MESG_TYPE_RECORD is used, the field type cannot be FitContributor.DATA_TYPE_STRING.
:units — (Lang.String) — Optional. A String representing the display units (e.g. "mph", "ft", "Pa")
Returns:

FitContributor.Field
See Also:

Toybox.FitContributor
The Messages Sheet in Profile.xlsx included with the FIT SDK for native field numbers
Since:

API Level 1.3.0

getBackgroundColor() as Graphics.ColorType
Get the current Data Field background color.

Some devices provide a global Data Field background color setting. This method will return the current value of that setting as a value of either Graphics.COLOR_WHITE or Graphics.COLOR_BLACK.

Returns:

Graphics.ColorType — A Graphics.COLOR_* value
See Also:

Toybox.Graphics
Since:

API Level 1.2.0

getObscurityFlags() as DataField.Obscurity
Get the screen regions that are obscured.

Non-rectangular screens have certain portions of the screen obscured. For example, a round screen effectively cuts off the corners of a square screen. This method returns a sum of the enumerated values defined by the WatchUi.DataField.OBSCURE_* constants that match the obscured screen regions on the device. Use of this method is only valid during the call to onUpdate().

Returns:

DataField.Obscurity — A WatchUi.DataField.OBSCURE_* value
Since:

API Level 1.0.0

initialize()
Constructor

Since:

API Level 1.0.0

onNextMultisportLeg() as Void
The device has transitioned to the next multisport leg.

This method is called when the device transitions to the next multisport leg.

Supported Devices:

[View devices]
Since:

API Level 3.0.0

onTimerLap() as Void
A lap event has occurred.

This method is called when a lap is added to the current activity. A notification is triggered after the lap record has been written to the FIT file.

Supported Devices:

[View devices]
Since:

API Level 1.3.0

onTimerPause() as Void
The activity timer is paused.

This method is called when the activity timer goes from a running state to a paused state. The paused state occurs when the auto-pause feature pauses the timer. If the activity timer is paused when the app is loaded, this event will run immediately after startup.

Supported Devices:

[View devices]
Since:

API Level 1.3.0

onTimerReset() as Void
The current activity has ended.

This method is called when the time has stopped and current activity is ended.

Supported Devices:

[View devices]
Since:

API Level 1.3.0

onTimerResume() as Void
The activity time has resumed.

This method is called when the activity timer goes from a paused state to a running state.

Supported Devices:

[View devices]
Since:

API Level 1.3.0

onTimerStart() as Void
The activity timer has started.

This method is called when the activity timer goes from a stopped state to a started state. If the activity timer is running when the app is loaded, this event will run immediately after startup.

Supported Devices:

[View devices]
Since:

API Level 1.3.0

onTimerStop() as Void
The activity timer has stopped.

This method is called when the activity timer goes from a running state to a stopped state.

Supported Devices:

[View devices]
Since:

API Level 1.3.0

onWorkoutStarted() as Void
The current workout is started.

This method is called when the a workout is started.

Supported Devices:

[View devices]
Since:

API Level 3.2.0

onWorkoutStepComplete() as Void
The current workout step is complete.

This method is called when the a workout step has been completed.

Supported Devices:

[View devices]
Since:

API Level 3.0.0

showAlert(alertView as WatchUi.DataFieldAlert) as Void
Show an alert.

Parameters:

alertView — (WatchUi.DataFieldAlert) — View to push
Only Toybox::WatchUi::DataFieldAlert is supported for this operation
Supported Devices:

[View devices]
Since:

API Level 3.2.0

Throws:

(Lang.OperationNotAllowedException) — Thrown if called from an app type other than data field
(Lang.UnexpectedTypeException) — Thrown if the view type is not DataFieldAlert


Class: Toybox.WatchUi.DataFieldAlert
Inherits:
Toybox.WatchUi.Viewshow all
Overview
Alert View for DataFields

Use this view for pushing alerts from a DataField

Since:

API Level 3.2.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
initialize()
Constructor.
Instance Method Details
initialize()
Constructor

Since:

API Level 3.2.0
Class: Toybox.WatchUi.KeyEvent
Inherits:
Toybox.Lang.Objectshow all
Overview
KeyEvent is an object sent to an InputDelegate when a physical button on the device is pressed.

See Also:
Toybox.WatchUi.InputDelegate
Example:

using Toybox.System;
using Toybox.WatchUi;

class InputDelegate extends WatchUi.BehaviorDelegate {
    function onKey(keyEvent) {
        System.println(keyEvent.getKey());  // e.g. KEY_MENU = 7
        System.println(keyEvent.getType()); // e.g. PRESS_TYPE_DOWN = 0
        return true;
    }
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Instance Method Summary
collapse
getKey() as WatchUi.Key
Get the key value of this event.
getType() as WatchUi.KeyPressType
Get the type of click event.
Instance Method Details
getKey() as WatchUi.Key
Get the key value of this event.

Returns:

WatchUi.Key — A WatchUi.KEY_* value
Since:

API Level 1.0.0

getType() as WatchUi.KeyPressType
Get the type of click event.

Returns:

WatchUi.KeyPressType — A WatchUi.PRESS_TYPE_* value
Since:

API Level 1.1.2

Class: Toybox.WatchUi.Layer
Inherits:
Toybox.Lang.Objectshow all
Overview
A representation of View Layer that will be drawn (bitblit) by system onto the screen during screen update, which include regular View update (onUpdate/onPartialUpdate) as well as animation playback if supported.

Since:

API Level 3.1.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Direct Known Subclasses
WatchUi.AnimationLayer

Typedef Summary
collapse
Options as { :locX as Lang.Numeric, :locY as Lang.Numeric, :width as Lang.Number, :height as Lang.Number, :colorDepth as Lang.Number, :visibility as Lang.Boolean, :identifier as Lang.Object }
Instance Method Summary
collapse
getDc() as Graphics.Dc or Null
Get the Graphics.Dc to draw on.
getId() as Lang.Object or Null
Layer identifier, can be null.
getX() as Lang.Numeric
Get X-axis absolute draw offset relative to the screen origin.
getY() as Lang.Numeric
Get Y-axis absolute draw offset relative to the screen origin.
initialize(options as Layer.Options or Null)
Constructor.
isVisible() as Lang.Boolean
setLocation(x as Lang.Numeric, y as Lang.Numeric) as Void
Set draw offset relative to the screen origin.
setVisible(visible as Lang.Boolean) as Void
Set visibility of the layer, if the layer hasn't been added to a view, or the view isn't on top of view stack, the value will be saved.
setX(x as Lang.Numeric) as Void
Set X-axis absolute draw offset relative to the screen origin.
setY(y as Lang.Numeric) as Void
Set Y-axis absolute draw offset relative to the screen origin.
Typedef Details
Options as { :locX as Lang.Numeric, :locY as Lang.Numeric, :width as Lang.Number, :height as Lang.Number, :colorDepth as Lang.Number, :visibility as Lang.Boolean, :identifier as Lang.Object }
Since:

API Level 3.1.0

Instance Method Details
getDc() as Graphics.Dc or Null
Get the Graphics.Dc to draw on.

Since:

API Level 3.1.0

getId() as Lang.Object or Null
Layer identifier, can be null

Returns:

Lang.Number, Lang.Object — the identifier of the layer, can be null
Since:

API Level 3.1.0

getX() as Lang.Numeric
Get X-axis absolute draw offset relative to the screen origin

Returns:

Lang.Number — X-axis absolute draw offset relative to the screen origin
Since:

API Level 3.1.0

getY() as Lang.Numeric
Get Y-axis absolute draw offset relative to the screen origin

Returns:

Lang.Number — Y-axis absolute draw offset relative to the screen origin
Since:

API Level 3.1.0

initialize(options as Layer.Options or Null)
Constructor

Parameters:

options — (Lang.Dictionary) — A Dictionary of options; can be null, which defaults to full screen layer
:locX — (Lang.Number) — The x coordinate of the top left corner of the layer (optional defaults to 0)
:locY — (Lang.Number) — The y coordinate of the top left corner of the layer (optional defaults to 0)
:width — (Lang.Number) — The width of the layers in pixels,
:height — (Lang.Number) — The height of the layers in pixels,
:colorDepth — (Lang.Number) — hidden option, Color depth in terms of bits/pixel, when missing, default to system value.
:visibility — (Lang.Boolean) — true if the layer is visible, otherwise false (optional, default to +true+)
:identifier — (Lang.Object) — unique object for identification (optional)
Since:

API Level 3.1.0

isVisible() as Lang.Boolean
Returns:

Lang.Boolean — true if the layer is visible otherwise false
Since:

API Level 3.1.0

setLocation(x as Lang.Numeric, y as Lang.Numeric) as Void
Set draw offset relative to the screen origin

Parameters:

x — (Lang.Number) — new x offset from screen origin
y — (Lang.Number) — new y offset from screen origin
Since:

API Level 3.1.0

setVisible(visible as Lang.Boolean) as Void
Set visibility of the layer, if the layer hasn't been added to a view, or the view isn't on top of view stack, the value will be saved.

Parameters:

visible — (Lang.Boolean) — true for visible (or to show), false for invisible (or to hide).
Since:

API Level 3.1.0

setX(x as Lang.Numeric) as Void
Set X-axis absolute draw offset relative to the screen origin

Parameters:

x — (Lang.Number) — new x offset from screen origin
Since:

API Level 3.1.0

setY(y as Lang.Numeric) as Void
Set Y-axis absolute draw offset relative to the screen origin

Parameters:

y — (Lang.Number) — new y offset from screen origin
Since:

API Level 3.1.0

Class: Toybox.WatchUi.Menu
Inherits:
Toybox.Lang.Objectshow all
Overview
A representation of an on-screen menu.

A Menu is a special View that presents the user with a list of options. After an option is selected, the registered onMenuItem() method will be called. While a Menu can be generated programmatically, they should generally be created as a resource.

A Menu is pushed using pushView(), which provides a MenuInputDelegate as the input delegate.

See Also:
Toybox.WatchUi.MenuInputDelegate
WatchUi.pushView()
Note:
The look and feel of a menu is device-specific.

Example:

Build a simple menu programmatically
using Toybox.WatchUi;

class MyBehaviorDelegate extends WatchUi.BehaviorDelegate {
    function initialize() {
        BehaviorDelegate.initialize();
    }

    function onMenu() {
        var menu = new WatchUi.Menu();
        var delegate;
        menu.setTitle("My Menu");
        menu.addItem("Item One", :one);
        menu.addItem("Item Two", :two);
        delegate = new MyMenuDelegate(); // a WatchUi.MenuInputDelegate
        WatchUi.pushView(menu, delegate, WatchUi.SLIDE_IMMEDIATE);
        return true;
    }
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Constant Summary
Constant Variables
Type	Name	Value	Since	Description
Type	MAX_SIZE	16	
API Level 1.0.0

The maximum number of allowed entries in a Menu.

Instance Method Summary
collapse
addItem(label as Lang.String or Lang.ResourceId, identifier as Lang.Symbol) as Void
Add an entry to a Menu.
setTitle(title as Lang.String or Lang.ResourceId) as Void
Set a Menu title.
Instance Method Details
addItem(label as Lang.String or Lang.ResourceId, identifier as Lang.Symbol) as Void
Add an entry to a Menu.

Parameters:

label — (Lang.String, Lang.ResourceId) — The item text as a String or string ResourceId
identifier — (Lang.Symbol) — A Symbol representing the Menu item value
Since:

API Level 1.0.0

setTitle(title as Lang.String or Lang.ResourceId) as Void
Set a Menu title.

Parameters:

title — (Lang.String, Lang.ResourceId) — The title text or a string ResourceId
Since:

API Level 1.0.0

Class: Toybox.WatchUi.Menu2
Inherits:
Toybox.WatchUi.Viewshow all
Overview
A representation of an on-screen menu. A Menu2 is a special View, similar to a Toybox::WatchUi::Menu, that presents the user with a list of options. A Menu2 offers more capabilities than a Toybox::WatchUi::Menu, like graphical titles, menu items that can be updated dynamically, and additional menu elements such as check boxes.

After an option is selected, the registered onSelect() method will be called. While a Menu2 can be generated programmatically, they should generally be created as a resource.

A Menu2 is pushed using pushView(), which provides a Menu2InputDelegate as the input delegate.

See Also:
Toybox.WatchUi.Menu2InputDelegate
Toybox.WatchUi.MenuItem
Toybox.WatchUi.BehaviorDelegate
WatchUi.pushView()
Note:
The look and feel of a Menu2 is device-specific.

Example:

Build a simple Menu2 programmatically
using Toybox.WatchUi;

class MyBehaviorDelegate extends WatchUi.BehaviorDelegate {
    function initialize() {
        BehaviorDelegate.initialize();
    }

    function onMenu() {
        var menu = new WatchUi.Menu2({:title=>"My Menu2"});
        var delegate;
        menu.addItem(
            new MenuItem(
                "Item 1 Label",
                "Item 1 subLabel",
                "itemOneId",
                {}
            )
        );
        menu.addItem(
            new MenuItem(
                "Item 2 Label",
                "Item 2 subLabel",
                "itemTwoId",
                {}
            )
        );
        delegate = new MyMenu2Delegate(); // a WatchUi.Menu2InputDelegate
        WatchUi.pushView(menu, delegate, WatchUi.SLIDE_IMMEDIATE);
        return true;
    }
}
Since:

API Level 3.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Direct Known Subclasses
WatchUi.CheckboxMenu, WatchUi.CustomMenu

Constant Summary
DividerType
Divider type for supported devices

Since:

API Level 5.0.1

Name	Value	Since	Description	See Also
DIVIDER_TYPE_DEFAULT	0	
API Level 5.0.1

Default divider type

DIVIDER_TYPE_ICON	1	
API Level 5.0.1

Icon divider type

Instance Method Summary
collapse
addItem(item as WatchUi.MenuItem) as Void
Add a MenuItem to a Menu2.
deleteItem(index as Lang.Number) as Lang.Boolean or Null
Delete a MenuItem from a Menu2.
findItemById(identifier as Lang.Object) as Lang.Number
Find a MenuItem by ID in a Menu2.
getIcon() as Graphics.BitmapType or WatchUi.Drawable or Null
Get the icon Retrieve the icon for this Menu2.
getItem(index as Lang.Number) as WatchUi.MenuItem or Null
Get a MenuItem from a Menu2.
initialize(options as { :title as Lang.String or Lang.ResourceId or WatchUi.Drawable, :footer as Lang.String or Lang.ResourceId or WatchUi.Drawable, :focus as Lang.Number, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId, :theme as WatchUi.MenuTheme or Null, :dividerType as Menu2.DividerType or Null } or Null)
Constructor.
setDividerType(divider as Menu2.DividerType or Null) as Void
Set or change the desired divider type.
setFocus(focus as Lang.Number or Null) as Void
Set the focus of a MenuItem in a Menu2.
setFooter(footer as Lang.String or Lang.ResourceId or WatchUi.Drawable or Null) as Void
Set a Menu2 footer.
setIcon(icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId or Null) as Void
Set the icon Set the icon to display in the subscreen area when the focused MenuItem does not have an icon.
setTheme(theme as WatchUi.MenuTheme or Null) as Void
Set the theme.
setTitle(title as Lang.String or Lang.ResourceId or WatchUi.Drawable or Null) as Void
Set a Menu2 title.
updateItem(item as WatchUi.MenuItem, index as Lang.Number) as Void
Update a MenuItem in a Menu2.
Instance Method Details
addItem(item as WatchUi.MenuItem) as Void
Add a MenuItem to a Menu2.

Parameters:

item — (WatchUi.MenuItem) — The MenuItem to add to the Menu2
May not be a CheckboxMenuItem
Since:

API Level 3.0.0

Throws:

(WatchUi.InvalidMenuItemTypeException) — Thrown if item is a CheckboxMenuItem
(Lang.UnexpectedTypeException) — Thrown if item is not a valid type
deleteItem(index as Lang.Number) as Lang.Boolean or Null
Delete a MenuItem from a Menu2.

Parameters:

index — (Lang.Number) — The index of the MenuItem that should be deleted from the Menu2.
Returns:

Toybox::Lang::Boolean true if the item exists, or null if the specified index it outside of the bounds of the menu items array.
Since:

API Level 3.0.0

findItemById(identifier as Lang.Object) as Lang.Number
Find a MenuItem by ID in a Menu2.

Parameters:

identifier — (Lang.Object) — The identifier for which to search
Returns:

Lang.Number — The index of the MenuItem assigned the supplied identifier
-1 if not found
Since:

API Level 3.0.0

getIcon() as Graphics.BitmapType or WatchUi.Drawable or Null
Get the icon

Retrieve the icon for this Menu2.

Supported Devices:

[View devices]
Returns:

Graphics.BitmapType, Lang.Symbol, WatchUi.Drawable — The icon
Since:

API Level 3.4.0

getItem(index as Lang.Number) as WatchUi.MenuItem or Null
Get a MenuItem from a Menu2.

Parameters:

index — (Lang.Number) — The index of the MenuItem to get
Returns:

WatchUi.MenuItem
Since:

API Level 3.0.0

initialize(options as { :title as Lang.String or Lang.ResourceId or WatchUi.Drawable, :footer as Lang.String or Lang.ResourceId or WatchUi.Drawable, :focus as Lang.Number, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId, :theme as WatchUi.MenuTheme or Null, :dividerType as Menu2.DividerType or Null } or Null)
Constructor

Note:
The :icon option is only used on ConnectIQ 3.4.0 devices with subscreen support.

Note:
The :theme option is only used on ConnectIQ 4.1.8 devices with menu theme support.

Note:
The :dividerType option is only used on ConnectIQ 5.0.1 devices with divider support.

Note:
The :footer option is only used on ConnectIQ 5.1.0 devices.

Parameters:

options — (Lang.Dictionary) — A Dictionary of options
Can be null
:title — (Lang.String, Lang.ResourceId, WatchUi.Drawable) — The menu title
:footer — (Lang.String, Lang.ResourceId, WatchUi.Drawable) — The menu footer
:focus — (Lang.Number) — The index of the MenuItem that should have initial focus
:icon — (Graphics.BitmapType, WatchUi.Drawable, Lang.ResourceId) — The icon to display in the subscreen area when the focused MenuItem does not have an icon.
:theme — (WatchUi.MenuTheme) — The menu theme, or null for no theme. Defaults to MENU_THEME_DEFAULT.
:dividerType — (Menu2.DividerType) — The divider type, Defaults to DIVIDER_TYPE_DEFAULT.
See Also:

Toybox.WatchUi.Menu2.setDividerType
Since:

API Level 3.0.0

setDividerType(divider as Menu2.DividerType or Null) as Void
Set or change the desired divider type.

If set to Menu2.DIVIDER_TYPE_ICON.

For IconMenuItem and CheckboxMenuItem, icon and checkbox will be rendered on the left side of the divider if item is MenuItem.MENU_ITEM_LABEL_ALIGN_LEFT or default aligned.

For ToggleMenuItem, toggle icon will be rendered on the left side of the divider, if item is MenuItem.MENU_ITEM_LABEL_ALIGN_LEFT aligned only.

Menu2.DIVIDER_TYPE_DEFAULT will be used if not set for devices that support divider, or null is passed.

Supported Devices:

[View devices]
Since:

API Level 5.0.1

Throws:

(WatchUi.InvalidValueException) — Thrown if divider is not an valid value.
(Lang.UnexpectedTypeException) — Thrown if divider is not a valid type.
setFocus(focus as Lang.Number or Null) as Void
Set the focus of a MenuItem in a Menu2.

Parameters:

focus — (Lang.Number) — The index of the MenuItem that should have focus
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if focus is not a valid type
setFooter(footer as Lang.String or Lang.ResourceId or WatchUi.Drawable or Null) as Void
Set a Menu2 footer.

Parameters:

footer — (Lang.String, Lang.ResourceId, WatchUi.Drawable) — The menu footer text, null, a string ResourceId, or a Drawable
Since:

API Level 5.1.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if footer is not a valid type
setIcon(icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId or Null) as Void
Set the icon

Set the icon to display in the subscreen area when the focused MenuItem does not have an icon. If this menu does not have an icon, the app icon will be shown instead.

Parameters:

icon — (Graphics.BitmapType, Lang.ResourceId, WatchUi.Drawable) — The icon
Supported Devices:

[View devices]
Since:

API Level 3.4.0

setTheme(theme as WatchUi.MenuTheme or Null) as Void
Set the theme

Parameters:

theme — (WatchUi.MenuTheme) — The theme for this menu.
Supported Devices:

[View devices]
Since:

API Level 4.1.8

setTitle(title as Lang.String or Lang.ResourceId or WatchUi.Drawable or Null) as Void
Set a Menu2 title.

Parameters:

title — (Lang.String, Lang.ResourceId, WatchUi.Drawable) — The menu title text, null, a string ResourceId, or a Drawable
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if title is not a valid type
updateItem(item as WatchUi.MenuItem, index as Lang.Number) as Void
Update a MenuItem in a Menu2.

Parameters:

item — (WatchUi.MenuItem) — The MenuItem to update
index — (Lang.Number) — The index of the MenuItem to update
Since:

API Level 3.0.0

Class: Toybox.WatchUi.Menu2InputDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
Menu2InputDelegate responds to a Menu2 selection.

This class should be extended to handle selected Menu2 items.

See Also:
Toybox.WatchUi.Menu2
Toybox.WatchUi.MenuItem
Example:

using Toybox.WatchUi;
using Toybox.System;

class MyMenu2InputDelegate extends WatchUi.Menu2InputDelegate {
    function initialize() {
        Menu2InputDelegate.initialize();
    }

    function onSelect(item) {
        System.println(item.getId());
    }
}
Since:

API Level 3.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
onBack() as Void
A Menu2 Back key was pressed.
onDone() as Void
A Menu2 Done item was selected.
onFooter() as Void
A CustomMenu footer was selected.
onNextPage() as Lang.Boolean
Represents the Next Page behavior.
onPreviousPage() as Lang.Boolean
Represents the Previous Page behavior.
onSelect(item as WatchUi.MenuItem) as Void
A Menu2 MenuItem was selected.
onTitle() as Void
A CustomMenu title was selected.
onWrap(key as WatchUi.Key) as Lang.Boolean
A Menu2 is preparing to wrap.
Instance Method Details
onBack() as Void
A Menu2 Back key was pressed. If this method is not overridden, it will pop the active view.

Since:

API Level 3.0.0

onDone() as Void
A Menu2 Done item was selected. This method is only triggered by a CheckboxMenu If this method is not overridden, it will pop the active view.

Since:

API Level 3.0.0

onFooter() as Void
A CustomMenu footer was selected.

This method is triggered on products with touch input when the user selects the footer area of a CustomMenu.

Note:
Prior to ConnectIQ API version 5.1.0, this function was only called on CustomMenu. It is now used for all Menu2 types.

Since:

API Level 3.0.0

onNextPage() as Lang.Boolean
Represents the Next Page behavior.

This is typically triggered when at the bottom of a Menu and the down button (KEY_DOWN) or a SWIPE_UP SwipeEvent input is received.

Returns:

Lang.Boolean — true if handled, otherwise false
Since:

API Level 5.1.0

onPreviousPage() as Lang.Boolean
Represents the Previous Page behavior.

This is typically triggered when at the top of a Menu and the up button (KEY_UP) or a SWIPE_DOWN SwipeEvent input is received.

Returns:

Lang.Boolean — true if handled, otherwise false
Since:

API Level 5.1.0

onSelect(item as WatchUi.MenuItem) as Void
A Menu2 MenuItem was selected.

Parameters:

item — (WatchUi.MenuItem) — The selected MenuItem.
Since:

API Level 3.0.0

onTitle() as Void
A CustomMenu title was selected.

This method is triggered on products with touch input when the user selects the title area of a CustomMenu.

Note:
Prior to ConnectIQ API version 5.1.0, this function was only called on CustomMenu. It is now used for all Menu2 types.

Since:

API Level 3.0.0

onWrap(key as WatchUi.Key) as Lang.Boolean
A Menu2 is preparing to wrap.

This method is triggered on button-based products when the user attempts to navigate off the end of a menu. If this method returns false the list will not wrap to the opposite end. If this method is not overridden, it will return true and allow the menu to wrap.

Parameters:

key — (WatchUi.Key) — The key from the WatchUi.KEY_* enumeration that is triggering the menu wrap.
Returns:

Lang.Boolean — true if wrap is allowed, false otherwise
Since:

API Level 3.0.0

Class: Toybox.WatchUi.MenuInputDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
MenuInputDelegate responds to a Menu selection.

This class should be extended to handle selected Menu items.

See Also:
Toybox.WatchUi.Menu
Example:

using Toybox.WatchUi;
using Toybox.System;

class MyMenuInputDelegate extends WatchUi.MenuInputDelegate {
    function initialize() {
        MenuInputDelegate.initialize();
    }

    function onMenuItem(item) {
        if (item == :item_1) {
            System.println("Item 1");
        } else if (item == :item_2) {
            System.println("Item 2");
        }
    }
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Instance Method Summary
collapse
onMenuItem(item as Lang.Symbol) as Void
A Menu item was chosen.
Instance Method Details
onMenuItem(item as Lang.Symbol) as Void
A Menu item was chosen.

This method is called when a Menu item has been selected, and receives the Menu item as an argument.

Parameters:

item — (Lang.Symbol) — The identifier of the chosen Menu item
Since:

API Level 1.0.0

Class: Toybox.WatchUi.MenuItem
Inherits:
Toybox.Lang.Objectshow all
Overview
A representation of a menu item in a Menu2.

A MenuItem is a element of a Menu2 View that represents one of the options in the menu. A MenuItem can be added to a Menu2 using the addItem() method.

See Also:
Toybox.WatchUi.Menu2
Since:

API Level 3.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Direct Known Subclasses
WatchUi.CheckboxMenuItem, WatchUi.CustomMenuItem, WatchUi.IconMenuItem, WatchUi.ToggleMenuItem

Constant Summary
Alignment
Since:

API Level 3.0.0

Name	Value	Since	Description	See Also
MENU_ITEM_LABEL_ALIGN_RIGHT	0	
API Level 3.0.0

Right align a MenuItem label

MENU_ITEM_LABEL_ALIGN_LEFT	1	
API Level 3.0.0

Left align a MenuItem label

Instance Method Summary
collapse
getIcon() as Graphics.BitmapType or WatchUi.Drawable or Null
Get the icon Retrieve the icon for this MenuItem.
getId() as Lang.Object or Null
Get a MenuItem identifier.
getLabel() as Lang.String
Get a MenuItem label.
getSubLabel() as Lang.String or Lang.Dictionary<Lang.Symbol, Lang.String or Null> or Null
Get a MenuItem substring label.
initialize(label as Lang.String or Lang.ResourceId, subLabel as Lang.String or Lang.ResourceId or Null, identifier as Lang.Object or Null, options as { :alignment as MenuItem.Alignment, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId } or Null)
Constructor.
setIcon(icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId or Null) as Void
Set the icon Set the icon displayed in the subscreen area when this MenuItem has the focus.
setLabel(label as Lang.String or Lang.ResourceId) as Void
Set a MenuItem label.
setSubLabel(subLabel as Lang.String or Lang.ResourceId or Null) as Void
Set a MenuItem substring label.
Instance Method Details
getIcon() as Graphics.BitmapType or WatchUi.Drawable or Null
Get the icon

Retrieve the icon for this MenuItem.

Supported Devices:

[View devices]
Returns:

Graphics.BitmapType, WatchUi.Drawable — The icon
Since:

API Level 3.4.0

getId() as Lang.Object or Null
Get a MenuItem identifier.

Returns:

Lang.Object — The identifier for the MenuItem
Since:

API Level 3.0.0

getLabel() as Lang.String
Get a MenuItem label.

Returns:

Lang.String — The text label for the MenuItem
Since:

API Level 3.0.0

getSubLabel() as Lang.String or Lang.Dictionary<Lang.Symbol, Lang.String or Null> or Null
Get a MenuItem substring label.

Returns:

Lang.String — The substring text label for the MenuItem
Since:

API Level 3.0.0

initialize(label as Lang.String or Lang.ResourceId, subLabel as Lang.String or Lang.ResourceId or Null, identifier as Lang.Object or Null, options as { :alignment as MenuItem.Alignment, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId } or Null)
Constructor

Note:
The :icon option is only used on ConnectIQ 3.4.0 devices with subscreen support.

Parameters:

label — (Lang.String, Lang.ResourceId) — The string label for the MenuItem
subLabel — (Lang.String, Lang.ResourceId) — The substring label for the MenuItem, which can be null
identifier — (Lang.Object) — The identifier for this MenuItem, which is typically a String
options — (Lang.Dictionary) — A Dictionary of options. Can be null
:alignment — (MenuItem.Alignment) — One of the WatchUi.MenuItem.MENU_ITEM_LABEL_ALIGN* values that indicates the text alignment for the menu item.
:icon — (Graphics.BitmapType, WatchUi.Drawable, Lang.ResourceId) — The icon displayed in the subscreen area when this MenuItem has the focus.
Since:

API Level 3.0.0

setIcon(icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId or Null) as Void
Set the icon

Set the icon displayed in the subscreen area when this MenuItem has the focus. If the provided icon is null, the icon from the Menu2 will be shown instead.

Parameters:

icon — (Graphics.BitmapType, Lang.ResourceId, WatchUi.Drawable) — The icon
Supported Devices:

[View devices]
Since:

API Level 3.4.0

setLabel(label as Lang.String or Lang.ResourceId) as Void
Set a MenuItem label.

Parameters:

label — (Lang.String, Lang.ResourceId) — The text label for the MenuItem
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if label is an invalid type, or if a ResourceId does not reference to a valid string resource
setSubLabel(subLabel as Lang.String or Lang.ResourceId or Null) as Void
Set a MenuItem substring label.

Parameters:

subLabel — (Lang.String, Lang.ResourceId) — The substring text label for the MenuItem, which can be null
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if label is an invalid type, or if a resource ID does not point to a valid string resource

Class: Toybox.WatchUi.ProgressBar
Inherits:
Toybox.Lang.Objectshow all
Overview
A representation of an on-screen progress bar.

A ProgressBar is a special View that presents the user with a progress indicator. These can display a string and either an incremental progress bar from 0-100% or a "busy" indicator. A ProgressBar is pushed using pushView(), which provides either null or a BehaviorDelegate. If a BehaviorDelegate is provided, the onBack() method will be called if Back button is pressed while the ProgressBar is displayed.

Note:
The look and feel of a progress bar is device-specific.

Example:

Create a simple busy progress indicator
using Toybox.WatchUi;

class MyProgressDelegate extends Ui.BehaviorDelegate {
    function initialize() {
        BehaviorDelegate.initialize();
    }

    function onBack() {
        return true;
    }
}

class MyBehaviorDelegate extends Ui.BehaviorDelegate {
    var progressBar;

    function initialize() {
        BehaviorDelegate.initialize();
    }

    function onSelect() {
        progressBar = new WatchUi.ProgressBar(
            "Processing...",
            null
        );
        Ui.pushView(
            progressBar,
            new MyProgressDelegate(),
            Ui.SLIDE_DOWN
        );
        return true;
    }
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
initialize(displayString as Lang.String, startValue as Lang.Float or Null)
Constructor.
setDisplayString(displayString as Lang.String) as Void
Set the string to display on the ProgressBar.
setProgress(progressValue as Lang.Float or Null) as Void
Set the value of the ProgressBar.
Instance Method Details
initialize(displayString as Lang.String, startValue as Lang.Float or Null)
Constructor

Parameters:

displayString — (Lang.String) — The string to display on the ProgressBar
startValue — (Lang.Float) — The initial value for the ProgressBar:
An increment from 0 to 100
null for "busy"
Since:

API Level 1.0.0

setDisplayString(displayString as Lang.String) as Void
Set the string to display on the ProgressBar.

Parameters:

displayString — (Lang.String) — The string to display on the ProgressBar
Since:

API Level 1.0.0

setProgress(progressValue as Lang.Float or Null) as Void
Set the value of the ProgressBar.

Parameters:

progressValue — (Lang.Float) — The current value of the ProgressBar:
An increment from 0 to 100
null for "busy"
Since:

API Level 1.0.0

Class: Toybox.WatchUi.SimpleDataField
Inherits:
Toybox.WatchUi.DataFieldshow all
Overview
Create a SimpleDataField.

A SimpleDataField is a special View that automatically provides Activity.Info once per second via the compute() method.

Just like in a DataField, a SimpleDataField automatically provides Activity.Info once per second via the compute() method. In exchange for the flexibility offered in a DataField, all field layout is handled automatically in a SimpleDataField.

A SimpleDataField requires two items:

A compute() method should return the value to be displayed by the SimpleDataField. Allowed types are Number, Float, Long, Double, Duration, and String.

A "label" variable, which should be assigned a String label for the field.

See Also:
Toybox.WatchUi.DataField
Activity.Info
Note:
The system will call the onUpdate() method inherited from View when a Data Field is displayed by the system. Because compute() and onUpdate() are asynchronous, there is no guarantee that compute() will be called before onUpdate(). For this reason, variables should never be initialized in compute().

Example:

A SimpleDataField that displays current heart rate
using Toybox.WatchUi;

class MySimpleHRField extends WatchUi.SimpleDataField {

    // Set the label of the field here
    function initialize() {
        SimpleDataField.initialize();
        label = "My Current HR";
    }

    // Specify the Activity info to display in the field here
    function compute(info) {
        return info.currentHeartRate;
    }
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Member Summary
collapse
label as Lang.String
The field label String.
Instance Method Summary
collapse
compute(info as Activity.Info) as Lang.Numeric or Time.Duration or Lang.String or Null
Retrieve Activity.Info in a SimpleDataField.
initialize()
Constructor.
Instance Attribute Details
var label as Lang.String
The field label String.

Since:

API Level 1.0.0

Instance Method Details
compute(info as Activity.Info) as Lang.Numeric or Time.Duration or Lang.String or Null
Retrieve Activity.Info in a SimpleDataField.

This method is called once per second and automatically provides Activity.Info to the SimpleDataField object for display or additional computation. It is necessary to override compute() when implementing a SimpleDataField. The value to be displayed in the field must be returned by this method.

Parameters:

info — (Activity.Info) — The updated Activity.Info object
Example:

function compute(info) {
    return info.currentHeartRate;
}
Returns:

Lang.Number, Lang.Long, Lang.Float, Lang.Double, Time.Duration, Lang.String, null — The value to be displayed in the field or null
See Also:

Activity.Info
Since:

API Level 1.0.0

initialize()
Constructor

Since:

API Level 1.0.0

Class: Toybox.WatchUi.ToggleMenuItem
Inherits:
Toybox.WatchUi.MenuItemshow all
Overview
A representation of a toggle item in a Menu2.

A ToggleMenuItem is a element of a Menu2 View that represents one of the options in the menu, and includes an indicator on the menu item that appears in one of two states: enabled or disabled. When selected, the state of the ToggleMenuItem changes to the state opposite of the state prior to the onSelect delegate callback invocation.

A ToggleMenuItem can be added to a Menu2 using the addItem() method.

See Also:
Toybox.WatchUi.Menu2
Toybox.WatchUi.MenuItem
Since:

API Level 3.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
getSubLabel() as Lang.String or Lang.Dictionary<Lang.Symbol, Lang.String or Null> or Null
Get a ToggleMenuItem label substring.
initialize(label as Lang.String or Lang.ResourceId, subLabel as Lang.String or Lang.ResourceId or { :enabled as Lang.String or Lang.ResourceId or Null, :disabled as Lang.String or Lang.ResourceId or Null } or Null, identifier as Lang.Object or Null, enabled as Lang.Boolean, options as { :alignment as MenuItem.Alignment, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId } or Null)
Constructor.
isEnabled() as Lang.Boolean
Get a ToggleMenuItem state.
setEnabled(enabled as Lang.Boolean) as Void
Set a ToggleMenuItem state.
setSubLabel(subLabel as Lang.String or Lang.ResourceId or { :enabled as Lang.String or Lang.ResourceId or Null, :disabled as Lang.String or Lang.ResourceId or Null } or Null) as Void
Set a ToggleMenuItem label substring.
Instance Method Details
getSubLabel() as Lang.String or Lang.Dictionary<Lang.Symbol, Lang.String or Null> or Null
Get a ToggleMenuItem label substring.

Returns:

Lang.String, Lang.Dictionary — The substring text label for the ToggleMenuItem
Since:

API Level 3.0.0

initialize(label as Lang.String or Lang.ResourceId, subLabel as Lang.String or Lang.ResourceId or { :enabled as Lang.String or Lang.ResourceId or Null, :disabled as Lang.String or Lang.ResourceId or Null } or Null, identifier as Lang.Object or Null, enabled as Lang.Boolean, options as { :alignment as MenuItem.Alignment, :icon as Graphics.BitmapType or WatchUi.Drawable or Lang.ResourceId } or Null)
Constructor

Note:
The :icon option is only used on ConnectIQ 3.4.0 devices with subscreen support.

Parameters:

label — (Lang.String, Lang.ResourceId) — The string label for the ToggleMenuItem
subLabel — (Lang.String, Lang.ResourceId, Lang.Dictionary) — The substring label for the item or a dictionary of toggle states mapped to sub-label strings, which can be null
:enabled — (Lang.String, Lang.ResourceId) — The string displayed when the ToggleMenuItem is enabled, or null
:disabled — (Lang.String, Lang.ResourceId) — The string displayed when the ToggleMenuItem is disabled, or null
identifier — (Lang.Object) — The identifier for this ToggleMenuItem, which is typically a String
enabled — (Lang.Boolean) — The initial state of the ToggleMenuItem; enabled if true, disabled if false
options — (Lang.Dictionary) — A Dictionary of options
:alignment — (MenuItem.Alignment) — A WatchUi.MenuItem.MENU_ITEM_LABEL_ALIGN_* constant representing the label alignment, which defaults to the system default for toggle menu items if not specified.
:icon — (Graphics.BitmapType, WatchUi.Drawable, Lang.ResourceId) — for the subscreen area when the menu item is in focus
Since:

API Level 3.0.0

isEnabled() as Lang.Boolean
Get a ToggleMenuItem state.

Returns:

Lang.Boolean — The current state of the ToggleMenuItem
Since:

API Level 3.0.0

setEnabled(enabled as Lang.Boolean) as Void
Set a ToggleMenuItem state.

Parameters:

enabled — (Lang.Boolean) — The intended state of the ToggleMenuItem; enabled if true, disabled if false
Since:

API Level 3.0.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if enabled is not a valid type
setSubLabel(subLabel as Lang.String or Lang.ResourceId or { :enabled as Lang.String or Lang.ResourceId or Null, :disabled as Lang.String or Lang.ResourceId or Null } or Null) as Void
Set a ToggleMenuItem label substring.

Parameters:

subLabel — (Lang.String, Lang.ResourceId, Lang.Dictionary) — The substring label for the item or a dictionary of toggle states mapped to sub-label strings, which can be null
:enabled — (Lang.String) — The string displayed when the ToggleMenuItem is enabled, or null
:disabled — (Lang.String) — The string displayed when the ToggleMenuItem is disabled, or null
Since:

API Level 3.0.0

Class: Toybox.WatchUi.View
Inherits:
Toybox.Lang.Objectshow all
Overview
A View is an object that represents a page within an app.

An app may have multiple View objects representing things like menus and other app states. Each View contains a Layout, which in turn contain Drawable objects, such as Bitmaps and Text. View objects also handle the life cycle of each app, which varies depending on the app type:

Widgets and Watch Apps
onLayout() → onShow() → onUpdate() → onHide()

Watch Faces
onLayout() → onShow() → onUpdate()

Data Fields
onLayout() → onShow() → onUpdate()

If the size of the data field has changed since the last onUpdate(), onLayout() will be called prior to onUpdate(). However, onLayout(), onShow(), and onUpdate() are not called for SimpleDataField objects.

See Also:
Toybox.WatchUi.Drawable
Example:

A basic widget View class definition
using Toybox.WatchUi;

class MyWidgetView extends WatchUi.View {
    function initialize() {
        View.initialize();
    }

    // Resources are loaded here
    function onLayout(dc) {
        setLayout(Rez.Layouts.MainLayout(dc));
    }

    // onShow() is called when this View is brought to the foreground
    function onShow() {
    }

    // onUpdate() is called periodically to update the View
    function onUpdate(dc) {
        View.onUpdate(dc);
    }

    // onHide() is called when this View is removed from the screen
    function onHide() {
    }
}
Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Direct Known Subclasses
WatchUi.DataField, WatchUi.DataFieldAlert, WatchUi.GlanceView, WatchUi.MapView, WatchUi.Menu2, WatchUi.Picker, WatchUi.WatchFace

Typedef Summary
collapse
ActionMenuIndicatorOptions as { :enabled as Lang.Boolean }
ControlBarOptions as { :leftButton as WatchUi.ControlBarLeftButton, :title as Lang.String, :rightButton as WatchUi.ControlBarRightButton }
Instance Method Summary
collapse
addLayer(layer as WatchUi.Layer) as Void
Add a WatchUi.Layer on the top of view's layer stack.
clearLayers() as Void
Clear all layers that are added to the view.
findDrawableById(identifier as Lang.Object) as WatchUi.Drawable or Null
Find a Drawable by its ID.
getLayerIndex(layer as WatchUi.Layer) as Lang.Number
Return the index of the layer from the bottom of the view layer stack.
getLayers() as Lang.Array<WatchUi.Layer> or Null
Get a copy of the layer stack currently added to the view, sorted by the drawing order, i.e.
initialize()
Constructor.
insertLayer(layer as WatchUi.Layer, idx as Lang.Number) as Void
Insert the layer at the given index in the layer stack, this will stop animation playback.
onHide() as Void
Hide the View.
onLayout(dc as Graphics.Dc) as Void
The entry point for the View.
onShow() as Void
Show the View.
onUpdate(dc as Graphics.Dc) as Void
Update the View.
removeLayer(layer as WatchUi.Layer) as Lang.Boolean
Remove a layer from the view layer stack, this will stop animation playback.
setActionMenuIndicator(options as View.ActionMenuIndicatorOptions or Null) as Void
Set action menu indicator options for this view.
setClockHandPosition(options as { :clockState as WatchUi.AnalogClockState, :hour as Lang.Number or Null, :minute as Lang.Number or Null }) as Lang.Boolean
Set the clock hands position.
setControlBar(options as View.ControlBarOptions or Null) as Void
Set control bar options for this view.
setKeyToSelectableInteraction(enable as Lang.Boolean) as Void
Enter Selectable interaction mode.
setLayout(layout as Lang.Array<WatchUi.Drawable> or Null) as Void
Set the layout for the View.
Typedef Details
ActionMenuIndicatorOptions as { :enabled as Lang.Boolean }
Since:

API Level 1.0.0

ControlBarOptions as { :leftButton as WatchUi.ControlBarLeftButton, :title as Lang.String, :rightButton as WatchUi.ControlBarRightButton }
Since:

API Level 1.0.0

Instance Method Details
addLayer(layer as WatchUi.Layer) as Void
Add a WatchUi.Layer on the top of view's layer stack. Users do not need to draw the layer on the screen manually, instead, once a layer is added to the view, the system will draw all layers during screen updates which include View update (e.g. onUpdate/onPartialUpdate) and animation playback.

Disabled for DataFiled and Background Apps

Parameters:

layer — (WatchUi.Layer) — a WatchUi.Layer object to add
Since:

API Level 3.1.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if the layer is not a WatchUi.Layer
clearLayers() as Void
Clear all layers that are added to the view

Since:

API Level 3.1.0

findDrawableById(identifier as Lang.Object) as WatchUi.Drawable or Null
Find a Drawable by its ID.

A common use for this method is to get layout information to format dynamic content, such as a string that updates at runtime.

Parameters:

identifier — (Lang.Object) — The identifier of the Drawable to find
Example:

Formatting the clock time as centered, blue text
// The layout.xml file contents:
// <layout id="WatchFace">
//      <label id="TimeLabel" x="center" y="center" font="Graphics.FONT_LARGE" justification="Graphics.TEXT_JUSTIFY_CENTER" color="Graphics.COLOR_BLUE" />
// </layout>

using Toybox.Graphics;
using Toybox.Lang;
using Toybox.System;
using Toybox.WatchUi.View;

var clockTime = System.getClockTime();
var timeString = Lang.format(
    "$1$:$2$",
    [clockTime.hour, clockTime.min.format("%02d")]
);
var view = View.findDrawableById("TimeLabel");
view.setText(timeString);
Returns:

WatchUi.Drawable — A Drawable if found, otherwise null
See Also:

System.getClockTime()
Since:

API Level 1.0.0

getLayerIndex(layer as WatchUi.Layer) as Lang.Number
Return the index of the layer from the bottom of the view layer stack

Parameters:

layer — a WatchUi.Layer a layer object
Returns:

Lang.Number — index of the layer from the bottom of the layer stack
Since:

API Level 3.1.0

getLayers() as Lang.Array<WatchUi.Layer> or Null
Get a copy of the layer stack currently added to the view, sorted by the drawing order, i.e. from the bottom to the top.

Returns:

Lang.Array — an array of WatchUi.Layer or null
Since:

API Level 3.1.0

initialize()
Constructor

Since:

API Level 2.1.0

insertLayer(layer as WatchUi.Layer, idx as Lang.Number) as Void
Insert the layer at the given index in the layer stack, this will stop animation playback.

Parameters:

layer — (WatchUi.Layer) — a layer to insert.
idx — (Lang.Number) — position in the layer stack to insert layer.
Since:

API Level 3.1.0

onHide() as Void
Hide the View.

This is called before the View is removed from the foreground. This occurs when a new View object is pushed on top of the current one, when the current View is popped, or when the app is closed. Resources should be freed from memory at this point if the current View will be left on the page stack.

Since:

API Level 1.0.0

onLayout(dc as Graphics.Dc) as Void
The entry point for the View.

onLayout() is called before the View is shown to load resources and set up the layout of the View.

Parameters:

dc — (Graphics.Dc) — The device context
Since:

API Level 1.0.0

onShow() as Void
Show the View.

This is called when the View is brought into the foreground. Resources should be loaded into system memory for use in the View at this point.

Since:

API Level 1.0.0

onUpdate(dc as Graphics.Dc) as Void
Update the View.

This is called when a View is brought to the foreground, after the call to onShow(). While a View is active, this method is generally used to update dynamic content in the View. There are also some special cases when it will be invoked:

On WatchUi.requestUpdate() calls within Widgets and Watch Apps

Once per minute in Watch Faces when in low power mode

Once per second in Watch Faces when in high power mode

Once per second in Data Fields

At an increased rate while an animation is active

More than one call to onUpdate() may occur during View transitions

If a class that extends View does not implement this function then any Drawable objects contained in the View will automatically be drawn.

Parameters:

dc — (Graphics.Dc) — The device context
See Also:

WatchFace.onPartialUpdate()
Since:

API Level 1.0.0

removeLayer(layer as WatchUi.Layer) as Lang.Boolean
Remove a layer from the view layer stack, this will stop animation playback.

Parameters:

layer — a WatchUi.Layer to remove from the layer stack.
Returns:

Lang.Boolean — true, if layer is removed successfully, otherwise false
Since:

API Level 3.1.0

setActionMenuIndicator(options as View.ActionMenuIndicatorOptions or Null) as Void
Set action menu indicator options for this view. If enabled, BehaviorDelegate.onActionMenu or PickerDelegate.onActionMenu will be called when the action menu is pushed. Supported view types are WatchUi.View, WatchUi.MapView, WatchUi.MapTrackView and WatchUi.Picker. Ignored when called on other view types.

Parameters:

options — (Lang.Dictionary) — Optional parameters for action menu indicator settings. If null, the action menu indicator will be disabled.
:enabled — (Lang.Boolean) — The flag to enable or disable action menu indicator.
Supported Devices:

[View devices]
Since:

API Level 5.1.1

Throws:

(Lang.InvalidValueException) — Thrown if one or more of the specified options is not valid for the view type.
setClockHandPosition(options as { :clockState as WatchUi.AnalogClockState, :hour as Lang.Number or Null, :minute as Lang.Number or Null }) as Lang.Boolean
Set the clock hands position.

Parameters:

options — (Lang.Dictionary) — Options for setting the analog clock state.
:clockState — (WatchUi.AnalogClockState) — An ANALOG_CLOCK_STATE_* value for the clock state
:hour — (Lang.Number) — Position for the hour hand in degrees clockwise from the 12 o'clock position
:minute — (Lang.Number) — Position for the minute hand in degrees clockwise from the 12 o'clock position
Supported Devices:

[View devices]
Returns:

Lang.Boolean — true if the request to change the analog hands was successful, false otherwise.
Since:

API Level 3.3.0

Throws:

(Lang.InvalidValueException) — Thrown if invalid or no value is passed in for :clockState.
(Lang.InvalidValueException) — Thrown if no :hour and :minute values are specified for the :clockState value of ANALOG_CLOCK_STATE_HOLDING.
setControlBar(options as View.ControlBarOptions or Null) as Void
Set control bar options for this view.

Use of this method has many restrictions.

With View, the control bar can be hidden by passing null. If options is non-null, the :leftButton option must be provided. All values for CONTROL_BAR_RIGHT_BUTTON_* and CONTROL_BAR_RIGHT_BUTTON_* are allowed.

With Menu2 and CustomMenu, the options parameter cannot be null; the control bar is always shown. The :leftButton option must be set to CONTROL_BAR_LEFT_BUTTON_BACK. The :rightButton option may be null, for no button, or CONTROL_BAR_RIGHT_BUTTON_ACCEPT.

Attempting to call this method on any other class derived from View, or with an unsupported option for the given view type, will result in an exception.

Note:
Control bar visibility changes made from onLayout or onUpdate will result in an exception.

Parameters:

options — (Lang.Dictionary) — Optional parameters for control bar. If null, the control bar will be hidden.
:leftButton — (WatchUi.ControlBarLeftButton) — The icon to use for the left button. Must be a CONTROL_BAR_LEFT_BUTTON_* value.
:rightButton — (WatchUi.ControlBarRightButton) — The icon to use for the right button. Must be a CONTROL_BAR_RIGHT_BUTTON_* value. If the value is null or not provided, no button will be shown.
:title — (Lang.String) — The title to display in the control bar. If the view is of type Menu2, the Menu2 title will be given priority and will be displayed in the control bar. If no title is specified, the application name will be used.
Supported Devices:

[View devices]
Since:

API Level 4.1.2

Throws:

(Lang.OperationNotAllowedException) — Thrown if called on a view type that does not support control bar changes, or if called from onLayout or onUpdate.
(Lang.InvalidValueException) — Thrown if one or more of the specified options is not valid for the view type.
setKeyToSelectableInteraction(enable as Lang.Boolean) as Void
Enter Selectable interaction mode.

When enabled, physical buttons may be used to cycle through on-screen Selectable objects. The first registered Selectable in the current layout will be highlighted initially.

Parameters:

enable — (Lang.Boolean) — Set to true if the mode should be enabled, otherwise false
Example:

Toggle the Selectable interaction mode with the Menu button
var selectableMode = false;
function onMenu() {
    selectableMode = !selectableMode;
    // currentView is a View containing Selectable objects
    currentView.setKeyToSelectableInteraction(selectableMode);
    return true;
}
Since:

API Level 2.1.0

Throws:

(Lang.SymbolNotAllowedException) — Thrown if called from a data field app
setLayout(layout as Lang.Array<WatchUi.Drawable> or Null) as Void
Set the layout for the View.

Set the array of Drawable objects to be managed by this View. The specified Drawables will be:

Drawn automatically via calls to onUpdate()

Searched via calls to findDrawableById()

Parameters:

layout — (Lang.Array) — An array of Drawables or null.
Since:

API Level 1.0.0

Class: Toybox.WatchUi.ViewLoop
Inherits:
Toybox.Lang.Objectshow all
Overview
An object representing the view loop with a collection of scrollable views.

Since:

API Level 3.4.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Constant Summary
Direction
Specifies the direction to transition views

Since:

API Level 3.4.0

Name	Value	Since	Description	See Also
DIRECTION_NEXT	0	
API Level 3.4.0

Loop in the forward direction

DIRECTION_PREVIOUS	1	
API Level 3.4.0

Loop in the backward direction

Instance Method Summary
collapse
changeView(direction as ViewLoop.Direction) as Lang.Boolean
Change the view to the next/previous one in the view loop based on the direction and display the page indicator after transitioning.
initialize(factory as WatchUi.ViewLoopFactory, options as { :page as Lang.Number, :wrap as Lang.Boolean, :color as Graphics.ColorType } or Null)
Constructor for the ViewLoop.
Instance Method Details
changeView(direction as ViewLoop.Direction) as Lang.Boolean
Change the view to the next/previous one in the view loop based on the direction and display the page indicator after transitioning.

Parameters:

direction — (ViewLoop.Direction) — The direction in which to change page to
Returns:

Lang.Boolean — true if view is changed, otherwise false, e.g. reached the start/end of of non-wrapping loop.
Since:

API Level 3.4.0

Throws:

(Lang.OperationNotAllowedException) — Thrown when the view loop is not an active page for the app.
initialize(factory as WatchUi.ViewLoopFactory, options as { :page as Lang.Number, :wrap as Lang.Boolean, :color as Graphics.ColorType } or Null)
Constructor for the ViewLoop

Parameters:

factory — (WatchUi.ViewLoopFactory) — A factory object for the view loop to retrieve view and delegates managed with in this view loop
options — (Lang.Dictionary) — Options for this view loop object
:page — (Lang.Number) — initial page index for the view loop. The default value is 0.
:wrap — (Lang.Boolean) — if wrapping through the pages is allowed The default value is true.
:color — (Graphics.ColorType) — accent color for the page indicator. The :color option may be ignored if the device does not support accent colors.
Since:

API Level 3.4.0

Throws:

(Lang.ValueOutOfBoundsException) — Thrown if ViewLoopFactory returns a size less than or equal to 0.
(Lang.ValueOutOfBoundsException) — Thrown if Number :page option value is negative or greater than the value returned by the ViewLoopFactory

Class: Toybox.WatchUi.ViewLoopDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
A delegate object for the view loop. The next and previous events generated by the system are passed to the delegate object when ViewLoop is active for the app.

Since:

API Level 3.4.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
initialize(viewLoop as WatchUi.ViewLoop)
Constructor for the delegate.
onNextView() as Lang.Boolean
Represents the next page behavior.
onPreviousView() as Lang.Boolean
Represents the previous page behavior.
Instance Method Details
initialize(viewLoop as WatchUi.ViewLoop)
Constructor for the delegate

Parameters:

viewLoop — (WatchUi.ViewLoop) — Object that manages the collection of views
Since:

API Level 3.4.0

onNextView() as Lang.Boolean
Represents the next page behavior.

This is typically triggered by the down button (KEY_DOWN) or by a SWIPE_UP SwipeEvent on a touch screen.

Returns:

Lang.Boolean — true if handled, otherwise false
Since:

API Level 3.4.0

onPreviousView() as Lang.Boolean
Represents the previous page behavior.

This is typically triggered by the up button (KEY_UP) or by a SWIPE_DOWN SwipeEvent on a touch screen.

Returns:

Lang.Boolean — true if handled, otherwise false
Since:

API Level 3.4.0

Class: Toybox.WatchUi.ViewLoopFactory
Inherits:
Toybox.Lang.Objectshow all
Overview
A factory object for view/delegate instances, used by ViewLoop

Since:

API Level 3.4.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Typedef Summary
collapse
Delegates as WatchUi.BehaviorDelegate or WatchUi.Menu2InputDelegate
Delegate types that can be provided by a ViewLoopFactory.
Views as WatchUi.View
View types that can be provided by a ViewLoopFactory.
Instance Method Summary
collapse
getSize() as Lang.Number
Return the number of view/delegate pairs that are managed by this factory.
getView(page as Lang.Number) as [ ViewLoopFactory.Views ] or [ ViewLoopFactory.Views, ViewLoopFactory.Delegates ]
This function will be called by the system to retrieve a view/delegate pair for the page at the given index.
Typedef Details
Delegates as WatchUi.BehaviorDelegate or WatchUi.Menu2InputDelegate
Delegate types that can be provided by a ViewLoopFactory

Since:

API Level 3.4.0

Views as WatchUi.View
View types that can be provided by a ViewLoopFactory

Since:

API Level 3.4.0

Instance Method Details
getSize() as Lang.Number
Return the number of view/delegate pairs that are managed by this factory

Returns:

Lang.Number — total number of views for this factory
Since:

API Level 3.4.0

getView(page as Lang.Number) as [ ViewLoopFactory.Views ] or [ ViewLoopFactory.Views, ViewLoopFactory.Delegates ]
This function will be called by the system to retrieve a view/delegate pair for the page at the given index

Note:
This method must be overridden in derived classes. If called, this function will cause the application to crash.

Note:
Menu2 and Menu2InputDelegate support added for API version 5.1.0.

Parameters:

page — (Lang.Number) — Index for the view/delegate pair
Returns:

Lang.Array — An Array containing a View and an optional Delegate.
Since:

API Level 3.4.0

Class: Toybox.WatchUi.WatchFace
Inherits:
Toybox.WatchUi.Viewshow all
Overview
Create a Watch Face that supports exiting/entering low power mode.

A WatchFace is a special View that provides notifications when the device changes power states.

A WatchFace will run in a high power mode for a short period when responding to a gesture (i.e., raising the watch to check the time) or when returning to the watch face from another application. While in high power mode, the watch face will perform full screen updates every second via calls to onUpdate(), and the application will have access to timers and animations.

After this period in high power mode (typically about ten seconds), the system will call onEnterSleep() to notify the application that it is preparing to enter low power mode.

During low power mode the system will call onUpdate() at the top of every minute. If partial update support is available, the onPartialUpdate() method will be called for the first 59 seconds of every minute. The application will not have access to timers or animations while in low power mode.

When a gesture occurs while running in low power mode the system will call onExitSleep() to notify the application that the transition to high power mode has occurred.

The initial view of a watch face application must extend WatchFace.

Since:

API Level 1.0.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Supported Devices:

[View devices]
Instance Method Summary
collapse
initialize()
Constructor.
onEnterSleep() as Void
The device is entering low power mode.
onExitSleep() as Void
The device is exiting low power mode.
onPartialUpdate(dc as Graphics.Dc) as Void
Update a portion of the screen.
Instance Method Details
initialize()
Constructor

Since:

API Level 1.0.0

onEnterSleep() as Void
The device is entering low power mode.

Terminate any active timers and prepare for once-per-minute updates.

See Also:

Toybox.WatchUi.WatchFace
Since:

API Level 1.0.0

onExitSleep() as Void
The device is exiting low power mode.

Timers and animations may be started here in preparation for once-per-second updates.

See Also:

Toybox.WatchUi.WatchFace
Since:

API Level 1.0.0

onPartialUpdate(dc as Graphics.Dc) as Void
Update a portion of the screen.

Partial updates can be used to update a small part of the screen to allow for Always On Watch Faces.

This method is called each second as long as the device power budget is not exceeded. It is important to update as small of a portion of the display as possible in this method to avoid exceeding the allowed power budget. To do this, the application must set the clipping region for the Graphics.Dc object using the setClip() method. Calls to System.println() and System.print() will not execute on devices when this function is being invoked, but can be used in the device simulator.

If the call to this method exceeds the power budget of the device, the partial update will not draw and a call to onPowerBudgetExceeded() is made to report the limits that were exceeded.

Note:
See the Analog sample distributed with the SDK for an example of onPartialUpdate() using clipping regions

Parameters:

dc — (Graphics.Dc) — The device context
Supported Devices:

[View devices]
See Also:

Toybox.WatchUi.WatchFaceDelegate
WatchFaceDelegate.onPowerBudgetExceeded()
View.onUpdate()
Since:

API Level 2.3.0

Class: Toybox.WatchUi.WatchFaceDelegate
Inherits:
Toybox.Lang.Objectshow all
Overview
Receive events on a Watch Face.

See Also:
Toybox.WatchUi.WatchFace
Since:

API Level 2.3.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Instance Method Summary
collapse
getComplicationDrawable(complication as WatchFaceConfig.ComplicationRef) as WatchUi.Drawable or WatchUi.ComplicationDrawableRef or Null
Get a Drawable for highlighting purposes.
onPowerBudgetExceeded(powerInfo as WatchUi.WatchFacePowerInfo) as Void
Handle a partial update exceeding the power budget.
onPress(clickEvent as WatchUi.ClickEvent) as Lang.Boolean
Called when user does a touch and hold.
onTap(clickEvent as WatchUi.ClickEvent) as Lang.Boolean
A screen tap event has occurred.
onWatchFaceConfigEdited(options as { :configId as WatchFaceConfig.Id, :type as WatchUi.WatchFaceConfigType or Null, :committed as Lang.Boolean }) as Void
A watchface config change has occurred.
setSelectedComplication(complicationIdentifier as Lang.Number) as Void
Set the selected complication field.
Instance Method Details
getComplicationDrawable(complication as WatchFaceConfig.ComplicationRef) as WatchUi.Drawable or WatchUi.ComplicationDrawableRef or Null
Get a Drawable for highlighting purposes.

Called by system to get a Drawable for the given complication field for highlighting purposes. Only available in WatchFace config mode. Animation will be easing around the center of the Drawable. The Dc object passed to the Drawable.draw function shares the same origin as screen, e.g. at [0, 0], so it's aligned with the drawable coordinates for convenience.

Parameters:

complication — (Complication) — The complication field to get the highlight drawable for.
Supported Devices:

[View devices]
Returns:

WatchUi.Drawable, WatchUi.ComplicationDrawableRef — The drawable that can be animated for highlighting purposes or null. In case of Drawable type, the bounding box is marked by the locX and locY as the top left corner, and the width and height as the size. In case of ComplicationDrawableRef, bounding box or other boundary type must be specified explictly.
See Also:

Toybox.Application.AppBase.onStart
Since:

API Level 5.1.0

onPowerBudgetExceeded(powerInfo as WatchUi.WatchFacePowerInfo) as Void
Handle a partial update exceeding the power budget.

If the onPartialUpdate() callback of the associated WatchFace exceeds the power budget of the device, this method will be called with information about the limits that were exceeded.

Parameters:

powerInfo — (WatchUi.WatchFacePowerInfo)
See Also:

Toybox.WatchUi.WatchFace
onPartialUpdate()
Since:

API Level 2.3.0

onPress(clickEvent as WatchUi.ClickEvent) as Lang.Boolean
Called when user does a touch and hold

Parameters:

clickEvent — (WatchUi.ClickEvent) — Click event
Supported Devices:

[View devices]
Returns:

true if the click event is handled, otherwise false.
Since:

API Level 4.2.0

onTap(clickEvent as WatchUi.ClickEvent) as Lang.Boolean
A screen tap event has occurred.

Only available in WatchFace config mode. Can be overridden by application to change the selected complication, using WatchFaceDelegate.setSelectedComplication()

Parameters:

clickEvent — (WatchUi.ClickEvent) — The click event that occurred
Supported Devices:

[View devices]
Returns:

Lang.Boolean — true if the event was handled, false otherwise.
See Also:

Toybox.Application.AppBase.onStart
Since:

API Level 5.1.0

onWatchFaceConfigEdited(options as { :configId as WatchFaceConfig.Id, :type as WatchUi.WatchFaceConfigType or Null, :committed as Lang.Boolean }) as Void
A watchface config change has occurred.

Only available in WatchFace config mode, application can call WatchFaceConfig.getSettings() to retrieve the current settings.

Parameters:

options — (Lang.Dictionary) — A Dictionary of options.
:configId — (WatchFaceConfig.Id) — The config id that has changed. This can be passed to WatchFaceConfig.getSettings() to retrieve the current settings.
:type — (Type) — The type of config that has changed. if missing or null, indicates the end of previous editting.
:committed — (Lang.Boolean) — true if user has committed the change, false otherwise.
Supported Devices:

[View devices]
See Also:

Toybox.Application.AppBase.onStart
Since:

API Level 5.1.0

setSelectedComplication(complicationIdentifier as Lang.Number) as Void
Set the selected complication field.

Can be called by application when handling onTap event, to change the selected (highlighted) complication. Only effective during WatchFace config mode.

Parameters:

complicationIdentifier — (Lang.Number) — The unique identifier of complication to set as selected.
Supported Devices:

[View devices]
See Also:

Toybox.Application.AppBase.onStart
Since:

API Level 5.1.0

Throws:

(Lang.UnexpectedTypeException) — Thrown if complicationIdentifier is a disallowed data type.
(Lang.OperationNotAllowedException) — Thrown if watch face not in config mode.
(Lang.InvalidValueException) — Thrown if complicationIdentifier is not found among valid complication fields.


Class: Toybox.WatchUi.WatchFacePowerInfo
Inherits:
Toybox.Lang.Objectshow all
Overview
Power information provided when the power budget is exceeded during a call to onPartialUpdate().

This is automatically passed to the onPowerBudgetExceeded() method when it is invoked.

See Also:
Toybox.WatchUi.WatchFaceDelegate
Since:

API Level 2.3.0

App Types:

Audio Content Provider
Data Field
Glance
Watch App
Watch Face
Widget
Instance Member Summary
collapse
executionTimeAverage as Lang.Float
The average partial update execution time onPartialUpdate() took to complete.
executionTimeLimit as Lang.Float
The maximum allowable partial update execution time onPartialUpdate() is allowed to take.
Instance Attribute Details
var executionTimeAverage as Lang.Float
The average partial update execution time onPartialUpdate() took to complete.

Since:

API Level 2.3.0

Returns:

Lang.Float — Average elapsed time per update in milliseconds (ms)
var executionTimeLimit as Lang.Float
The maximum allowable partial update execution time onPartialUpdate() is allowed to take.

Since:

API Level 2.3.0

Returns:

Lang.Float — Maximum allowed time in milliseconds (ms)
